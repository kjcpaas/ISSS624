[
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Work in Progress",
    "section": "",
    "text": "In this hands-on exercise, I learned about the following:\n\nPut summarry of learnings here"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#preparing-the-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#preparing-the-data-sets",
    "title": "Hands-on Exercise 2: Work in Progress",
    "section": "Preparing the data sets",
    "text": "Preparing the data sets\nAdd what data sets are used"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#installing-r-packages",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#installing-r-packages",
    "title": "Hands-on Exercise 2: Work in Progress",
    "section": "Installing R packages",
    "text": "Installing R packages\nWhat R packages are needed?"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "This hands-on exercise covers Chapter 9: Global Measures of Spatial Autocorrelation\nI learned about the following:\n\nSpatial correlation using Moran’s I and Geary’s C\nCorrelograms\n\n\n\nData sets used on this exercise were downloaded from E-learn.\n\n\n\nHunan county boundary layer (shp format)\n\n\n\n\n\nHunan’s local development indicators in 2012 (csv format)\n\nNext, is putting them under the Hands-on_Ex2 directory, with the following file structure:\nHands-on_Ex2\n└── data\n    ├── aspatial\n    │   └── Hunan_2012.csv\n    └── geospatial\n        ├── Hunan.dbf\n        ├── Hunan.prj\n        ├── Hunan.qpj\n        ├── Hunan.shp\n        └── Hunan.shx\n\n\n\n\nI used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#preparing-the-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#preparing-the-data-sets",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Data sets used on this exercise were downloaded from E-learn.\n\n\n\nHunan county boundary layer (shp format)\n\n\n\n\n\nHunan’s local development indicators in 2012 (csv format)\n\nNext, is putting them under the Hands-on_Ex2 directory, with the following file structure:\nHands-on_Ex2\n└── data\n    ├── aspatial\n    │   └── Hunan_2012.csv\n    └── geospatial\n        ├── Hunan.dbf\n        ├── Hunan.prj\n        ├── Hunan.qpj\n        ├── Hunan.shp\n        └── Hunan.shx"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#installing-r-packages",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#installing-r-packages",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "I used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#importing-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#importing-data-sets",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Importing data sets",
    "text": "Importing data sets\nI used st_read() to import the geospatial shp data.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the previous exercises, we transformed the data with EPSG:3414. However, that is not applicable for this data set as we are not working with Singapore 🇸🇬 data set.\n\n\nAs with the previous exercises, I used read_csv() to import aspatial csv data.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#joining-the-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#joining-the-data-sets",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Joining the data sets",
    "text": "Joining the data sets\nIn the exercise, we have to join the 2 data sets using this code:\n\nhunan &lt;- left_join(hunan, hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n\n\n\nNote\n\n\n\nWe did not specify any columns to join by but left_join detected common column, County, so it joined the 2 data sets by this column.\nAt the end of this, we are left with 7 columns, which includes GDPPC from the aspatial data, which contains data for Gross Domestic Product per Capita."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#visualizing-regional-development-indicator",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#visualizing-regional-development-indicator",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nNext, I plotted the GDPPC maps using equal interval classification and equal quantile classification.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nFirst, I built the neighbor list using Queen contiguity-based neighbors. This means the regions must share a border (minimum a point) to be considered neighbors.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#row-standardized-weights-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#row-standardized-weights-matrix",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Row-standardized weights matrix",
    "text": "Row-standardized weights matrix\nNext, I assigned weights to each neighboring county with value 1/(# of neighbors). This could be done by using style=\"W\" to nb2listw().\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation: Moran’s I",
    "text": "Global Spatial Autocorrelation: Moran’s I\n\nMoran’s I test\nNext, I used Moran’s I statistical testing using moran.test().\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Moran’s I value is 0.30075, which is greater than 0. This means that observations are clustered, and tend to be similar.\nThe p-value is also very close to 0, which indicates high confidence on the correlation.\n\n\n\n\nComputing Monte Carlo Moran’s I\nNext, a Monte Carlo simulation was performed for the Moran’s I statistic. 1000 simulations were performed by the code below:\n\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Moran’s I value is 0.30075, same result as that of the Moran’s I test. Similarly, it means that observations are clustered, and tend to be similar.\nThe p-value is also very close to 0, which indicates high confidence on the correlation.\n\n\n\n\nVisualizing Monte Carlo Moran’s I\nFirst, I examined the statistics of the Monte Carlo Moran’s I. I checked the mean, variance, and the quantiles.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nNext, I also plotted the histogram.\n\n\n\n\n\n\nImportant\n\n\n\nI plotted using ggplot2 as an additional challenge from the exercise.\n\n\n\nmc_results_df &lt;- data.frame(moran_i = bperm$res)\nggplot(mc_results_df, aes(x = moran_i)) +\n  geom_histogram(bins = 20, fill = \"grey\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\") +\n  labs(x = \"Sumilated Moran's I\",\n       y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom this Monte Carlo simulations, results are skewed to the left, meaning most of the Moran’s I simulations result in negative values. It means that in most simulation results, there is dispersion so there is no spatial correlation.\nThis is quite contradictory to the statistic from moran.test.\nHowever, as this is a simulation set using seed 1234, results could be different in other simulations because the sampling is different."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation-gearys",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation-gearys",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation: Geary’s",
    "text": "Global Spatial Autocorrelation: Geary’s\nNext I used Geary’s method for spatial correlation.\n\nGeary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\n\n\n\nTip\n\n\n\nGeary’s C statistic is 0.6907, which is less than 1. This means that observations are clustered, and tend to be similar. P-value is also very close to 0, suggesting high-confidence.\n\nIt is consistent with the conclusions in Moran’s I test.\n\n\n\n\nComputing Monte Carlo Geary’s C\nSimilarly, I did permutation test via Monte Carlo simulations.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Moran’s I value is 0.6907, same result as that of the Geary’s C test. Similarly, it means that observations are clustered, and tend to be similar.\nThe p-value is also very close to 0, which indicates high confidence on the correlation.\n\n\n\n\nVisualizing Monte Carlo Geary’s C\nFirst, I examined the statistics of the Monte Carlo Geary’s C. I checked the mean, variance, and the quantiles.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\nFinally, visualizing it.\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom this Monte Carlo simulations, results are quite balanced on 1, which makes it inconclusive as to the spatial clustering and dispersion.\nThis is quite contrary to the statistic resulting from geary.test(), which was more conclusive.\nHowever, as this is a simulation set using seed 1234, results could be different in other simulations because the sampling is different."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#compute-morans-i-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#compute-morans-i-correlogram",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Compute Moran’s I correlogram",
    "text": "Compute Moran’s I correlogram\nFirst, I generated the correlogram for Morans’s I.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nThis did not provide me much information and I didn’t know how to interpret it so I printed the full result.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nTip\n\n\n\nFrom my understanding, since Moran’s I values are greater than 0 and highest on lag 1, it means that the spatial correlation is most significant the closer the regions are."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2B.html#compute-gearys-c-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2B.html#compute-gearys-c-correlogram",
    "title": "Hands-on Exercise 2B: Global Measures of Spatial Autocorrelation",
    "section": "Compute Geary’s C correlogram",
    "text": "Compute Geary’s C correlogram\nNext, I generated the correlogram for Geary’s C.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nNext was to print the results.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Geary’s C values are closest to 0 on the lag distance 1. Similar to Compute Moran’s I correlogram, the spatial correlation is strongest the closer the regions are.\nThe pattern is inverse of the Moran’s I correlogram, which makes sense as Moran’s I and Geary’s C trends are inverse of each other."
  },
  {
    "objectID": "Take-home_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "Take-home_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html",
    "href": "Take-home_Ex1/Take-home_Ex1A.html",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "",
    "text": "The aim of this study is to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nThe main modes of analysis to be used here are Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA).\nIn doing these study, we will be looking at bus trips started during the hours below.\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday evening peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nMore details about the study can be found here.\nIn this part of the study, we will do data wrangling on the data sets so that they are transformed into a form that can be used for geovisualization and spatial analysis."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#preparing-the-data-sets",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#preparing-the-data-sets",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Preparing the data sets",
    "text": "Preparing the data sets\n\nGeospatial\nThis data sets are in shp format.\n\nBus Stop Locations, available publicly from LTA DataMall\n\n\n\nAspatial\nThese data sets are in csv format.\n\nMaster Plan 2019 Subzone Boundary (Web), originally from data.gov.sg but used the one provided on E-learn.\nPassenger Volume By Origin Destination Bus Stops from LTA DataMall via API (need to request for access)\n\nAugust 2023\nSeptember 2023\nOctober 2023 - we will focus on this as the main data set"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#preparing-the-data-directory",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#preparing-the-data-directory",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Preparing the data/ directory",
    "text": "Preparing the data/ directory\nBefore starting our analysis, we have to organize the data sets in a directory.\n\nGeospatial data will be located under data/geospatial\nAspatial data will be located under data/aspatial\ndata/rds to be created to store data that we can reuse and to make our code reproduceable.\n\n\n\n\n\n\n\nShow file structure\n\n\n\n\n\nTake-home_Ex1\n└── data\n    ├── aspatial\n    │   ├── origin_destination_bus_202308.csv\n    │   ├── origin_destination_bus_202309.csv\n    │   └── origin_destination_bus_202310.csv\n    ├── geospatial\n    │   ├── BusStop.cpg\n    │   ├── BusStop.dbf\n    │   ├── BusStop.lyr\n    │   ├── BusStop.prj\n    │   ├── BusStop.sbn\n    │   ├── BusStop.sbx\n    │   ├── BusStop.shp\n    │   ├── BusStop.shp.xml\n    │   ├── BusStop.shx\n    │   ├── MPSZ-2019.cpg\n    │   ├── MPSZ-2019.dbf\n    │   ├── MPSZ-2019.prj\n    │   ├── MPSZ-2019.qmd\n    │   ├── MPSZ-2019.shp\n    │   └── MPSZ-2019.shx\n    └── rds"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#setting-up-the-r-environment",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#setting-up-the-r-environment",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Setting Up the R Environment",
    "text": "Setting Up the R Environment\nAfter preparing the data sets, we can finally proceed to load the R packages needed for this study.\n\n\n\n\n\n\nR packages used\n\n\n\n\n\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\nknitr:for prettifying presentation\nsfdep: for spatial analysis"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#why-hexagons",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#why-hexagons",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Why hexagons?",
    "text": "Why hexagons?\nSome benefits of using a hexagons are:\n\nA hexagon is the polygon with the most number of sides that can tessellate (or tile). Hence it is the most “circular” of the polygons that can be tessellated.\nDistances of the centroid from one hexagon to the next are consistent all around the hexagon, making it easy to find neighbors.\n\nMore information about hexagons in the context of spatial analysis can be found in https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-statistics-toolbox/h-whyhexagons.htm\n\n\n\n\n\n\nTip\n\n\n\nAs in the map in [Singapore boundary data], the subzones have different shapes and sizes. The analysis will benefit from using a consistently-shaped regions because our analysis requires a lot of neighbor calculations."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#importing-singapore-boundary-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#importing-singapore-boundary-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing Singapore boundary data",
    "text": "Importing Singapore boundary data\nWe will use the Master Plan 2019 Subzone Boundary (Web) data set that has been used in class. This is a shp file, that we will import by using `st_read()\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Take-home_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis data frame using the global GPS standard projection, WGS84. We need to convert this to SVY21 that is more appropriate for Singapore 🇸🇬 context, and for consistency with the bus stop data.\n\n\n\nmpsz &lt;- mpsz %&gt;% st_transform(crs=3414)\nhead(mpsz)\n\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8012.578 ymin: 22108.68 xmax: 35287.9 ymax: 31092.38\nProjected CRS: SVY21 / Singapore TM\n                SUBZONE_N SUBZONE_C      PLN_AREA_N PLN_AREA_C       REGION_N\n1             MARINA EAST    MESZ01     MARINA EAST         ME CENTRAL REGION\n2        INSTITUTION HILL    RVSZ05    RIVER VALLEY         RV CENTRAL REGION\n3          ROBERTSON QUAY    SRSZ01 SINGAPORE RIVER         SR CENTRAL REGION\n4 JURONG ISLAND AND BUKOM    WISZ01 WESTERN ISLANDS         WI    WEST REGION\n5            FORT CANNING    MUSZ02          MUSEUM         MU CENTRAL REGION\n6        MARINA EAST (MP)    MPSZ05   MARINE PARADE         MP CENTRAL REGION\n  REGION_C                       geometry\n1       CR MULTIPOLYGON (((33222.98 29...\n2       CR MULTIPOLYGON (((28481.45 30...\n3       CR MULTIPOLYGON (((28087.34 30...\n4       WR MULTIPOLYGON (((14557.7 304...\n5       CR MULTIPOLYGON (((29542.53 31...\n6       CR MULTIPOLYGON (((35279.55 30...\n\n\nNow that the data frame has the correct projection, let’s do a quick plot to visually check if we have the boundaries that we need.\n\ntmap_style(\"natural\")\ntm_shape(mpsz) +\n  tm_fill(\"lightgreen\", title = \"Singapore Boundary\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map of Singapore\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#generating-hexagons",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#generating-hexagons",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Generating hexagons",
    "text": "Generating hexagons\nFollowing the steps on https://urbandatapalette.com/post/2021-08-tessellation-sf/, we will use st_make_grid() to generate the hexagons for analysis.\nWe need to provide a value for cellsize in the function, which is defined as “for hexagonal cells the distance between opposite edges”. We need to create hexagons whose apothem is 250m, resulting in a cell size of 500m.\n\n\n\n\n\n\nWhy is cell size 500 m?\n\n\n\n\n\nApothem is defined as the perpendicular from the center of a regular polygon to one of the sides.\nThe specification is this study requires hexagons to be 250 m from the center of the hexagon to the center of one of it’s edge.\n\n\n\n\n\nAs such, this corresponds to the length of 2 opposite apothems, which is 500 m.\nThe edge length is not the same as apothem. It is 288.675m.\n\\[\n250m/cos(30) = 288.675m\n\\]\n\n\n\nWe will use the mpsz data to ensure that the honeycomb grid perfectly covers the Singapore boundaries\n\nhoneycomb &lt;-\n  st_make_grid(mpsz,\n               cellsize = 500,\n               what = \"polygon\",\n               square = FALSE) %&gt;%\n  st_sf()\n\n\n\n\n\n\n\nWe have to use st_sf() to convert the result to a data frame that can be used for the succeeding steps.\n\n\n\n\n\n\n\n\n\nResult: Generated hexagons\n\n\n\n\n\nChecking the generated hexagons revealed that it covers all the bus stops.\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(honeycomb) +\n  tm_fill(col = \"white\", title = \"Hexagons\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Singapore with honeycomb grid\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2, bg.color = \"white\", bg.alpha = 0.5) +\n  tm_scale_bar(bg.color = \"white\", bg.alpha = 0.5) +\n  tm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5) +\n  tm_shape(busstops) +\n  tm_dots(col = \"red\", size = 0.001, title = \"Bus Stops\")\n\n\n\n\n\nChecking the scale reveals that the generated hexagons are of the expected side, 500m from one edge to the opposite edge.\nWe still need to filter the hexagons that contain bus stops."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#fitting-grid-exactly-to-the-region",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#fitting-grid-exactly-to-the-region",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Fitting grid exactly to the region",
    "text": "Fitting grid exactly to the region\nThe grid above has hexagons outside of Singapore bounds. We need to filter the grid such that we are left with only the hexagons that intersect with Singapore boundary.\nWe will use st_intersects() and filter() to filter out the hexagons that intersect Singapore.\n\nsg_honeycomb$n_collisions = lengths(st_intersects(sg_honeycomb, mpsz))\nsg_honeycomb &lt;- filter(sg_honeycomb, n_collisions &gt; 0)\n\nLet’s generate a map again if the cleaning generated our expected result.\n\ntm_shape(sg_honeycomb) +\n  tm_fill(col = \"white\", title = \"Hexagons\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Singapore with honeycomb grid\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThere are some tiny islands outside of the Singapore mainland. Although they have no bus stops, we will keep them in the data frame for now as other hexagons also do not have bus stops in them (as they have no red dots inside)."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#adding-an-id-for-each-cell",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#adding-an-id-for-each-cell",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Adding an ID for each cell",
    "text": "Adding an ID for each cell\nNow that we have perfectly fitting hexagon grid, we will assign a HEXAGON_ID for each hexagon to make each cell identifiable for further analysis.\nWe will also remove n_collisions column as we do not need it anymore.\n\nsg_honeycomb = sg_honeycomb %&gt;%\n  mutate(HEXAGON_ID = row_number()) %&gt;%\n  select(, -n_collisions)\nhead(sg_honeycomb)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2167.538 ymin: 22388.25 xmax: 2917.538 ymax: 27295.73\nProjected CRS: SVY21 / Singapore TM\n  HEXAGON_ID                       geometry\n1          1 POLYGON ((2417.538 24553.31...\n2          2 POLYGON ((2667.538 22388.25...\n3          3 POLYGON ((2667.538 23254.27...\n4          4 POLYGON ((2667.538 24120.3,...\n5          5 POLYGON ((2667.538 24986.33...\n6          6 POLYGON ((2667.538 26718.38...\n\n\nNow that we have the assigned an ID to each hexagon, we have the desired form of the grid.\n\n\n\n\n\n\nSave point\n\n\n\nLet’s save the honeycomb grid as an rds file so we can reuse it later.\n\nwrite_rds(sg_honeycomb, \"data/rds/sg_honeycomb.rds\")\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nFrom this point forward, we will be using sg_honeycomb to do the analysis. Hence, we can already remove mpsz from the environment.\nBy removing this, we are left with data in our environment that are relevant to the next part of the study.\n\nrm(mpsz)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#importing-the-busstop-data-set",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#importing-the-busstop-data-set",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing the BusStop data set",
    "text": "Importing the BusStop data set\nThe BusStop data set is a in shp format. We can import it by using st_read() from the sf package.\n\nbusstops &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"BusStop\")\n\nReading layer `BusStop' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Take-home_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\n\n\n\nCorrecting the projection\n\n\n\n\n\nWe want to use SVY21 as the projection for this study as it is the projection used for local Singaporean context.\nAfter the import, it shows that the Projected CRSis SVY21. However, checking the CRS with st_crs() tells a different story.\n\nst_crs(busstops)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAs we can see EPSG value is 9001, which correspond to WGS84. We have to fix the projection by transforming to EPSG value of 3414, which corresponds to SVY21.\n\nbusstops &lt;- st_transform(busstops, crs = 3414)\n\n\n\n\nNext, let’s take a look at the available columns to identify which columns we can use for analysis.\n\nkable(head(busstops))\n\n\n\n\n\n\n\n\n\n\nBUS_STOP_N\nBUS_ROOF_N\nLOC_DESC\ngeometry\n\n\n\n\n22069\nB06\nOPP CEVA LOGISTICS\nPOINT (13576.31 32883.65)\n\n\n32071\nB23\nAFT TRACK 13\nPOINT (13228.59 44206.38)\n\n\n44331\nB01\nBLK 239\nPOINT (21045.1 40242.08)\n\n\n96081\nB05\nGRACE INDEPENDENT CH\nPOINT (41603.76 35413.11)\n\n\n11561\nB05\nBLK 166\nPOINT (24568.74 30391.85)\n\n\n66191\nB03\nAFT CORFE PL\nPOINT (30951.58 38079.61)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom this initial look in the data, BUS_STOP_N and LOC_DESC can potentially be used to match records in the passenger volume data set."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#mapping-bus-stop-locations-to-honeycomb-cells",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#mapping-bus-stop-locations-to-honeycomb-cells",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Mapping bus stop locations to honeycomb cells",
    "text": "Mapping bus stop locations to honeycomb cells\nNext, we have to figure out which hexagons contains each point corresponding to bus stop locations.\nThis can be done using st_intersection(). We will also drop the geometry here using st_drop_geometry() and make the data spatial as the resulting mapping will be used as the connector to join the aspatial bus commuter data with the hexagons.\n\nbusstop_cells &lt;- st_intersection(busstops, sg_honeycomb) %&gt;%\n  st_drop_geometry() %&gt;%\n  select(c(BUS_STOP_N, LOC_DESC, HEXAGON_ID)) %&gt;%\n  rename(BUS_STOP_ID = BUS_STOP_N) %&gt;%\n  rename(BUS_STOP_NAME = LOC_DESC)\nkable(head(busstop_cells))\n\n\n\n\n\nBUS_STOP_ID\nBUS_STOP_NAME\nHEXAGON_ID\n\n\n\n\n3269\n25059\nAFT TUAS STH BLVD\n48\n\n\n254\n26379\nYONG NAM\n70\n\n\n2570\n25751\nBEF TUAS STH AVE 14\n82\n\n\n2897\n25761\nOPP REC S’PORE\n82\n\n\n4203\n26389\nBEF TUAS STH AVE 5\n84\n\n\n2403\n26369\nSEE HUP SENG\n85\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that busstop_cells has 5165 rows while busstops has 5161. The five missing bus stops correspond to those outside of Singapore border noticed in [##Importing the BusStop data set].\n\n\n\n\n\n\n\n\nSave point\n\n\n\nNow that we have the mapping table, let’s save this as an rds file so we can reuse it later.\n\nwrite_rds(busstop_cells, \"data/rds/busstop_cells.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#importing-bus-commuter-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#importing-bus-commuter-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing bus commuter data",
    "text": "Importing bus commuter data\nWe will use the Passenger Volume By Origin Destination Bus Stops data set to provide data about bus commuter volumes.\nThese files are in csv file format so we will use read_csv to import them.\n\n\n\n\n\n\nImportant\n\n\n\nWe aim to analyze data for 3 months. However, we will focus on the October 2023 for now to simplify the steps.\n\n\n\nodbus202310 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nglimpse(odbus202310)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#converting-relevant-columns-to-factor-data-type",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#converting-relevant-columns-to-factor-data-type",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Converting relevant columns to factor data type",
    "text": "Converting relevant columns to factor data type\nThe columns we are interested in are:\n\nORIGIN_PT_CODE\nDAY_TYPE\nTIME_PER_HOUR (will not be converted to factor so we can do arithmetic operations)\n\nThese are data with finite values with these corresponding number of values:\n\n\n\n\n\n\n\n\nColumn Name\nNumber of Values\nDescription\n\n\n\n\nORIGIN_PT_CODE\n5156\nCorresponding to number of rows in busstop_cells\n\n\nDAY_TYPE\n2\nWeekday, Weekdays/Holidays\n\n\nTIME_PER_HOUR\n24\ncorresponding to hours per day\n\n\nNumber of hexagons *for reference\n4131\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen we are done with this processing, we expect at most 247,488 rows in the data frame after [##Aggregating trips by origin bus stop, hour of day, day type].\n\\[\n5156 \\times 2 \\times 24 = 247,488\n\\]\nOn the other hand, after aggregating on a hexagon level, we expect at most 198,288 rows in the final output.\n\\[\n4131 \\times 2 \\times 24 = 198,288\n\\]\n\n\n\nodbus202310$ORIGIN_PT_CODE &lt;- as.factor(odbus202310$ORIGIN_PT_CODE)\nodbus202310$DAY_TYPE &lt;- as.factor(odbus202310$DAY_TYPE)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#aggregating-trips-by-origin-bus-stop-day-type-hour-of-day",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#aggregating-trips-by-origin-bus-stop-day-type-hour-of-day",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Aggregating trips by origin bus stop, day type, hour of day",
    "text": "Aggregating trips by origin bus stop, day type, hour of day\nTo do this aggregation, we need to:\n\nGroup data by ORIGIN_PT_CODE, DAY_TYPE, and TIME_PER_HOUR\nAggregate the TOTAL_TRIPS by getting the sum of said value for each group\nRename ORIGIN_PT_CODE to BUS_STOP_ID to have the same column name as busstop_cells.\nRename TIME_PER_HOUR to HOUR_OF_DAY to be more descriptive of its purpose.\n\nThis can be achieved by using group_by(), summarise(), and rename().\n\nhourly_from_bs202310 &lt;-\n  odbus202310 %&gt;%\n  group_by(\n    ORIGIN_PT_CODE,\n    DAY_TYPE,\n    TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  rename(BUS_STOP_ID = ORIGIN_PT_CODE) %&gt;%\n  rename(HOUR_OF_DAY = TIME_PER_HOUR)\nkable(hourly_from_bs202310[15:50,])\n\n\n\n\nBUS_STOP_ID\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\n\n\n\n\n01012\nWEEKDAY\n17\n2266\n\n\n01012\nWEEKDAY\n18\n2470\n\n\n01012\nWEEKDAY\n19\n2042\n\n\n01012\nWEEKDAY\n20\n1222\n\n\n01012\nWEEKDAY\n21\n1701\n\n\n01012\nWEEKDAY\n22\n1501\n\n\n01012\nWEEKDAY\n23\n796\n\n\n01012\nWEEKENDS/HOLIDAY\n0\n204\n\n\n01012\nWEEKENDS/HOLIDAY\n5\n16\n\n\n01012\nWEEKENDS/HOLIDAY\n6\n87\n\n\n01012\nWEEKENDS/HOLIDAY\n7\n128\n\n\n01012\nWEEKENDS/HOLIDAY\n8\n183\n\n\n01012\nWEEKENDS/HOLIDAY\n9\n242\n\n\n01012\nWEEKENDS/HOLIDAY\n10\n306\n\n\n01012\nWEEKENDS/HOLIDAY\n11\n416\n\n\n01012\nWEEKENDS/HOLIDAY\n12\n561\n\n\n01012\nWEEKENDS/HOLIDAY\n13\n582\n\n\n01012\nWEEKENDS/HOLIDAY\n14\n618\n\n\n01012\nWEEKENDS/HOLIDAY\n15\n810\n\n\n01012\nWEEKENDS/HOLIDAY\n16\n764\n\n\n01012\nWEEKENDS/HOLIDAY\n17\n838\n\n\n01012\nWEEKENDS/HOLIDAY\n18\n757\n\n\n01012\nWEEKENDS/HOLIDAY\n19\n702\n\n\n01012\nWEEKENDS/HOLIDAY\n20\n537\n\n\n01012\nWEEKENDS/HOLIDAY\n21\n556\n\n\n01012\nWEEKENDS/HOLIDAY\n22\n619\n\n\n01012\nWEEKENDS/HOLIDAY\n23\n345\n\n\n01013\nWEEKDAY\n0\n100\n\n\n01013\nWEEKDAY\n6\n180\n\n\n01013\nWEEKDAY\n7\n138\n\n\n01013\nWEEKDAY\n8\n254\n\n\n01013\nWEEKDAY\n9\n269\n\n\n01013\nWEEKDAY\n10\n318\n\n\n01013\nWEEKDAY\n11\n468\n\n\n01013\nWEEKDAY\n12\n615\n\n\n01013\nWEEKDAY\n13\n758\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\nWe will save hourly_from_bs202310 as this processed data will be useful later on.\n\nwrite_rds(hourly_from_bs202310, \"data/rds/hourly_from_bs202310.rds\")\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWe also do not need odbus202310 anymore so we can remove it from the environment.\n\nrm(odbus202310)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#joining-aspatial-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#joining-aspatial-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Joining aspatial data",
    "text": "Joining aspatial data\nAs the goal of this study is to analyze data based on the hexagons, we need to do further processing on hourly_from_bs202310 to aggregate the data based on hexagons.\nTo do that, we will first do a left_join() of busstop_cells to hourly_from_bs202310. This will add information on which cell the bus stops belong to. We will also apply unique() to the resulting data set get rid of duplicate information.\n\nhourly_from_hex202310 &lt;-\n  left_join(\n    hourly_from_bs202310,\n    busstop_cells\n  )\nglimpse(hourly_from_hex202310)\n\nRows: 191,176\nColumns: 6\nGroups: BUS_STOP_ID, DAY_TYPE [10,099]\n$ BUS_STOP_ID   &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"0…\n$ DAY_TYPE      &lt;fct&gt; WEEKDAY, WEEKDAY, WEEKDAY, WEEKDAY, WEEKDAY, WEEKDAY, WE…\n$ HOUR_OF_DAY   &lt;dbl&gt; 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,…\n$ TRIPS         &lt;dbl&gt; 434, 1, 32, 231, 375, 724, 440, 579, 739, 885, 1064, 113…\n$ BUS_STOP_NAME &lt;chr&gt; \"HOTEL GRAND PACIFIC\", \"HOTEL GRAND PACIFIC\", \"HOTEL GRA…\n$ HEXAGON_ID    &lt;int&gt; 2597, 2597, 2597, 2597, 2597, 2597, 2597, 2597, 2597, 25…\n\n\nThis is a strange result as hourly_from_hex202310 has more number of rows than hourly_from_bs202310 (191176 vs 190551). The most plausible explanation is that there are columns with NA.\n\nhourly_from_hex202310[\n  rowSums(is.na(hourly_from_hex202310)) &gt; 0,\n  ] %&gt;%\n  head()\n\n# A tibble: 6 × 6\n# Groups:   BUS_STOP_ID, DAY_TYPE [1]\n  BUS_STOP_ID DAY_TYPE HOUR_OF_DAY TRIPS BUS_STOP_NAME HEXAGON_ID\n  &lt;chr&gt;       &lt;fct&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;              &lt;int&gt;\n1 03361       WEEKDAY            7     8 &lt;NA&gt;                  NA\n2 03361       WEEKDAY            8     3 &lt;NA&gt;                  NA\n3 03361       WEEKDAY           10    17 &lt;NA&gt;                  NA\n4 03361       WEEKDAY           11     7 &lt;NA&gt;                  NA\n5 03361       WEEKDAY           12     5 &lt;NA&gt;                  NA\n6 03361       WEEKDAY           13     4 &lt;NA&gt;                  NA\n\n\nThere are rows without HEXAGON_ID. This means that there are bus stops in hourly_from_hex202310 that are not in busstop_cells. As these missing bus stops do not have spatial data, we can remove these rows as we cannot do spatial analysis without it.\n\nhourly_from_hex202310 &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(!is.na(HEXAGON_ID))\nglimpse(hourly_from_hex202310)\n\nRows: 189,004\nColumns: 6\nGroups: BUS_STOP_ID, DAY_TYPE [9,978]\n$ BUS_STOP_ID   &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"0…\n$ DAY_TYPE      &lt;fct&gt; WEEKDAY, WEEKDAY, WEEKDAY, WEEKDAY, WEEKDAY, WEEKDAY, WE…\n$ HOUR_OF_DAY   &lt;dbl&gt; 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,…\n$ TRIPS         &lt;dbl&gt; 434, 1, 32, 231, 375, 724, 440, 579, 739, 885, 1064, 113…\n$ BUS_STOP_NAME &lt;chr&gt; \"HOTEL GRAND PACIFIC\", \"HOTEL GRAND PACIFIC\", \"HOTEL GRA…\n$ HEXAGON_ID    &lt;int&gt; 2597, 2597, 2597, 2597, 2597, 2597, 2597, 2597, 2597, 25…\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe could have also used inner_join instead of left_join. However, we did not have enough information to expect that there are bus stops without spatial data."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#aggregating-trips-by-hexagon_id-day-type-hour-of-day",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#aggregating-trips-by-hexagon_id-day-type-hour-of-day",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Aggregating trips by hexagon_id, , day type, hour of day",
    "text": "Aggregating trips by hexagon_id, , day type, hour of day\nFollowing the same method as in Aggregating trips by origin bus stop, day type, hour of day, we will aggregate the data by HEXAGON_ID, DAY_TYPE, and TIME_PER_HOUR.\n\nhourly_from_hex202310 &lt;-\n  hourly_from_hex202310 %&gt;%\n  group_by(\n    HEXAGON_ID,\n    DAY_TYPE,\n    HOUR_OF_DAY) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nkable(head(hourly_from_hex202310, n = 30))\n\n\n\n\nHEXAGON_ID\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\n\n\n\n\n48\nWEEKDAY\n7\n74\n\n\n48\nWEEKDAY\n8\n19\n\n\n48\nWEEKDAY\n9\n10\n\n\n48\nWEEKDAY\n10\n7\n\n\n48\nWEEKDAY\n16\n26\n\n\n48\nWEEKDAY\n17\n122\n\n\n48\nWEEKDAY\n18\n224\n\n\n48\nWEEKDAY\n19\n38\n\n\n48\nWEEKDAY\n20\n6\n\n\n48\nWEEKENDS/HOLIDAY\n7\n28\n\n\n48\nWEEKENDS/HOLIDAY\n8\n9\n\n\n48\nWEEKENDS/HOLIDAY\n9\n9\n\n\n48\nWEEKENDS/HOLIDAY\n10\n2\n\n\n48\nWEEKENDS/HOLIDAY\n16\n3\n\n\n48\nWEEKENDS/HOLIDAY\n17\n21\n\n\n48\nWEEKENDS/HOLIDAY\n18\n18\n\n\n48\nWEEKENDS/HOLIDAY\n19\n14\n\n\n48\nWEEKENDS/HOLIDAY\n20\n1\n\n\n70\nWEEKDAY\n6\n23\n\n\n70\nWEEKDAY\n7\n24\n\n\n70\nWEEKDAY\n8\n26\n\n\n70\nWEEKDAY\n9\n5\n\n\n70\nWEEKDAY\n10\n39\n\n\n70\nWEEKDAY\n11\n107\n\n\n70\nWEEKDAY\n12\n43\n\n\n70\nWEEKDAY\n13\n9\n\n\n70\nWEEKDAY\n14\n53\n\n\n70\nWEEKDAY\n15\n174\n\n\n70\nWEEKDAY\n16\n257\n\n\n70\nWEEKDAY\n17\n159\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\nWe will save hourly_from_hex202310 as this processed data will be useful later on.\n\nwrite_rds(hourly_from_hex202310, \"data/rds/hourly_from_hex202310.rds\")\n\n\n\nAs we do not need hourly_from_bs202310 anymore, we can also remove it from the environment.\n\nrm(hourly_from_bs202310)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#weekday-morning-peak-6---9am",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#weekday-morning-peak-6---9am",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekday morning peak (6 - 9am)",
    "text": "Weekday morning peak (6 - 9am)\nFollowing the methodology above, we will first filter and aggregate trip data by BUS_STOP_ID\n\nweekday_am &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 6 &\n           HOUR_OF_DAY &lt; 9) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekday_am)\n\nRows: 1,488\nColumns: 2\n$ HEXAGON_ID &lt;int&gt; 48, 70, 82, 84, 85, 94, 95, 96, 97, 98, 110, 112, 113, 114,…\n$ TRIPS      &lt;dbl&gt; 93, 73, 185, 265, 43, 54, 1268, 935, 50, 395, 143, 1540, 6,…\n\n\nNext storing them in a column in bus_peaks_hc202310 via left_join(). We will also rename TRIPS to WEEKDAY_AM_TRIPS for better identification.\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekday_am) %&gt;%\n  rename(WEEKDAY_AM_TRIPS = TRIPS)\nglimpse(bus_peaks_hc202310)\n\nRows: 4,131\nColumns: 4\n$ HEXAGON_ID       &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ NUM_BUS_STOPS    &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ WEEKDAY_AM_TRIPS &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ geometry         &lt;POLYGON [m]&gt; POLYGON ((2417.538 24553.31..., POLYGON ((266…\n\n\nWe can see that WEEKDAY_AM_TRIPS is NA for some rows. We will set these to 0 for consistency with the data type dbl.\n\nbus_peaks_hc202310$WEEKDAY_AM_TRIPS[is.na(bus_peaks_hc202310$WEEKDAY_AM_TRIPS)] &lt;- 0\nsummary(bus_peaks_hc202310$WEEKDAY_AM_TRIPS)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0    5076    1536  336087 \n\n\nThe median of WEEKDAY_AM_TRIPS is 0. This is problematic as this heavily skews the data. Let’s revert the NA values for hexagons without bus stops as counting the bus trips started in those areas does not make sense anyway.\n\nbus_peaks_hc202310$WEEKDAY_AM_TRIPS[bus_peaks_hc202310$NUM_BUS_STOPS == 0] &lt;- NA\nsummary(bus_peaks_hc202310$WEEKDAY_AM_TRIPS)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0     745    5993   13804   17931  336087    2612 \n\n\nThe data distribution is much less skewed now. Let’s have a peek at the data again.\n\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\n\n\n\n\n\nHEXAGON_ID\nNUM_BUS_STOPS\nWEEKDAY_AM_TRIPS\ngeometry\n\n\n\n\n121\n121\n0\nNA\nPOLYGON ((5417.538 28017.41…\n\n\n122\n122\n0\nNA\nPOLYGON ((5417.538 28883.44…\n\n\n123\n123\n1\n26\nPOLYGON ((5417.538 29749.47…\n\n\n124\n124\n2\n89\nPOLYGON ((5417.538 30615.49…\n\n\n125\n125\n1\n144\nPOLYGON ((5417.538 31481.52…\n\n\n126\n126\n1\n1185\nPOLYGON ((5417.538 32347.54…\n\n\n127\n127\n4\n196\nPOLYGON ((5417.538 33213.57…\n\n\n128\n128\n2\n222\nPOLYGON ((5417.538 34079.59…\n\n\n129\n129\n0\nNA\nPOLYGON ((5417.538 34945.62…\n\n\n130\n130\n0\nNA\nPOLYGON ((5667.538 21522.22…\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_am as the data it has is already in bus_peaks_hc202310.\n\nrm(weekday_am)\n\n\n\nWe can proceed to applying the same for the other peak times. I won’t go into detail of each step."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#weekday-evening-peak-5---8pm",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#weekday-evening-peak-5---8pm",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekday evening peak (5 - 8pm)",
    "text": "Weekday evening peak (5 - 8pm)\n\nweekday_pm &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 17 &\n           HOUR_OF_DAY &lt; 20) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekday_pm)\n\nRows: 1,490\nColumns: 2\n$ HEXAGON_ID &lt;int&gt; 48, 70, 82, 84, 85, 94, 95, 96, 97, 98, 110, 112, 113, 114,…\n$ TRIPS      &lt;dbl&gt; 384, 263, 1812, 259, 211, 259, 2633, 1995, 344, 85, 510, 14…\n\n\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekday_pm) %&gt;%\n  rename(WEEKDAY_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202310$WEEKDAY_PM_TRIPS[\n  bus_peaks_hc202310$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202310$WEEKDAY_PM_TRIPS)\n  ] &lt;- 0\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\n\n\n\n\n\n\nHEXAGON_ID\nNUM_BUS_STOPS\nWEEKDAY_AM_TRIPS\nWEEKDAY_PM_TRIPS\ngeometry\n\n\n\n\n121\n121\n0\nNA\nNA\nPOLYGON ((5417.538 28017.41…\n\n\n122\n122\n0\nNA\nNA\nPOLYGON ((5417.538 28883.44…\n\n\n123\n123\n1\n26\n121\nPOLYGON ((5417.538 29749.47…\n\n\n124\n124\n2\n89\n1177\nPOLYGON ((5417.538 30615.49…\n\n\n125\n125\n1\n144\n1074\nPOLYGON ((5417.538 31481.52…\n\n\n126\n126\n1\n1185\n1838\nPOLYGON ((5417.538 32347.54…\n\n\n127\n127\n4\n196\n2542\nPOLYGON ((5417.538 33213.57…\n\n\n128\n128\n2\n222\n895\nPOLYGON ((5417.538 34079.59…\n\n\n129\n129\n0\nNA\nNA\nPOLYGON ((5417.538 34945.62…\n\n\n130\n130\n0\nNA\nNA\nPOLYGON ((5667.538 21522.22…\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_pm as the data it has is already in bus_peaks_hc202310.\n\nrm(weekday_pm)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#weekendholiday-morning-peak-11am---2pm",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#weekendholiday-morning-peak-11am---2pm",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekend/holiday morning peak (11am - 2pm)",
    "text": "Weekend/holiday morning peak (11am - 2pm)\n\nweekend_am &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 11 &\n           HOUR_OF_DAY &lt; 14) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekend_am)\n\nRows: 1,492\nColumns: 2\n$ HEXAGON_ID &lt;int&gt; 70, 82, 84, 85, 94, 95, 96, 97, 98, 110, 112, 113, 114, 123…\n$ TRIPS      &lt;dbl&gt; 41, 154, 75, 56, 18, 358, 547, 36, 22, 36, 824, 5, 3043, 11…\n\n\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekend_am) %&gt;%\n  rename(WEEKEND_AM_TRIPS = TRIPS)\n\nbus_peaks_hc202310$WEEKEND_AM_TRIPS[\n  bus_peaks_hc202310$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202310$WEEKEND_AM_TRIPS)\n  ] &lt;- 0\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHEXAGON_ID\nNUM_BUS_STOPS\nWEEKDAY_AM_TRIPS\nWEEKDAY_PM_TRIPS\nWEEKEND_AM_TRIPS\ngeometry\n\n\n\n\n121\n121\n0\nNA\nNA\nNA\nPOLYGON ((5417.538 28017.41…\n\n\n122\n122\n0\nNA\nNA\nNA\nPOLYGON ((5417.538 28883.44…\n\n\n123\n123\n1\n26\n121\n11\nPOLYGON ((5417.538 29749.47…\n\n\n124\n124\n2\n89\n1177\n118\nPOLYGON ((5417.538 30615.49…\n\n\n125\n125\n1\n144\n1074\n110\nPOLYGON ((5417.538 31481.52…\n\n\n126\n126\n1\n1185\n1838\n785\nPOLYGON ((5417.538 32347.54…\n\n\n127\n127\n4\n196\n2542\n227\nPOLYGON ((5417.538 33213.57…\n\n\n128\n128\n2\n222\n895\n29\nPOLYGON ((5417.538 34079.59…\n\n\n129\n129\n0\nNA\nNA\nNA\nPOLYGON ((5417.538 34945.62…\n\n\n130\n130\n0\nNA\nNA\nNA\nPOLYGON ((5667.538 21522.22…\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_pm as the data it has is already in bus_peaks_hc202310.\n\nrm(weekend_am)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#weekendholiday-evening-peak-4---7pm",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#weekendholiday-evening-peak-4---7pm",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekend/holiday evening peak (4 - 7pm)",
    "text": "Weekend/holiday evening peak (4 - 7pm)\n\nweekend_pm &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 16 &\n           HOUR_OF_DAY &lt; 19) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekend_pm)\n\nRows: 1,487\nColumns: 2\n$ HEXAGON_ID &lt;int&gt; 48, 70, 82, 84, 85, 94, 95, 96, 97, 98, 110, 112, 113, 114,…\n$ TRIPS      &lt;dbl&gt; 42, 89, 275, 94, 42, 41, 622, 814, 48, 105, 63, 1064, 6, 30…\n\n\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekend_pm) %&gt;%\n  rename(WEEKEND_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202310$WEEKEND_PM_TRIPS[\n  bus_peaks_hc202310$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202310$WEEKEND_PM_TRIPS)\n  ] &lt;- 0\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHEXAGON_ID\nNUM_BUS_STOPS\nWEEKDAY_AM_TRIPS\nWEEKDAY_PM_TRIPS\nWEEKEND_AM_TRIPS\nWEEKEND_PM_TRIPS\ngeometry\n\n\n\n\n121\n121\n0\nNA\nNA\nNA\nNA\nPOLYGON ((5417.538 28017.41…\n\n\n122\n122\n0\nNA\nNA\nNA\nNA\nPOLYGON ((5417.538 28883.44…\n\n\n123\n123\n1\n26\n121\n11\n32\nPOLYGON ((5417.538 29749.47…\n\n\n124\n124\n2\n89\n1177\n118\n160\nPOLYGON ((5417.538 30615.49…\n\n\n125\n125\n1\n144\n1074\n110\n298\nPOLYGON ((5417.538 31481.52…\n\n\n126\n126\n1\n1185\n1838\n785\n913\nPOLYGON ((5417.538 32347.54…\n\n\n127\n127\n4\n196\n2542\n227\n533\nPOLYGON ((5417.538 33213.57…\n\n\n128\n128\n2\n222\n895\n29\n64\nPOLYGON ((5417.538 34079.59…\n\n\n129\n129\n0\nNA\nNA\nNA\nNA\nPOLYGON ((5417.538 34945.62…\n\n\n130\n130\n0\nNA\nNA\nNA\nNA\nPOLYGON ((5667.538 21522.22…\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_pm as the data it has is already in bus_peaks_hc202310.\n\nrm(weekend_pm)\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\nWe will save bus_peaks_hc202310 as this contains data we need for spatial analysis.\n\nwrite_rds(bus_peaks_hc202310, \"data/rds/bus_peaks_hc202310.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#august-2023",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#august-2023",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "August 2023",
    "text": "August 2023\n\n# Aggregate on bus stop level\nodbus202308 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\nodbus202308$ORIGIN_PT_CODE &lt;- as.factor(odbus202308$ORIGIN_PT_CODE)\nodbus202308$DAY_TYPE &lt;- as.factor(odbus202308$DAY_TYPE)\n\nhourly_from_bs202308 &lt;-\n  odbus202308 %&gt;%\n  group_by(\n    ORIGIN_PT_CODE,\n    DAY_TYPE,\n    TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  rename(BUS_STOP_ID = ORIGIN_PT_CODE) %&gt;%\n  rename(HOUR_OF_DAY = TIME_PER_HOUR)\n\nwrite_rds(hourly_from_bs202308, \"data/rds/hourly_from_bs202308.rds\")\nrm(odbus202308)\n\n# Aggregate hexagon level\n\nhourly_from_hex202308 &lt;-\n  left_join(\n    hourly_from_bs202308,\n    busstop_cells\n  )\n\nhourly_from_hex202308 &lt;-\n  hourly_from_hex202308 %&gt;%\n  group_by(\n    HEXAGON_ID,\n    DAY_TYPE,\n    HOUR_OF_DAY) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nwrite_rds(hourly_from_hex202308, \"data/rds/hourly_from_hex202308.rds\")\nrm(hourly_from_bs202308)\n\n# Extract peak bus hour commuter traffic\n\nbus_peaks_hc202308 &lt;- sg_honeycomb\n\nweekday_am &lt;-\n  hourly_from_hex202308 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 6 &\n           HOUR_OF_DAY &lt; 9) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202308 &lt;-\n  left_join(bus_peaks_hc202308, weekday_am) %&gt;%\n  rename(WEEKDAY_AM_TRIPS = TRIPS)\n\nbus_peaks_hc202308$WEEKDAY_AM_TRIPS[\n  bus_peaks_hc202308$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202308$WEEKDAY_AM_TRIPS)\n  ] &lt;- 0\nrm(weekday_am)\n\nweekday_pm &lt;-\n  hourly_from_hex202308 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 17 &\n           HOUR_OF_DAY &lt; 20) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202308 &lt;-\n  left_join(bus_peaks_hc202308, weekday_pm) %&gt;%\n  rename(WEEKDAY_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202308$WEEKDAY_PM_TRIPS[\n  bus_peaks_hc202308$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202308$WEEKDAY_PM_TRIPS)\n  ] &lt;- 0\nrm(weekday_pm)\n\nweekend_am &lt;-\n  hourly_from_hex202308 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 11 &\n           HOUR_OF_DAY &lt; 14) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202308 &lt;-\n  left_join(bus_peaks_hc202308, weekend_am) %&gt;%\n  rename(WEEKEND_AM_TRIPS = TRIPS)\n\nbus_peaks_hc202308$WEEKEND_AM_TRIPS[\n  bus_peaks_hc202308$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202308$WEEKEND_AM_TRIPS)\n  ] &lt;- 0\nrm(weekend_am)\n\nweekend_pm &lt;-\n  hourly_from_hex202308 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 16 &\n           HOUR_OF_DAY &lt; 19) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202308 &lt;-\n  left_join(bus_peaks_hc202308, weekend_pm) %&gt;%\n  rename(WEEKEND_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202308$WEEKEND_PM_TRIPS[\n  bus_peaks_hc202308$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202308$WEEKEND_PM_TRIPS)\n  ] &lt;- 0\nrm(weekend_pm)\n\nwrite_rds(bus_peaks_hc202308, \"data/rds/bus_peaks_hc202308.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#september-2023",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#september-2023",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "September 2023",
    "text": "September 2023\n\n# Aggregate on bus stop level\nodbus202309 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202309.csv\")\nodbus202309$ORIGIN_PT_CODE &lt;- as.factor(odbus202309$ORIGIN_PT_CODE)\nodbus202309$DAY_TYPE &lt;- as.factor(odbus202309$DAY_TYPE)\n\nhourly_from_bs202309 &lt;-\n  odbus202309 %&gt;%\n  group_by(\n    ORIGIN_PT_CODE,\n    DAY_TYPE,\n    TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  rename(BUS_STOP_ID = ORIGIN_PT_CODE) %&gt;%\n  rename(HOUR_OF_DAY = TIME_PER_HOUR)\n\nwrite_rds(hourly_from_bs202309, \"data/rds/hourly_from_bs202309.rds\")\nrm(odbus202309)\n\n# Aggregate hexagon level\n\nhourly_from_hex202309 &lt;-\n  left_join(\n    hourly_from_bs202309,\n    busstop_cells\n  )\n\nhourly_from_hex202309 &lt;-\n  hourly_from_hex202309 %&gt;%\n  group_by(\n    HEXAGON_ID,\n    DAY_TYPE,\n    HOUR_OF_DAY) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nwrite_rds(hourly_from_hex202309, \"data/rds/hourly_from_hex202309.rds\")\nrm(hourly_from_bs202309)\n\n# Extract peak bus hour commuter traffic\n\nbus_peaks_hc202309 &lt;- sg_honeycomb\n\nweekday_am &lt;-\n  hourly_from_hex202309 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 6 &\n           HOUR_OF_DAY &lt; 9) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202309 &lt;-\n  left_join(bus_peaks_hc202309, weekday_am) %&gt;%\n  rename(WEEKDAY_AM_TRIPS = TRIPS)\n\nbus_peaks_hc202309$WEEKDAY_AM_TRIPS[\n  bus_peaks_hc202309$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202309$WEEKDAY_AM_TRIPS)\n  ] &lt;- 0\nrm(weekday_am)\n\nweekday_pm &lt;-\n  hourly_from_hex202309 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 17 &\n           HOUR_OF_DAY &lt; 20) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202309 &lt;-\n  left_join(bus_peaks_hc202309, weekday_pm) %&gt;%\n  rename(WEEKDAY_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202309$WEEKDAY_PM_TRIPS[\n  bus_peaks_hc202309$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202309$WEEKDAY_PM_TRIPS)\n  ] &lt;- 0\nrm(weekday_pm)\n\nweekend_am &lt;-\n  hourly_from_hex202309 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 11 &\n           HOUR_OF_DAY &lt; 14) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202309 &lt;-\n  left_join(bus_peaks_hc202309, weekend_am) %&gt;%\n  rename(WEEKEND_AM_TRIPS = TRIPS)\n\nbus_peaks_hc202309$WEEKEND_AM_TRIPS[\n  bus_peaks_hc202309$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202309$WEEKEND_AM_TRIPS)\n  ] &lt;- 0\nrm(weekend_am)\n\nweekend_pm &lt;-\n  hourly_from_hex202309 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 16 &\n           HOUR_OF_DAY &lt; 19) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nbus_peaks_hc202309 &lt;-\n  left_join(bus_peaks_hc202309, weekend_pm) %&gt;%\n  rename(WEEKEND_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202309$WEEKEND_PM_TRIPS[\n  bus_peaks_hc202309$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202309$WEEKEND_PM_TRIPS)\n  ] &lt;- 0\nrm(weekend_pm)\n\nwrite_rds(bus_peaks_hc202309, \"data/rds/bus_peaks_hc202309.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html",
    "href": "Take-home_Ex1/Take-home_Ex1B.html",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "",
    "text": "The aim of this study is to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nThe main modes of analysis to be used here are Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA).\nIn doing these study, we will be looking at bus trips started during the hours below.\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday evening peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nMore details about the study can be found here.\nIn this part of the study, we will do thematic mapping on the bus commuter traffic data generated from Data Wrangling."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#setting-up-the-r-environment",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#setting-up-the-r-environment",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Setting Up the R Environment",
    "text": "Setting Up the R Environment\nWe will load the following R packages needed for this study.\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\nknitr:for prettifying presentation\n\n\npacman::p_load(sf, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#loading-the-data",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#loading-the-data",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Loading the data",
    "text": "Loading the data\n\n\n\n\n\n\nImportant\n\n\n\nBefore running this part, please run all the code chunks in Data Wrangling as it generates the data needed for this document.\n\n\nUse read_rds() to load the rds data needed for geovisualization and analysis.\n\nhoneycomb &lt;- read_rds(\"data/rds/honeycomb202310.rds\")\ntrips_cube_wkdy &lt;- read_rds(\"data/rds/trips_cube_wkdy202310.rds\")\ntrips_cube_wknd &lt;- read_rds(\"data/rds/trips_cube_wknd202310.rds\")\n\n\nhoneycomb - contains the geometry\ntrips_cube_wkdy - hourly number bus trips originating from hexagons during weekday\ntrips_cube_wknd - hourly number bus trips originating from hexagons during weekend\n\n\n\n\n\n\n\nIf you want to use the August 2023 or September 2023 data sets, replace 202310 to 202308 or 202309, respectively."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#large-number-of-nas",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#large-number-of-nas",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Large number of NA’s",
    "text": "Large number of NA’s\nWhen doing the data wrangling for Weekday morning peak (6 - 9am), we set NA on *_TRIPS columns for hexagons without bus stops.\nThis was done to fix the huge skew when setting 0’s on hexagons without bus stops. By setting NA, we are able distinguish hexagons without bus commuters due to just not riding the bus from hexagons without bus stops altogether.\nHow this will affect our analysis is currently unclear. If these hexagons become problematic, we can remove them by filtering, i.e. using the code chunk below. This is not executable as this is just a demonstration.\nbus_peaks_hc202310 % filter(NUM_BUS_STOPS &gt; 0)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#large-gap-in-values",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#large-gap-in-values",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Large gap in values",
    "text": "Large gap in values\nThe 3rd quartile of WEEKDAY_PM_TRIPS is 14,602 while it is 4,312 for WEEKDEND_PM_TRIPS. Our analysis focuses on comparison so plotting these maps together can be misleading. To demonstrate:\n\n\nShow the code\ntm_shape(bus_peaks_hc202310) +\n  tm_fill(\n    \"WEEKDAY_PM_TRIPS\", \n    style = \"quantile\",\n    palette = \"YlOrRd\",\n    title = \"# of trips\"\n  ) +\n  tm_layout(\n    main.title = \"Bus Commuter Trips Weekdays 5 - 8pm (October 2023)\",\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.height = 0.35, \n    legend.width = 0.25,\n    legend.outside = FALSE,\n    legend.position = c(\"right\", \"bottom\")\n  )+\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\n\n\n\n\n\nShow the code\ntm_shape(bus_peaks_hc202310) +\n  tm_fill(\n    \"WEEKEND_PM_TRIPS\", \n    style = \"quantile\",\n    palette = \"YlOrRd\",\n    title = \"# of trips\"\n  ) +\n  tm_layout(\n    main.title = \"Bus Commuter Trips Weekends/Holidays 4 - 7pm (October 2023)\",\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.height = 0.35, \n    legend.width = 0.25,\n    legend.outside = FALSE,\n    legend.position = c(\"right\", \"bottom\")\n  ) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\n\n\n\nOn first look, they may appear similar to the audience as there are the same distribution of reds from the same part.\nHowever, the red on the weekday map has a different value to weekend map (17,518 vs 5,345).\nTo provide a better comparison, it might be better to determine the breaks from the quantiles of the combined data of the 2 columns. tm_fill(style = \"quantile\") generates 5 categories so we will use quantile() instead of summary() which only generates quartiles (0.25, 0.50. 0.75) that result into 4 categories.\n\nquantile(\n  c(\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS\n  ),\n  na.rm = TRUE,\n  probs = c(0, 0.2, 0.4, 0.6, 0.8, 1)\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0   1394.0   4353.0   8951.0  17581.6 462160.0 \n\n\nRemapping using the breaks generated from these quantiles:\n\ntm_shape(bus_peaks_hc202310) +\n  tm_fill(\n    \"WEEKEND_PM_TRIPS\", \n    palette = \"YlOrRd\",\n    title = \"# of trips\",\n    breaks = c(0, 1394, 4353, 8951, 17582, 462160)\n  ) +\n  tm_layout(\n    main.title = \"Bus Commuter Trips Weekends/Holidays 4 - 7pm (October 2023)\",\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.height = 0.35, \n    legend.width = 0.25,\n    legend.outside = FALSE,\n    legend.position = c(\"right\", \"bottom\")\n  ) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\n\n\nWith this, it can be better seen that weekend peaks are less busy compared to weekday peaks as each color mean the same across 2 maps, and there are less reds on this map."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#utility-functions",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#utility-functions",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Utility functions",
    "text": "Utility functions\nTo make it easier to run repeated tasks like mapping, getting quantiles, generating common legends we will created reusable function for them.\nThe code will also look cleaner and more readable.\n\nMap generatorQuantile generatorCommon legend\n\n\nTo make it easier to generate maps, we will use the following utility function so we don’t need to repeat the same thing all over again. tmap code chunks are big so having this function helps a lot in readability.\n\nplot_bus_commuter_traffic &lt;- function(source, colname, breaks, title) {\n  tm_shape(source) +\n  tm_fill(\n    colname, \n    palette = \"YlOrRd\",\n    title = \"# of trips\",\n    breaks = breaks\n  ) +\n  tm_layout(\n    main.title = title,\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.show = FALSE # We will use a common legend\n  ) \n}\n\n\n\nWe will also create a function to calculate the break points from quantiles:\n\nget_map_quantiles &lt;- function(df) {\n  quantile(\n   df,\n   na.rm = TRUE,\n   probs = c(0, 0.2, 0.4, 0.6, 0.8, 1)\n  )\n}\n\n\n\nAs we have common breaks for all maps, we also need to create a common legend for display.\n\ngenerate_common_legend &lt;- function(source, breaks, position = c(\"right\", \"bottom\")) {\n  tm_shape(source) +\n    tm_fill(\n      \"WEEKEND_AM_TRIPS\", # we can use any column here\n      palette = \"YlOrRd\",\n      title = \"# of trips\",\n      breaks = breaks\n    ) +\n    tm_layout(\n      legend.only = TRUE,\n      legend.position = position,\n      frame = FALSE\n    )\n}"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#weekday-morning-vs-weekendholiday-morning",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#weekday-morning-vs-weekendholiday-morning",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekday morning vs Weekend/holiday morning",
    "text": "Weekday morning vs Weekend/holiday morning\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202308$WEEKEND_AM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    284.0   1542.6   4660.6  12791.4 347820.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202309$WEEKEND_AM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    293.8   1565.8   4706.8  11976.0 308362.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202310$WEEKEND_AM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    284.0   1539.6   4653.4  12560.4 336087.0 \n\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (August 2023)\",\n    breaks = c(0, 284, 1543, 4660, 12791, 347820)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 284, 1543, 4660, 12791, 347820),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11 - 2PM (August 2023)\",\n    breaks = c(0, 284, 1543, 4660, 12791, 347820)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn August 2023, weekday morning peak hours is busier than weekend/holiday morning peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (September 2023)\",\n    breaks = c(0, 293, 1566, 4707, 11976, 308362)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 293, 1566, 4707, 11976, 308362),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11 - 2PM (September 2023)\",\n    breaks = c(0, 293, 1566, 4707, 11976, 308362)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn September 2023, weekday morning peak hours is busier than weekend/holiday morning peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (October 2023)\",\n    breaks = c(0, 284, 1540, 4653, 12560, 336087)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 284, 1540, 4653, 12560, 336087),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11 - 2PM (October 2023)\",\n    breaks = c(0, 284, 1540, 4653, 12560, 336087)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn October 2023, weekday morning peak hours is busier than weekend/holiday morning peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe patterns observed by visually analyzing the maps lead to the same conclusion: More people ride the bus on weekday mornings compared to weekend/holiday mornings. This is can be explained by the people going to school or office during the weekdays.\nMoreover, the darker areas in the 2 maps are similar, indicating that the same areas that are relatively busier on weekdays are also relatively busier on weekends as well. This can indicate that more people stay at home on weekends but those who do go out still take buses from the same place - their home.\nHowever, we need to do a deeper spatial analysis like LISA to have more detailed insights on spatial patterns as we can only get an overview of patterns from visual inspection."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#weekday-evening-vs-weekendholiday-evening",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#weekday-evening-vs-weekendholiday-evening",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekday evening vs Weekend/holiday evening",
    "text": "Weekday evening vs Weekend/holiday evening\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202308$WEEKEND_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    592.2   2065.4   4810.8  11796.0 464466.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202309$WEEKEND_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    616.8   2092.6   4781.2  10866.6 406214.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202310$WEEKEND_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    587.0   2022.6   4779.6  11419.4 462160.0 \n\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (August 2023)\",\n    breaks = c(0, 592, 2065, 4811, 11796, 464466)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 592, 2065, 4811, 11796, 464466),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (August 2023)\",\n    breaks = c(0, 592, 2065, 4811, 11796, 464466)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn August 2023, weekday evening peak hours is busier than weekend/holiday evening peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (September 2023)\",\n    breaks = c(0, 617, 2093, 4781, 10867, 406214)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 617, 2093, 4781, 10867, 406214),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (September 2023)\",\n    breaks = c(0, 617, 2093, 4781, 10867, 406214)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn September 2023, weekday morning peak hours is busier than weekend/holiday evening peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (October 2023)\",\n    breaks = c(0, 587, 2023, 4780, 11419, 462160)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 587, 2023, 4780, 11419, 462160),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (October 2023)\",\n    breaks = c(0, 587, 2023, 4780, 11419, 462160)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn October 2023, weekday morning peak hours is busier than weekend/holiday evening peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe patterns observed by visually analyzing the maps lead to the same conclusion: More people ride the bus on weekday evenings compared to weekend/holiday evenings. This is can be explained by the people going home from school or office during the weekdays.\nMoreover, the darker areas in the 2 maps are similar, indicating that the same areas that are relatively busier on weekdays are also relatively busier on weekends as well. This is contrary to my expectations as I expect people to not commute from their office or school during the weekends. This is why I expected that some areas for recreation will be busier during the weekends or holidays, while business districts will be less busy.\nHowever, we need to do a deeper spatial analysis like LISA to have more detailed insights on spatial patterns as we can only get an overview of patterns from visual inspection."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#weekday-morning-vs-evening",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#weekday-morning-vs-evening",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekday morning vs evening",
    "text": "Weekday morning vs evening\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202308$WEEKDAY_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    879.2   3756.8   9646.4  20566.2 464466.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202309$WEEKDAY_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    789.4   3267.8   8438.2  17539.6 406214.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    856.0   3623.8   9385.4  19821.2 462160.0 \n\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (August 2023)\",\n    breaks = c(0, 879, 3757, 9646, 20566, 464466)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 879, 3757, 9646, 20566, 464466),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (August 2023)\",\n    breaks = c(0, 879, 3757, 9646, 20566, 464466)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn the weekdays of August 2023, morning peak hours generally is busier than evening peak hours. This is indicated by higher number of red hexagons.\nDespite this general trend, the South-Central area stands out as redder that it is in the morning, making it busier in the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (September 2023)\",\n    breaks = c(0, 789, 3268, 8438, 17540, 406214)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 789, 3268, 8438, 17540, 406214),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (September 2023)\",\n    breaks = c(0, 789, 3268, 8438, 17540, 406214)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn the weekdays of September 2023, morning peak hours generally is busier than evening peak hours. This is indicated by higher number of red hexagons.\nDespite this general trend, the South-Central area stands out as redder that it is in the morning, making it busier in the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (October 2023)\",\n    breaks = c(0, 856, 3624, 9385, 19821, 462160)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 856, 3624, 9385, 19821, 462160),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (October 2023)\",\n    breaks = c(0, 856, 3624, 9385, 19821, 462160)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn the weekdays of October 2023, morning peak hours generally is busier than evening peak hours. This is indicated by higher number of red hexagons.\nDespite this general trend, the South-Central area stands out as redder that it is in the morning, making it busier in the evening.Weekend/holiday morning vs evening.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe patterns observed by visually analyzing the maps lead to the same conclusion: More people ride the bus on weekday mornings compared to weekend evenings. A possible explanation for this is that after finishing work or school, people do not necessarily go straight home. They could be doing after work activities like dinner with friends, shopping, gym, etc. The volume of people commuting by bus may be more spread out in the evening.\nAnother starking observation is that the South-Central area is busier in the evening compared to mornings. This could be attributed to workers going home from offices in the business districts in this area (e.g. Bugis).\nDoing a spatio-temporal analysis like EHSA will help us understand the patterns throughout the day."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#weekendholiday-morning-vs-evening",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#weekendholiday-morning-vs-evening",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekend/holiday morning vs evening",
    "text": "Weekend/holiday morning vs evening\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKEND_AM_TRIPS,\n    bus_peaks_hc202308$WEEKEND_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    252.0    987.4   2612.2   5653.2 110401.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKEND_AM_TRIPS,\n    bus_peaks_hc202309$WEEKEND_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    284.0   1112.0   2890.4   6307.6 121699.0 \n\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKEND_AM_TRIPS,\n    bus_peaks_hc202310$WEEKEND_PM_TRIPS\n  )\n)\n\n      0%      20%      40%      60%      80%     100% \n     0.0    250.0    997.0   2603.2   5696.6 111171.0 \n\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11- 2AM (August 2023)\",\n    breaks = c(0, 252, 987, 2612, 5653, 110401)\n  ),\n  generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 252, 987, 2612, 5653, 110401),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (August 2023)\",\n    breaks = c(0, 252, 987, 2612, 5653, 110401)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn the weekends of August 2023, morning peak hours is busier than evening peak hours. However, it is not much redder than the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11- 2AM (September 2023)\",\n    breaks = c(0, 284, 1112, 2890, 6308, 121699)\n  ),\n  generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 284, 1112, 2890, 6308, 121699),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (September 2023)\",\n    breaks = c(0, 284, 1112, 2890, 6308, 121699)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn the weekends of September 2023, morning peak hours is busier than evening peak hours. However, it is not much redder than the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11- 2AM (October 2023)\",\n    breaks = c(0, 250, 997, 2603, 5697, 111171)\n  ),\n  generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 250, 997, 2603, 5697, 111171),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (October 2023)\",\n    breaks = c(0, 250, 997, 2603, 5697, 111171)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\n\n\n\nIn the weekends of October 2023, morning peak hours is busier than evening peak hours. However, it is not much redder than the evening.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThere is same observations can be made on all the map comparisons across the 3 months. Weekend mornings are busier than evenings. This can be explained by people going out for errands in the morning.\nHowever, unlike the previous comparisons, the difference not as big. This can possibly explained by the fact that it is a weekend, people can freely schedule their activities throughout the day. It follows that the bus trips are also more spread out.\nHowever, these are just inferences and we need to do a spatio-temporal analysis like EHSA to help us understand the patterns throughout the day."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html",
    "href": "In-class_Ex2/In-class_Ex2C.html",
    "title": "In-class Exercise 2C: EHSA",
    "section": "",
    "text": "For this exercise, we will do spatio-temporal analysis to understand spatial patterns with additional factor of time."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#importing-the-data",
    "href": "In-class_Ex2/In-class_Ex2C.html#importing-the-data",
    "title": "In-class Exercise 2C: EHSA",
    "section": "Importing the data",
    "text": "Importing the data\nFirst, we will import the geospatial data in shp format.\n\nhunan = st_read(dsn = \"data/geospatial\",\n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nSecond, we import the aspatial data Hunan_GDPPC, which contains the GDP Per Capita (GDPPC) of Chinese counties.\n\nGDPPC = read_csv(\"data/aspatial/Hunan_GDPPC.csv\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#computing-gi",
    "href": "In-class_Ex2/In-class_Ex2C.html#computing-gi",
    "title": "In-class Exercise 2C: EHSA",
    "section": "Computing Gi*",
    "text": "Computing Gi*\n\nDeriving spatial weights\nSimilar to the previous exercises, we calculate inverse distance first. However, we now have a time column in our data which is Year.\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\nGDPPC_nb\n\n# A tibble: 1,496 × 5\n    Year County    GDPPC nb        wt       \n   &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n 1  2005 Anxiang    8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n 2  2005 Hanshou    6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n 3  2005 Jinshi     9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n 4  2005 Li         8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n 5  2005 Linli      8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n 6  2005 Shimen     9244 &lt;int [6]&gt; &lt;dbl [6]&gt;\n 7  2005 Liuyang   13406 &lt;int [5]&gt; &lt;dbl [5]&gt;\n 8  2005 Ningxiang 11687 &lt;int [8]&gt; &lt;dbl [8]&gt;\n 9  2005 Wangcheng 14659 &lt;int [7]&gt; &lt;dbl [7]&gt;\n10  2005 Anren      7423 &lt;int [9]&gt; &lt;dbl [9]&gt;\n# ℹ 1,486 more rows\n\n\n\n\nComputing local Gi*\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\ngi_stars\n\n# A tibble: 1,496 × 13\n# Groups:   Year [17]\n    Year County    GDPPC nb        wt     gi_star   e_gi  var_gi p_value   p_sim\n   &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1  2005 Anxiang    8184 &lt;int [6]&gt; &lt;dbl&gt;    0.398 0.0115 2.75e-6  0.356  0.722  \n 2  2005 Hanshou    6560 &lt;int [6]&gt; &lt;dbl&gt;   -0.237 0.0108 2.52e-6  0.0489 0.961  \n 3  2005 Jinshi     9956 &lt;int [5]&gt; &lt;dbl&gt;    1.05  0.0125 3.01e-6  0.635  0.526  \n 4  2005 Li         8394 &lt;int [5]&gt; &lt;dbl&gt;    0.966 0.0118 3.08e-6  0.905  0.366  \n 5  2005 Linli      8850 &lt;int [5]&gt; &lt;dbl&gt;    1.05  0.0120 2.89e-6  0.939  0.348  \n 6  2005 Shimen     9244 &lt;int [6]&gt; &lt;dbl&gt;    0.210 0.0120 3.03e-6 -0.127  0.899  \n 7  2005 Liuyang   13406 &lt;int [5]&gt; &lt;dbl&gt;    3.91  0.0146 3.38e-6  2.72   0.00646\n 8  2005 Ningxiang 11687 &lt;int [8]&gt; &lt;dbl&gt;    1.61  0.0126 2.00e-6  1.01   0.312  \n 9  2005 Wangcheng 14659 &lt;int [7]&gt; &lt;dbl&gt;    3.88  0.0140 2.54e-6  2.72   0.00653\n10  2005 Anren      7423 &lt;int [9]&gt; &lt;dbl&gt;    1.67  0.0113 2.19e-6  1.81   0.0699 \n# ℹ 1,486 more rows\n# ℹ 3 more variables: p_folded_sim &lt;dbl&gt;, skewness &lt;dbl&gt;, kurtosis &lt;dbl&gt;"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#arrange-to-show-significant-emerging-hotcold-spots",
    "href": "In-class_Ex2/In-class_Ex2C.html#arrange-to-show-significant-emerging-hotcold-spots",
    "title": "In-class Exercise 2C: EHSA",
    "section": "Arrange to show significant emerging hot/cold spots",
    "text": "Arrange to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)\nemerging\n\n# A tibble: 5 × 6\n  County        tau         sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2C.html#performing-emerging-hot-spot-analysis",
    "href": "In-class_Ex2/In-class_Ex2C.html#performing-emerging-hot-spot-analysis",
    "title": "In-class Exercise 2C: EHSA",
    "section": "Performing Emerging Hot spot Analysis",
    "text": "Performing Emerging Hot spot Analysis\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = \"GDPPC\",\n  k = 1,\n  nsim = 99\n)\n\n\nVisualizing the distribution of EHSA classes\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\nFigure above shows that sporadic cold spots class has the high numbers of county. Visualizing EHSA\nTo generate a map, we have to add geospatial component to the data to we have join ehsa with hunan.\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\nThen we can finally generate the map.\n\nehsa_sig &lt;- hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Welcome to ISSS624 Geospatial Analytics Applications!\nI am Kristine Joy Paas, or Joy for short.\nIn this webpage, I am going to share with you my learning journey of geospatial analytics.\nNetlify link: https://isss624-kjcpaas.netlify.app/\nGithub repo: https://github.com/kjcpaas/ISSS624"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "",
    "text": "This hands-on exercise covers Chapter 1: Data Wrangling with R.\nI learned about the following:\n\nPublic Data Sets like the ones on data.gov.sg, LTADataMall, and InsideAirbnb.\nHow to import data sets into RStudio\nWrangling geospatial data in using different R packages like sf, tidyverse, etc.\nCreating thematic/choropleth maps with tmap"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#preparing-the-data-sets",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#preparing-the-data-sets",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Preparing the data sets",
    "text": "Preparing the data sets\nFirst, I downloaded the different data sets needed in this exercise.\n\nGeospatial\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\n\n\n\nAspatial\n\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\nNext, is putting them under the Hands-on_Ex1 directory, with the following file structure:\nHands-on_Ex1\n└── data\n    ├── aspatial\n    │   └── listings.csv\n    └── geospatial\n        ├── CyclingPathGazette.cpg\n        ├── CyclingPathGazette.dbf\n        ├── CyclingPathGazette.lyr\n        ├── CyclingPathGazette.prj\n        ├── CyclingPathGazette.sbn\n        ├── CyclingPathGazette.sbx\n        ├── CyclingPathGazette.shp\n        ├── CyclingPathGazette.shp.xml\n        ├── CyclingPathGazette.shx\n        ├── MP14_SUBZONE_WEB_PL.dbf\n        ├── MP14_SUBZONE_WEB_PL.prj\n        ├── MP14_SUBZONE_WEB_PL.sbn\n        ├── MP14_SUBZONE_WEB_PL.sbx\n        ├── MP14_SUBZONE_WEB_PL.shp\n        ├── MP14_SUBZONE_WEB_PL.shp.xml\n        ├── MP14_SUBZONE_WEB_PL.shx\n        └── PreSchoolsLocation.kml"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#installing-r-packages",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#installing-r-packages",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Installing R packages",
    "text": "Installing R packages\nI used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#master-plan-2014-subzone-boundary-web",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#master-plan-2014-subzone-boundary-web",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Master Plan 2014 Subzone Boundary (Web)",
    "text": "Master Plan 2014 Subzone Boundary (Web)\nTo import the data set to RStudio, I used st_read() :\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nI encountered the error below along the way:\nCannot open layer MasterPlan2014SubzoneBoundaryWebKML\nThis is because I originally downloaded the kml file instead of the shp file. After using the shp file, the st_read() succeeded.\n\nℹ️ My biggest take-away for this is that st_read reads shp data set by default. (this would be debunked later)\n\nAfter running the code, we should see the mpsz data in the environment."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#cycling-path-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#cycling-path-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Cycling Path Data",
    "text": "Cycling Path Data\nEquipped with my learning from the previous step, I was able to quickly figure out that importing this data set can be done by simply changing the layer parameter from the previous code:\n\ncyclingpath &lt;- st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nHowever, the difference is that this geometry has polyline features, while the previous has polygon features."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#pre-schools-location-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#pre-schools-location-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Pre-Schools Location Data",
    "text": "Pre-Schools Location Data\nUnlike the others, this data set is in kml format instead of shp format. I used the following code to import:\n\npreschool &lt;- st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex1/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nℹ️ Contrary to my previous take-away, st_read() can read kml files by default. In fact, reading shp files require more parameters like dsn and layer."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#checking-the-geometry-of-data-frames",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#checking-the-geometry-of-data-frames",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Checking the geometry of data frames",
    "text": "Checking the geometry of data frames\nUsing st_geometry() returns information about the geometry of the data frame.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nIt gave the same geometric information as when importing the shape data but with additional details like the first 5 geometries."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#getting-overview-of-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#getting-overview-of-geospatial-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Getting overview of geospatial data",
    "text": "Getting overview of geospatial data\nUsing glimpse() gives useful information about the columns, data types, values. For example:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThis will be very useful to scan for the available data and which columns are useful for analysis."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#revealing-complete-information-of-feature-objects",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#revealing-complete-information-of-feature-objects",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Revealing complete information of feature objects",
    "text": "Revealing complete information of feature objects\nUsing head() can give full information about objects in the data set. For example:\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nThis will return the first 5 objects, and the number of objects can be set by specifying a value for n.\nAnother function that is useful for this purpose is tail(), which returns items from the end of the data set. For example:\n\ntail(mpsz, n=2)\n\nSimple feature collection with 2 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23378.74 ymin: 48569.62 xmax: 28343.2 ymax: 50256.33\nProjected CRS: SVY21\n    OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n322      322          7  THE WHARVES    SBSZ07      N  SEMBAWANG         SB\n323      323          8 SENOKO NORTH    SBSZ08      N  SEMBAWANG         SB\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n322 NORTH REGION       NR 6D89875A351CF51C 2014-12-05 26945.07 49552.79\n323 NORTH REGION       NR A800CBEE879C1BF9 2014-12-05 24665.79 49482.60\n    SHAPE_Leng SHAPE_Area                       geometry\n322  11828.878    1635808 MULTIPOLYGON (((26219.89 50...\n323   7392.129    2241387 MULTIPOLYGON (((26047.11 50...\n\n\nThis returned the items on rows 322 and 323 instead of 1 and 2 if we were to use head().\nHowever, I wonder which use cases these functions would be useful as we can easily inspect the full data when looking at all the Environment Data in RStudio. 🤔"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#plotting-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#plotting-geospatial-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\n\nplot(mpsz, max.plot = 15)\n\n\n\n\nI was pleasantly surprised to find that the rendering of the plots was so fast! It only took 1 second or so on my machine for 300+ features and 15 fields. This is really useful for quick look of the data.\nTrying it on the cycling path data was also very fast though the result was not so useful for me as it needs to be overlayed with a map like above.\n\nplot(cyclingpath)\n\n\n\n\nI wonder how long it would take once we have larger data sets. 🤔\nAs someone not originally from Singapore, I am still familiarizing myself with the countries geography so I’ll plot the regions first.\n\nplot(mpsz['REGION_N'])\n\n\n\n\nThis can still be visualized better, especially the names in the legend got cut off. From the Help pages on RStudio, this function has a lot more parameters and I’ll explore it once I have more time."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#correcting-the-epsg-code",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#correcting-the-epsg-code",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Correcting the EPSG code",
    "text": "Correcting the EPSG code\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nI am not familiar with what the st_crs() returns and I wouldn’t have thought that EPSG needs correcting since I don’t have the domain knowledge. This is one of my biggest take away for this exercise."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#projection-transformation",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#projection-transformation",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Projection Transformation",
    "text": "Projection Transformation\nWhen using st_set_crs(), I got the warning below:\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for that\nAs such, the mpsz3414 data before may not be projected properly despite having the correct EPSG value.\nNext, I will transform the pre-school data:\n\npreschool3414 &lt;- st_transform(preschool, crs=3414)\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nFor aspatial data, I used read_csv() to import the data.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nFrom this, we have candidate geospatial fields that we can use, longitude and latitude.\nChecking the data contents of these field can confirm if we can really use the data.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nAfter confirming that longitude and latitude can be used as geospatial data, I transformed this data to geospatial data.\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nChecking the new data frame, it was confirmed that it was transformed to a geospatial data.\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#buffering",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#buffering",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Buffering",
    "text": "Buffering\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\nAfter seeing my classmate’s question on Piazza, I was also curious about the effect of nQuadSegs to the area. From the documentation, this is the number of segments created per quadrant.\nMy understanding of this is since each quadrant has 90 degrees, having nQuadSegs = 30 means 1 segment per 3 degrees. If this correct, my hypothesis is that the higher nQuadSegs is, the more accurate it is. This is because nQuadSegs=1 would be a square, and it becomes a polygon with more sides the higher nQuadSegs is. The higher nQuadSegs, the smoother the polygon becomes and it gets closer to being a circle.\nI’m testing the theory below and if my hypothesis is correct, the area should not differ much past nQuadSegs=180\n\nbuffer_cycling0 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 0)\nbuffer_cycling0$AREA &lt;- st_area(buffer_cycling0)\nsum(buffer_cycling0$AREA)\n\n1700331 [m^2]\n\n\n\nbuffer_cycling10 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 10)\nbuffer_cycling10$AREA &lt;- st_area(buffer_cycling10)\nsum(buffer_cycling10$AREA)\n\n1773584 [m^2]\n\n\n\nbuffer_cycling45 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 45)\nbuffer_cycling45$AREA &lt;- st_area(buffer_cycling45)\nsum(buffer_cycling45$AREA)\n\n1774421 [m^2]\n\n\n\nbuffer_cycling90 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 90)\nbuffer_cycling90$AREA &lt;- st_area(buffer_cycling90)\nsum(buffer_cycling90$AREA)\n\n1774454 [m^2]\n\n\n\nbuffer_cycling180 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 180)\nbuffer_cycling180$AREA &lt;- st_area(buffer_cycling180)\nsum(buffer_cycling180$AREA)\n\n1774462 [m^2]\n\n\n\nbuffer_cycling1800 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 1800)\nbuffer_cycling1800$AREA &lt;- st_area(buffer_cycling1800)\nsum(buffer_cycling1800$AREA)\n\n1774465 [m^2]\n\n\nAs we can see, from 180 to 1800 the area only changed by 3m2 but the differences are larger in lower values. My conclusion is that the higher nQuadSegs, the more accurate the value we will get. However, the calculation took much longer. The extremely small accuracy benefit may not be worth the trade-off in most cases.\nThe result when using nQuadSegs of 30 is already very close to the result when it is 1800.\n\\[\n1774367/1774465 = 99.99\\%\n\\]"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#point-in-polygon-count",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Point-in-polygon count",
    "text": "Point-in-polygon count\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nThis means that there are subzones without pre-school while some have as many as 72.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nThe subzone with the most pre-schools is Tampines East.\nTo calculate the density of pre-schools:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nLet’s see the top 3 subzones with the highest pre-school density.\n\ntop_n(mpsz3414, 3, `PreSch Density`)\n\nSimple feature collection with 3 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25594.22 ymin: 28623.75 xmax: 29976.93 ymax: 48182.13\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO         SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N\n1       27          8             CECIL    DTSZ08      Y DOWNTOWN CORE\n2      278          3     MANDAI ESTATE    MDSZ03      N        MANDAI\n3      291          3 SEMBAWANG CENTRAL    SBSZ03      N     SEMBAWANG\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         DT CENTRAL REGION       CR 65AA82AF6F4D925D 2014-12-05 29730.20\n2         MD   NORTH REGION       NR F6266F7368DBB9AB 2014-12-05 27082.70\n3         SB   NORTH REGION       NR 772A64AB9A93FC3A 2014-12-05 26268.73\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1 29011.33   2116.095   196619.9 MULTIPOLYGON (((29808.18 28...            7\n2 45367.46   1633.708   143137.9 MULTIPOLYGON (((27119.56 45...            5\n3 47558.08   3955.118   962437.4 MULTIPOLYGON (((26311.14 46...           27\n            Area   PreSch Density\n1 196619.9 [m^2] 35.60169 [1/m^2]\n2 143137.9 [m^2] 34.93134 [1/m^2]\n3 962437.4 [m^2] 28.05377 [1/m^2]\n\n\nDespite Tampines East having the most pre-schools, Cecil has the highest pre-school density. Tampines East might be much bigger than Cecil so its Pre-school Density is lower."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#changing-the-website-theme",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#changing-the-website-theme",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Changing the website theme",
    "text": "Changing the website theme\nAfter exploring Quarto docs, I found that we can change the theme. I decided on the zephyr theme as it looks most readable and aesthetic for me."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1A.html#issues-with-using-github-on-rstudio",
    "href": "Hands-on_Ex1/Hands-on_Ex1A.html#issues-with-using-github-on-rstudio",
    "title": "Hands-on Exercise 1A: Geospatial Data Wrangling with R",
    "section": "Issues with using Github on Rstudio",
    "text": "Issues with using Github on Rstudio\nIt was recommended to name the project with the convention &lt;github_username&gt;/ISSS624. However, due to restrictions on my machine, I had to deviate from this and create my project elsewhere.\nHence, I couldn’t use usethis::use_github() to setup my Github repository. However, as I use git Github intensively in my job, I did the setup manually myself to use the git functions on RStudio.\nI used these steps for the manual setup.\n\nCreate the repo manually on Github on https://github.com/kjcpaas/ISSS624\nAdd the Github remote on RStudio project\n&gt; git remote add origin git@github.com:kjcpaas/ISSS624.git\n&gt; git remote -v\norigin  git@github.com:kjcpaas/ISSS624.git (fetch)\norigin  git@github.com:kjcpaas/ISSS624.git (push)\nSet remote for head\n&gt; git remote set-head origin --auto\n&gt; git gc\n\nAfter all these, I was able to use the git functions on RStudio."
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: Bus Commuter Flow by Origin",
    "section": "",
    "text": "In this exercise, we will learn how to create choropleth map from bus data and commuter data."
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#importing-the-origin-and-destination-data",
    "href": "In-class_Ex1/In-class_Ex1.html#importing-the-origin-and-destination-data",
    "title": "In-class Exercise 1: Bus Commuter Flow by Origin",
    "section": "Importing the origin and destination data",
    "text": "Importing the origin and destination data\nFirstly, we will import the Passenger Volume By Origin Destination Bust Stops data set from LTA Data Mall by using read_csv .\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nTo make it easier to process the PT codes, we will convert the origin and destination PT codes to factor data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\nNext, I want to investigate the commuter flows between 7-10am on weekdays.\n\n\n\n\n\n\nTip\n\n\n\nWe need to use the interval 7 &lt;= time &lt;= 9 as the data with time = 9 contains data from 9am to just before 10am.\n\n\n\norigin7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nNext, we save the data in rds format for future use.\n\n\n\n\n\n\nImportant\n\n\n\nIn order for the code below to work, we need to create the rds/ directory under data/.\n\n\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\nIt can be imported back later on with read_rds().\n\norigin7_9 &lt;- read_rds(\"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "href": "In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "title": "In-class Exercise 1: Bus Commuter Flow by Origin",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\nNext we need to import the bus stop locations so that we can correlate them from the PT codes from the origin and destination data from before.\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                  layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nSince these are just points, we also need some polygon data to figure out where in the Singapore map the bus locations correspond to:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#combining-busstop-and-mpsz",
    "href": "In-class_Ex1/In-class_Ex1.html#combining-busstop-and-mpsz",
    "title": "In-class Exercise 1: Bus Commuter Flow by Origin",
    "section": "Combining busstop and mpsz",
    "text": "Combining busstop and mpsz\nWe first combine that 2 data frames by figuring out which polygon in mpsz each points in busstop are contained in.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\nglimpse(busstop_mpsz)\n\nRows: 5,156\nColumns: 2\n$ BUS_STOP_N &lt;chr&gt; \"13099\", \"13089\", \"06151\", \"13211\", \"13139\", \"13109\", \"1311…\n$ SUBZONE_C  &lt;chr&gt; \"RVSZ05\", \"RVSZ05\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\",…\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nst_drop_geometry() removes the geometry from the data frame, making the data aspatial.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nbusstop_mpsz has 5 less items than busstop. This is because these bus stops are outside of Singapore 🇸🇬 border.\nFor example, some bus routes start/end in Johor Bahru in Malaysia 🇲🇾.\n\n\nFinally, we now now which subzone each bus stop is located in.\nBefore proceeding, we should save the busstop_mpsz so we won’t need to recalculate it later on.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")\n\nNext is to join the busstop_mpsz data with origin7_9.\n\norigin_data &lt;- left_join(origin7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\n\nNext is to check for duplicate records.\n\nduplicate &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 26\nColumns: 3\n$ ORIGIN_BS &lt;chr&gt; \"11009\", \"11009\", \"22501\", \"22501\", \"43709\", \"43709\", \"47201…\n$ TRIPS     &lt;dbl&gt; 13826, 13826, 9743, 9743, 1118, 1118, 23998, 23998, 6218, 62…\n$ ORIGIN_SZ &lt;chr&gt; \"QTSZ01\", \"QTSZ01\", \"JWSZ09\", \"JWSZ09\", \"BKSZ07\", \"BKSZ07\", …\n\n\nIn this case, there are some duplicates so we need to clean it up further. This can be done using unique().\n\norigin_data &lt;- unique(origin_data)\n\nLet’s check if the duplicates have been removed.\n\nduplicate &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nglimpse(duplicate)\n\nRows: 0\nColumns: 3\n$ ORIGIN_BS &lt;chr&gt; \n$ TRIPS     &lt;dbl&gt; \n$ ORIGIN_SZ &lt;chr&gt; \n\n\nThe duplicates have been removed so we can proceed with merging origin_data with mpsz to figure out the subzone names on the bus stop locations.\n\nmpsz_origtrip &lt;- left_join(mpsz, \n                           origin_data,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))\n\nBefore proceeding, let’s save this data as rds.\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "",
    "text": "This hands-on exercise covers Chapter 2: Choropleth Mapping with R.\nI learned about the following:\n\nCreating thematic/choropleth maps with tmap\nQuantile and equal classification"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#preparing-the-datasets",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#preparing-the-datasets",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Preparing the datasets",
    "text": "Preparing the datasets\n\nGeospatial\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\n\n\n\nAspatial\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 from Department of Statistics, Singapore\n\nNext, is putting them under the Hands-on_Ex1 directory, with the following file structure:\nHands-on_Ex1\n└── data\n    ├── aspatial\n    │   └── respopagesextod2011to2020.csv\n    └── geospatial\n        ├── MP14_SUBZONE_WEB_PL.dbf\n        ├── MP14_SUBZONE_WEB_PL.prj\n        ├── MP14_SUBZONE_WEB_PL.sbn\n        ├── MP14_SUBZONE_WEB_PL.sbx\n        ├── MP14_SUBZONE_WEB_PL.shp\n        ├── MP14_SUBZONE_WEB_PL.shp.xml\n        └── MP14_SUBZONE_WEB_PL.shx"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#installing-r-packages",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#installing-r-packages",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Installing R packages",
    "text": "Installing R packages\nI used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, tidyverse, tmap)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#importing-geospatial-data",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\nTo import the MPSZ data set to RStudio, I used the same code chunk in the previous exercise.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#importing-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#importing-aspatial-data",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Importing aspatial data",
    "text": "Importing aspatial data\nThe csv data is an aspatial data so read_csv() must be used instead of st_read():\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#data-preparation",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#data-preparation",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Data preparation",
    "text": "Data preparation\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\nI don’t fully understand this entire code chunk yet but I know it filtered for data from 2020 only and did some aggregations based on the age groups, PA, and AZ. New fields like YOUNG and AGED .\nNext, I joined this data with the mpsz data via SZ. However, we still need to make sure that the SZ values are uppercase to match mpsz’s SUBZONE_N.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nThen the 2 data sets can be joined.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nLastly, write the rds of the combined data set.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n⚠️ This failed on the first try so I had to create the rds directory under data/ before trying again."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#using-qtm",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#using-qtm",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Using qtm()",
    "text": "Using qtm()\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nI tried to create an interactive map by using view instead of plot but an error about invalid polygons was returned."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#using-tmap-elements",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#using-tmap-elements",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Using tmap() elements",
    "text": "Using tmap() elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nFrom this part, I saw that with tm_shape as base, thematic maps can be created by doing + with the tmap actions. I will explore this later but I found a good reference on where to start: https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#classification-methods",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#classification-methods",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Classification methods",
    "text": "Classification methods\n\nQuantile\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nEqual\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMy main takeaway for this is that the quantile classification deals with outliers better. In this data set, there is an outlier subzone. If we use equal classification, the map looks homogeneous and does not provide much information as it cannot be seen how the values from one subzone to the other differ.\nWith quantile classification, these differences can be seen more easily despite the outlier value."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#color-scheme",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#color-scheme",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Color Scheme",
    "text": "Color Scheme\nThe color scheme can be changed by specifying the palette in tm_fill() like below:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMore colors can be found when running tmaptools::palette_explorer() in the console. However, it requires shiny and shinyjs to work. This is a wonderful tool as it can also simulate how the color schemes look from the perspective of people with color blindness. As these maps aim to communicate, it is important for the color schemes chosen to not just be beautiful, but also inclusive."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#map-layouts",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#map-layouts",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Map Layouts",
    "text": "Map Layouts\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nAdding legends to maps is very useful as it provides additional information. However, this feature should not be abused to add multiple visualizations as legend as it can cause more confusion if there is too much information to present.\nMap style can also be changed and it is useful to enhance the visual presentation. After doing some research, I found the other available styles in https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes.html.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tmap_style(\"natural\")\n\n\n\n\nIn this example, I used the natural style to make it look like the map is surrounded by water (as it is naturally). Adding “furnitures” like compass and scale can also provide more perspective."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#smaller-maps",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#smaller-maps",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Smaller Maps",
    "text": "Smaller Maps\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nI don’t find this very useful as the maps rendered might be too small to inspect. However, the facets with the region can be useful to see the data based on region.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Greens\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1B.html#mapping-according-to-criterion",
    "href": "Hands-on_Ex1/Hands-on_Ex1B.html#mapping-according-to-criterion",
    "title": "Hands on Exercise 1A: Choropleth Mapping with R",
    "section": "Mapping According to Criterion",
    "text": "Mapping According to Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nI find this very useful especially if we just want to map a subset of the data. This can be used when we want to highlight information on certain regions."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html",
    "href": "In-class_Ex2/In-class_Ex2B.html",
    "title": "In-class Exercise 2: GLSA",
    "section": "",
    "text": "This introduces sfdep functions for analysis related to Global and Local Measures of Association."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#importing-the-data",
    "href": "In-class_Ex2/In-class_Ex2B.html#importing-the-data",
    "title": "In-class Exercise 2: GLSA",
    "section": "Importing the data",
    "text": "Importing the data\nFirst, we will import the geospatial data in shp format.\n\nhunan = st_read(dsn = \"data/geospatial\",\n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nSecond, we import the aspatial data Hunan_2012, which contains the GDP Per Capita (GDPPC) of Chinese counties in 2012.\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#combining-them-all-together",
    "href": "In-class_Ex2/In-class_Ex2B.html#combining-them-all-together",
    "title": "In-class Exercise 2: GLSA",
    "section": "Combining them all together",
    "text": "Combining them all together\nAs seen from the import above, each of the dataframes have 88 rows each. Each row corresponds to a record per county.\nHowever, we are already interested in the following columns:\n\nCounty\nGDPPC\n\n\nhunan &lt;- left_join(hunan, hunan2012)%&gt;%\n  select(7, 15)\n\n\n\n\n\n\n\nNote\n\n\n\nWe do not need to specify the columns to join as both dataframes have the County column so left_join() is able to detect that this is the column to join by."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#plotting-a-choropleth-map",
    "href": "In-class_Ex2/In-class_Ex2B.html#plotting-a-choropleth-map",
    "title": "In-class Exercise 2: GLSA",
    "section": "Plotting a choropleth map",
    "text": "Plotting a choropleth map\nNext is to plot the map of GDP per capita values.\n\ntmap_mode(\"plot\")\ntm_shape(hunan) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"GDP per capita by county in China (2012)\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#deriving-contiguity-weights-queens-method",
    "href": "In-class_Ex2/In-class_Ex2B.html#deriving-contiguity-weights-queens-method",
    "title": "In-class Exercise 2: GLSA",
    "section": "Deriving Contiguity Weights: Queen’s Method",
    "text": "Deriving Contiguity Weights: Queen’s Method\n\nwm_q &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \nwm_q\n\nSimple feature collection with 88 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n      County GDPPC                       geometry\n1    Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren 12761 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#computing-global-morans-i",
    "href": "In-class_Ex2/In-class_Ex2B.html#computing-global-morans-i",
    "title": "In-class Exercise 2: GLSA",
    "section": "Computing Global Moran’s I",
    "text": "Computing Global Moran’s I\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#performing-global-morans-i-test",
    "href": "In-class_Ex2/In-class_Ex2B.html#performing-global-morans-i-test",
    "title": "In-class Exercise 2: GLSA",
    "section": "Performing Global Moran’s I test",
    "text": "Performing Global Moran’s I test\n\n\n\n\n\n\nTip\n\n\n\nThis is preferred over just calculating the statistic.\n\n\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#performing-global-morans-i-test-1",
    "href": "In-class_Ex2/In-class_Ex2B.html#performing-global-morans-i-test-1",
    "title": "In-class Exercise 2: GLSA",
    "section": "Performing Global Moran’s I test",
    "text": "Performing Global Moran’s I test\n\n\n\n\n\n\nTip\n\n\n\nThis is the ideal method in practice.\n\n\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-morans-i",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-morans-i",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing Moran’s I",
    "text": "Visualizing Moran’s I\nIn visualizing the Moran’s I values, plot using the ii column.\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-p-value-of-morans-i",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-p-value-of-morans-i",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing p-value of Moran’s I",
    "text": "Visualizing p-value of Moran’s I\nTo visualize the p-value, plot using p_ii_sim.\n\n\n\n\n\n\nWarning\n\n\n\nThese are from simulation results\n\n\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-local-morans-i-and-p-value",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-local-morans-i-and-p-value",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing local Moran’s I and p-value",
    "text": "Visualizing local Moran’s I and p-value\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-lisa-map",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-lisa-map",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing LISA map",
    "text": "Visualizing LISA map\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#computing-local-gi-statistics",
    "href": "In-class_Ex2/In-class_Ex2B.html#computing-local-gi-statistics",
    "title": "In-class Exercise 2: GLSA",
    "section": "Computing local Gi* statistics",
    "text": "Computing local Gi* statistics\nWe need to compute the inverse distance weights first.\n\nwm_idw &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nwm_idw\n\nSimple feature collection with 88 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                              wts\n1                                      0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\n2                                      0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\n3                                                  0.03515537, 0.04581089, 0.04116397, 0.01208437\n4                                                  0.02176677, 0.04581089, 0.04637578, 0.01585302\n5                                                  0.04116397, 0.04637578, 0.01896212, 0.01351099\n6                                      0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\n7                                                  0.01621067, 0.01536702, 0.01133628, 0.01836488\n8              0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\n9                          0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\n10 0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\n      County GDPPC                       geometry\n1    Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 12 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 13\n   gi_star   e_gi    var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;nb&gt; \n 1  0.0416 0.0114   6.41e-6  0.0493 9.61e-1         0.7      0.35    0.875 &lt;int&gt;\n 2 -0.333  0.0106   3.84e-6 -0.0941 9.25e-1         1        0.5     0.661 &lt;int&gt;\n 3  0.281  0.0126   7.51e-6 -0.151  8.80e-1         0.9      0.45    0.640 &lt;int&gt;\n 4  0.411  0.0118   9.22e-6  0.264  7.92e-1         0.6      0.3     0.853 &lt;int&gt;\n 5  0.387  0.0115   9.56e-6  0.339  7.34e-1         0.62     0.31    1.07  &lt;int&gt;\n 6 -0.368  0.0118   5.91e-6 -0.583  5.60e-1         0.72     0.36    0.594 &lt;int&gt;\n 7  3.56   0.0151   7.31e-6  2.61   9.01e-3         0.06     0.03    1.09  &lt;int&gt;\n 8  2.52   0.0136   6.14e-6  1.49   1.35e-1         0.2      0.1     1.12  &lt;int&gt;\n 9  4.56   0.0144   5.84e-6  3.53   4.17e-4         0.04     0.02    1.23  &lt;int&gt;\n10  1.16   0.0104   3.70e-6  1.82   6.86e-2         0.12     0.06    0.416 &lt;int&gt;\n# ℹ 78 more rows\n# ℹ 4 more variables: wts &lt;list&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-gi",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-gi",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing Gi*",
    "text": "Visualizing Gi*\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-p-value-of-hcsa",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-p-value-of-hcsa",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing p-value of HCSA",
    "text": "Visualizing p-value of HCSA\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-local-hcsa",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-local-hcsa",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing local HCSA",
    "text": "Visualizing local HCSA\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2B.html#visualizing-hot-spot-and-cold-spot-areas",
    "href": "In-class_Ex2/In-class_Ex2B.html#visualizing-hot-spot-and-cold-spot-areas",
    "title": "In-class Exercise 2: GLSA",
    "section": "Visualizing hot spot and cold spot areas",
    "text": "Visualizing hot spot and cold spot areas\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html",
    "href": "In-class_Ex2/In-class_Ex2A.html",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "",
    "text": "This introduces sfdep functions for getting spatial weights."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#importing-the-data",
    "href": "In-class_Ex2/In-class_Ex2A.html#importing-the-data",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Importing the data",
    "text": "Importing the data\nFirst, we will import the geospatial data in shp format.\n\nhunan = st_read(dsn = \"data/geospatial\",\n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nSecond, we import the aspatial data Hunan_2012, which contains the GDP Per Capita (GDPPC) of Chinese counties in 2012.\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#combining-them-all-together",
    "href": "In-class_Ex2/In-class_Ex2A.html#combining-them-all-together",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Combining them all together",
    "text": "Combining them all together\nAs seen from the import above, each of the dataframes have 88 rows each. Each row corresponds to a record per county.\nHowever, we are already interested in the following columns:\n\nCounty\nGDPPC\n\n\nhunan &lt;- left_join(hunan, hunan2012)%&gt;%\n  select(7, 15)\n\n\n\n\n\n\n\nNote\n\n\n\nWe do not need to specify the columns to join as both dataframes have the County column so left_join() is able to detect that this is the column to join by."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#plotting-a-choropleth-map",
    "href": "In-class_Ex2/In-class_Ex2A.html#plotting-a-choropleth-map",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Plotting a choropleth map",
    "text": "Plotting a choropleth map\nNext is to plot the map of GDP per capita values.\n\ntmap_mode(\"plot\")\ntm_shape(hunan) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"GDP per capita by county in China (2012)\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#identifying-neighbors-via-queens-method",
    "href": "In-class_Ex2/In-class_Ex2A.html#identifying-neighbors-via-queens-method",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Identifying neighbors via Queen’s method",
    "text": "Identifying neighbors via Queen’s method\n\n\n\n\n\n\nImportant\n\n\n\nst_continguity() used queen = TRUE as default. If not specified, it will use the Queen’s method.\n\n\n\nnb_queen &lt;- hunan %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\nsummary(nb_queen)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n    nb          County              GDPPC                geometry \n NULL:NULL   Length:88          Min.   : 8497   POLYGON      :88  \n             Class :character   1st Qu.:14566   epsg:4326    : 0  \n             Mode  :character   Median :20433   +proj=long...: 0  \n                                Mean   :24405                     \n                                3rd Qu.:27224                     \n                                Max.   :88656                     \n\n\nTo prettify the output of head(), we can use kable.\n\nkable(head(nb_queen,\n           n=10))\n\n\n\n\n\n\n\n\n\n\nnb\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\nAnren\n12761\nPOLYGON ((113.1757 26.82734…"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#identifying-neighbors-via-rooks-method",
    "href": "In-class_Ex2/In-class_Ex2A.html#identifying-neighbors-via-rooks-method",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Identifying neighbors via Rook’s method",
    "text": "Identifying neighbors via Rook’s method\nWe do the same for the Rook’s method. This time, we need to supply queen = FALSE to st_contiguity().\n\nnb_rook &lt;- hunan %&gt;% \n  mutate(nb = st_contiguity(geometry, queen = FALSE),\n         .before = 1)\nsummary(nb_rook)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n    nb          County              GDPPC                geometry \n NULL:NULL   Length:88          Min.   : 8497   POLYGON      :88  \n             Class :character   1st Qu.:14566   epsg:4326    : 0  \n             Mode  :character   Median :20433   +proj=long...: 0  \n                                Mean   :24405                     \n                                3rd Qu.:27224                     \n                                Max.   :88656                     \n\n\n\nkable(head(nb_rook,\n           n=10))\n\n\n\n\n\n\n\n\n\n\nnb\nCounty\nGDPPC\ngeometry\n\n\n\n\n3, 4, 57, 85\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n57, 58, 78, 85\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 19, 20, 22, 70, 72, 73\nAnren\n12761\nPOLYGON ((113.1757 26.82734…"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#identifying-higher-order-contiguity-neighbors",
    "href": "In-class_Ex2/In-class_Ex2A.html#identifying-higher-order-contiguity-neighbors",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Identifying higher-order contiguity neighbors",
    "text": "Identifying higher-order contiguity neighbors\nThis simply means neighbors of neighbors.\n\nnb2_queen &lt;-  hunan %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\nsummary(nb2_queen)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 1324 \nPercentage nonzero weights: 17.09711 \nAverage number of links: 15.04545 \nLink number distribution:\n\n 5  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 28 33 \n 2  1  6  4  5  4  8  5 10  4  4  8  4  8  5  2  2  1  2  1  1  1 \n2 least connected regions:\n30 88 with 5 links\n1 most connected region:\n56 with 33 links\n\n\n    nb         nb2          County              GDPPC                geometry \n NULL:NULL   NULL:NULL   Length:88          Min.   : 8497   POLYGON      :88  \n                         Class :character   1st Qu.:14566   epsg:4326    : 0  \n                         Mode  :character   Median :20433   +proj=long...: 0  \n                                            Mean   :24405                     \n                                            3rd Qu.:27224                     \n                                            Max.   :88656                     \n\n\n\nkable(head(nb2_queen))\n\n\n\n\n\n\n\n\n\n\n\nnb\nnb2\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\n2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\n1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\n1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\n1, 2, 3, 5, 6, 57, 69, 75, 85\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\n1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\n1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\nShimen\n27137\nPOLYGON ((110.8825 30.11675…"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#deriving-fixed-distance-weights",
    "href": "In-class_Ex2/In-class_Ex2A.html#deriving-fixed-distance-weights",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Deriving fixed-distance weights",
    "text": "Deriving fixed-distance weights\nFirst is to determine the upper limit for the distance for the nearest neigbor.\n\ngeo &lt;- sf::st_geometry(hunan)\nnb &lt;- st_knn(geo, longlat = TRUE)\ndists &lt;- unlist(st_nb_dists(geo, nb))\n\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nWe use the max value of the result, 65.80. For simplicity, let’s set it to 66.\nNow we can calculate the fixed-distance weights.\n\nwm_fd &lt;- hunan %&gt;%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 66),\n               wt = st_weights(nb),\n               .before = 1)\nwm_fd\n\nSimple feature collection with 88 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                       nb\n1      2, 3, 4, 5, 57, 64\n2       1, 57, 58, 78, 85\n3             1, 4, 5, 57\n4              1, 3, 5, 6\n5          1, 3, 4, 6, 69\n6                4, 5, 69\n7              67, 71, 84\n8       9, 46, 47, 78, 80\n9   8, 46, 66, 68, 84, 86\n10 16, 20, 22, 70, 72, 73\n                                                                 wt    County\n1  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667   Anxiang\n2                                           0.2, 0.2, 0.2, 0.2, 0.2   Hanshou\n3                                            0.25, 0.25, 0.25, 0.25    Jinshi\n4                                            0.25, 0.25, 0.25, 0.25        Li\n5                                           0.2, 0.2, 0.2, 0.2, 0.2     Linli\n6                                   0.3333333, 0.3333333, 0.3333333    Shimen\n7                                   0.3333333, 0.3333333, 0.3333333   Liuyang\n8                                           0.2, 0.2, 0.2, 0.2, 0.2 Ningxiang\n9  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667 Wangcheng\n10 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667     Anren\n   GDPPC                       geometry\n1  23667 POLYGON ((112.0625 29.75523...\n2  20981 POLYGON ((112.2288 29.11684...\n3  34592 POLYGON ((111.8927 29.6013,...\n4  24473 POLYGON ((111.3731 29.94649...\n5  25554 POLYGON ((111.6324 29.76288...\n6  27137 POLYGON ((110.8825 30.11675...\n7  63118 POLYGON ((113.9905 28.5682,...\n8  62202 POLYGON ((112.7181 28.38299...\n9  70666 POLYGON ((112.7914 28.52688...\n10 12761 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2A.html#calculate-inverse-distance-weights",
    "href": "In-class_Ex2/In-class_Ex2A.html#calculate-inverse-distance-weights",
    "title": "In-class Exercise 2: Spatial Weights with sfdep",
    "section": "Calculate inverse distance weights",
    "text": "Calculate inverse distance weights\n\nwm_idw &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\nwm_idw\n\nSimple feature collection with 88 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                              wts\n1                                      0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\n2                                      0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\n3                                                  0.03515537, 0.04581089, 0.04116397, 0.01208437\n4                                                  0.02176677, 0.04581089, 0.04637578, 0.01585302\n5                                                  0.04116397, 0.04637578, 0.01896212, 0.01351099\n6                                      0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\n7                                                  0.01621067, 0.01536702, 0.01133628, 0.01836488\n8              0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\n9                          0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\n10 0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\n      County GDPPC                       geometry\n1    Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren 12761 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1C.html",
    "href": "Take-home_Ex1/Take-home_Ex1C.html",
    "title": "Take Home Exercise 1C: Spatial Analysis with LISA",
    "section": "",
    "text": "The aim of this study is to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nThe main modes of analysis to be used here are Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA).\nIn doing these study, we will be looking at bus trips started during the hours below.\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday evening peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nMore details about the study can be found here.\nIn this part of the study, we will do spatial analysis with LISA using bus commuter traffic data generated from Data Wrangling. We will also attempt the answer the Open Questions from Geovisualization and Analysis:\n\nWhich areas are busier on weekends? on weekdays?\nWhat are the commuting patterns of people during weekdays? weekends?"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1C.html#setting-up-the-r-environment",
    "href": "Take-home_Ex1/Take-home_Ex1C.html#setting-up-the-r-environment",
    "title": "Take Home Exercise 1C: Spatial Analysis with LISA",
    "section": "Setting Up the R Environment",
    "text": "Setting Up the R Environment\nWe will load the following R packages needed for this study.\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\nsfdep: for spatial analysis\nknitr:for prettifying presentation\n\n\npacman::p_load(sf, sfdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1C.html#loading-the-data",
    "href": "Take-home_Ex1/Take-home_Ex1C.html#loading-the-data",
    "title": "Take Home Exercise 1C: Spatial Analysis with LISA",
    "section": "Loading the data",
    "text": "Loading the data\n\n\n\n\n\n\nImportant\n\n\n\nBefore running this part, please run all the code chunks in Data Wrangling as it generates the data needed for this document.\n\n\nUse read_rds() to load the rds data needed for geovisualization and analysis.\n\nsg_honeycomb &lt;- read_rds(\"data/rds/sg_honeycomb_with_num_busstops.rds\")\nbus_peaks_hc &lt;- read_rds(\"data/rds/bus_peaks_hc202310.rds\") %&gt;%\n  filter(NUM_BUS_STOPS &gt; 0)\n\n\nsg_honeycomb - contains the honeycomb grid that covers Singapore boundaries\nbus_peaks_hc - bus commuter traffic data for peak times for October 2023\n\n\n\n\n\n\n\nImportant\n\n\n\nAs mentioned in Geovisualization and Analysis, we are only focusing on October 2023 data as we observed the same patterns in the August and September."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html",
    "href": "Take-home_Ex1/Take-home_Ex1D.html",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "",
    "text": "The aim of this study is to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nThe main modes of analysis to be used here are Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA).\nIn doing these study, we will be looking at bus trips started during the hours below.\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday evening peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nMore details about the study can be found here.\nIn this part of the study, we will do spatio-temporal analysis with EHSA using bus commuter traffic data generated from Data Wrangling. We will also attempt the answer the Open Questions from Geovisualization and Analysis:\n\nWhat are the commuting patterns of people during weekdays? weekends?\nAre bus trips really more spread out throughout the day during weekend?"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html#setting-up-the-r-environment",
    "href": "Take-home_Ex1/Take-home_Ex1D.html#setting-up-the-r-environment",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "Setting Up the R Environment",
    "text": "Setting Up the R Environment\nWe will load the following R packages needed for this study.\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\nsfdep: for spatial analysis\nknitr:for prettifying presentation\nplotly: for interactive plots\n\n\npacman::p_load(sf, sfdep, tmap, tidyverse, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "This hands-on exercise covers Chapter 10: Local Measures of Spatial Autocorrelation\nI learned about the following:\n\nGlobal Spatial Autocorrelation (GSA) statistics\nLocal Indicator of Spatial Association (LISA) statistics\nGetis-Ord’s Gi-statistics\n\n\n\nData sets used on this exercise were downloaded from E-learn.\n\n\n\nHunan county boundary layer (shp format)\n\n\n\n\n\nHunan’s local development indicators in 2012 (csv format)\n\nNext, is putting them under the Hands-on_Ex2 directory, with the following file structure:\nHands-on_Ex2\n└── data\n    ├── aspatial\n    │   └── Hunan_2012.csv\n    └── geospatial\n        ├── Hunan.dbf\n        ├── Hunan.prj\n        ├── Hunan.qpj\n        ├── Hunan.shp\n        └── Hunan.shx\n\n\n\n\nI used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#preparing-the-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#preparing-the-data-sets",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Data sets used on this exercise were downloaded from E-learn.\n\n\n\nHunan county boundary layer (shp format)\n\n\n\n\n\nHunan’s local development indicators in 2012 (csv format)\n\nNext, is putting them under the Hands-on_Ex2 directory, with the following file structure:\nHands-on_Ex2\n└── data\n    ├── aspatial\n    │   └── Hunan_2012.csv\n    └── geospatial\n        ├── Hunan.dbf\n        ├── Hunan.prj\n        ├── Hunan.qpj\n        ├── Hunan.shp\n        └── Hunan.shx"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#installing-r-packages",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#installing-r-packages",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "I used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#importing-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#importing-data-sets",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Importing data sets",
    "text": "Importing data sets\nI used st_read() to import the geospatial shp data.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the previous exercises, we transformed the data with EPSG:3414. However, that is not applicable for this data set as we are not working with Singapore 🇸🇬 data set.\n\n\nAs with the previous exercises, I used read_csv() to import aspatial csv data.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#joining-the-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#joining-the-data-sets",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Joining the data sets",
    "text": "Joining the data sets\nIn the exercise, we have to join the 2 data sets using this code:\n\nhunan &lt;- left_join(hunan, hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n\n\n\nNote\n\n\n\nWe did not specify any columns to join by but left_join detected common column, County, so it joined the 2 data sets by this column.\nAt the end of this, we are left with 7 columns, which includes GDPPC from the aspatial data, which contains data for Gross Domestic Product per Capita."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#visualizing-regional-development-indicator",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#visualizing-regional-development-indicator",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\nNext, I plotted the GDPPC maps using equal interval classification and equal quantile classification.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nFirst, I built the neighbor list using Queen contiguity-based neighbors. This means the regions must share a border (minimum a point) to be considered neighbors.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#row-standardized-weights-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#row-standardized-weights-matrix",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Row-standardized weights matrix",
    "text": "Row-standardized weights matrix\nNext, I assigned weights to each neighboring county with value 1/(# of neighbors). This could be done by using style=\"W\" to nb2listw().\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#global-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#global-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation: Moran’s I",
    "text": "Global Spatial Autocorrelation: Moran’s I\n\nMoran’s I test\nNext, I used Moran’s I statistical testing using moran.test().\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Moran’s I value is 0.30075, which is greater than 0. This means that observations are clustered, and tend to be similar.\nThe p-value is also very close to 0, which indicates high confidence on the correlation.\n\n\n\n\nComputing Monte Carlo Moran’s I\nNext, a Monte Carlo simulation was performed for the Moran’s I statistic. 1000 simulations were performed by the code below:\n\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Moran’s I value is 0.30075, same result as that of the Moran’s I test. Similarly, it means that observations are clustered, and tend to be similar.\nThe p-value is also very close to 0, which indicates high confidence on the correlation.\n\n\n\n\nVisualizing Monte Carlo Moran’s I\nFirst, I examined the statistics of the Monte Carlo Moran’s I. I checked the mean, variance, and the quantiles.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nNext, I also plotted the histogram.\n\n\n\n\n\n\nImportant\n\n\n\nI plotted using ggplot2 as an additional challenge from the exercise.\n\n\n\nmc_results_df &lt;- data.frame(moran_i = bperm$res)\nggplot(mc_results_df, aes(x = moran_i)) +\n  geom_histogram(bins = 20, fill = \"grey\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\") +\n  labs(x = \"Sumilated Moran's I\",\n       y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom this Monte Carlo simulations, results are skewed to the left, meaning most of the Moran’s I simulations result in negative values. It means that in most simulation results, there is dispersion so there is no spatial correlation.\nThis is quite contradictory to the statistic from moran.test.\nHowever, as this is a simulation set using seed 1234, results could be different in other simulations because the sampling is different."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#global-spatial-autocorrelation-gearys",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#global-spatial-autocorrelation-gearys",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation: Geary’s",
    "text": "Global Spatial Autocorrelation: Geary’s\nNext I used Geary’s method for spatial correlation.\n\nGeary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\n\n\n\nTip\n\n\n\nGeary’s C statistic is 0.6907, which is less than 1. This means that observations are clustered, and tend to be similar. P-value is also very close to 0, suggesting high-confidence.\n\nIt is consistent with the conclusions in Moran’s I test.\n\n\n\n\nComputing Monte Carlo Geary’s C\nSimilarly, I did permutation test via Monte Carlo simulations.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Moran’s I value is 0.6907, same result as that of the Geary’s C test. Similarly, it means that observations are clustered, and tend to be similar.\nThe p-value is also very close to 0, which indicates high confidence on the correlation.\n\n\n\n\nVisualizing Monte Carlo Geary’s C\nFirst, I examined the statistics of the Monte Carlo Geary’s C. I checked the mean, variance, and the quantiles.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\nFinally, visualizing it.\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom this Monte Carlo simulations, results are quite balanced on 1, which makes it inconclusive as to the spatial clustering and dispersion.\nThis is quite contrary to the statistic resulting from geary.test(), which was more conclusive.\nHowever, as this is a simulation set using seed 1234, results could be different in other simulations because the sampling is different."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#compute-morans-i-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#compute-morans-i-correlogram",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Compute Moran’s I correlogram",
    "text": "Compute Moran’s I correlogram\nFirst, I generated the correlogram for Morans’s I.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nThis did not provide me much information and I didn’t know how to interpret it so I printed the full result.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nTip\n\n\n\nFrom my understanding, since Moran’s I values are greater than 0 and highest on lag 1, it means that the spatial correlation is most significant the closer the regions are."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#compute-gearys-c-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#compute-gearys-c-correlogram",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Compute Geary’s C correlogram",
    "text": "Compute Geary’s C correlogram\nNext, I generated the correlogram for Geary’s C.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nNext was to print the results.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Geary’s C values are closest to 0 on the lag distance 1. Similar to Compute Moran’s I correlogram, the spatial correlation is strongest the closer the regions are.\nThe pattern is inverse of the Moran’s I correlogram, which makes sense as Moran’s I and Geary’s C trends are inverse of each other."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#computing-local-morans-i",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#computing-local-morans-i",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Computing Local Moran’s I",
    "text": "Computing Local Moran’s I\nFirst, I started with computing local Moran’s I values.\nThe code chunks below were used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nThis code chunk result in a matrix with columns:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe local Moran’s I values were inspected by:\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#mapping-local-morans-i",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#mapping-local-morans-i",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Mapping local Moran’s I",
    "text": "Mapping local Moran’s I\nBefore proceeding with the mapping, I appended localMI dataframe onto the hunan dataframe.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nThen, I plotted a cloropeth map of the local Moran’s I values and the p-values using tmap functions. These maps were plotted side by side for easier analysis.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#plotting-moran-scatterplot",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#plotting-moran-scatterplot",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Plotting Moran scatterplot",
    "text": "Plotting Moran scatterplot\nIn order to do this, I have to plot the Moran’s I scatterplot first. This can be via moran.plot().\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis can be be interpreted such that the counties on the upper-right quadrant (e.g., Shaosan, Ningxian, Liuyang, Wangchen, Changsa) are within an affluent region, i.e., cluster of counties with high GDP per capita.\nSome other counties of interest are Zixing and Lengshuijiang, which are more affluent than their neighbors. Lastly, Pingjian is less affluent compared to its neighbors."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#plotting-moran-scatterplot-with-standardized-variable",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#plotting-moran-scatterplot-with-standardized-variable",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Plotting Moran scatterplot with standardized variable",
    "text": "Plotting Moran scatterplot with standardized variable\nNext is to scale the plot by normalizing the axes, which should align the axes to 0. scale() was used for this purpose.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nAfter scaling, I replotted the scatterplot.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#preparing-lisa-map-classes",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#preparing-lisa-map-classes",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Preparing LISA map classes",
    "text": "Preparing LISA map classes\nTo prepare LISA cluster map, I had to first create a numeric vector with the same number of elements as localMI, which is 88.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext was to compute the lag values and centering on the mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\n\nSimilarly, i also centered the local Moran’s I values around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nI also set the significant value to 0.05 as per standards.\n\nsignif &lt;- 0.05\n\nThen, I defined the low-low (1), low-high (2), high-low (3) and high-high (4) categories. This corresponds to the quadrants in the scatterplot from Plotting Moran scatterplot.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4\n\nLastly, was to add a category for non-significant Moran’s I values.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#plotting-lisa-map",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#plotting-lisa-map",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Plotting LISA map",
    "text": "Plotting LISA map\nAfter preparing the classes, I could finally plot the LISA map. As with the other maps so far, I used tmap() functions to created this map.\nFor easier analysis, I plotted the LISA map next to the GDPPC map.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI was expecting the 2 standalone orange counties from the GDPPC map (Zixing and Lengshuijiang) to be part of the high-low category. This is because they are relatively more affluent than their neighbors.\nThey were also on the high-low quadrant in the scatterplot. Hence, this result was surprising for me.\nA possible explanation for this is that their GDPPC are just a little bit higher than 60,000, while their neighbors are in the high 50,000s. Visually, they distinct but a closer look at the number might reveal that the values are not really far-off.\n\n\nI also plotted the local Moran’s I values and p-values side by side again to find clues as to why.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs I mentioned, Zixing and Lengshuijiang were part of the high-low category as I originally expected.\nThe p-value provides a sound explanation why. This is because the p-values for these counties are 0.100 or more, which is more than the significance value that was set, which was 0.05.\nWe can say that the p-value map can be use as a filter such that those counties with p-values greater than the significance value are considered insignificant, and only those are not included in this group will be categorized."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#deriving-spatial-weight-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#deriving-spatial-weight-matrix",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Deriving spatial weight matrix",
    "text": "Deriving spatial weight matrix\n\n\n\n\n\n\nImportant\n\n\n\nThe code chunks used in this part are the same as the ones used in Hands-on Exercise 2A: Spatial Weights and Applications. I didn’t dive deep into these part as these was already learned.\nFor this exercise, binary spatial weights are used.\n\n\nIn order to calculate the spatial weights, I needed to get determine the cut-off distance first. This was done by deriving the centroids and calculating the distances to the nearest neighbor for each county.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nThese are the same steps as in [Hands-on Exercise 2A: Spatial Weights and Applications](/Hands-on_Ex2/Hands-on_Ex2A.html#determining-cut-off-distance), where we determined the cut-off distance to be 62km.\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nFinally, the spatial weights matrix can be generated.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nAs in the previous exercise, we could standardize the number of neighbors. This is because denser areas have more neighbors, while rural areas have less.\nThe code chunks below demonstrates how to standardize to 8 neighbors.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#gi-statistics-with-using-fixed-distance-weights",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#gi-statistics-with-using-fixed-distance-weights",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Gi statistics with using fixed distance weights",
    "text": "Gi statistics with using fixed distance weights\nContinuing from the steps above, I looked at two cases. In this part, I used the fixed distance weights.\nFirst, I calculated the Gi statistics using the fixed distance weights.\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nNext is to add the Gi statistics to the hunan data frame.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nFinally, we could map the Gi values.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere is a cluster of counties with high GDDPC in the Eastern part of China.\nA striking observation is that the other orange cities outside of this cluster are cold in the local Gi map. This means that they are surrounded by counties with low GDPPC.\nThere should be caution when interpreting the map on the right as it is not intuitive because the values are actually based on the neighbors, and not the counties themselves."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2C.html#gi-statistics-with-using-adaptive-distance-weights",
    "href": "Hands-on_Ex2/Hands-on_Ex2C.html#gi-statistics-with-using-adaptive-distance-weights",
    "title": "Hands-on Exercise 2C: Local Measures of Spatial Autocorrelation",
    "section": "Gi statistics with using adaptive distance weights",
    "text": "Gi statistics with using adaptive distance weights\nNext we calculate the Gi statistics using adaptive distance weights.\nThe steps are the same as in Gi statistics with using fixed distance weights but instead using the adaptive weights (knn_lw) instead of the fixed weights(wm62_lw).\nFirst was to calculate the Gi statistics.\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\ngi.adaptive\n\n [1]  0.274428799  0.300225037  0.030447697 -0.009771412 -0.033921570\n [6] -0.154780126  4.034649782  2.057586016  4.378892586  1.479129376\n[11]  0.761743842 -0.648205275 -0.773677838  0.589236922  1.040407601\n[16]  0.368526533 -0.604240867 -0.241840937  0.031714037 -0.110547691\n[21]  0.761314356  1.175580259 -0.884714136 -0.860993329 -1.643096490\n[26] -1.290687016 -1.422253022 -0.675281508 -1.719511109 -1.210266137\n[31] -1.300914263 -1.599085669 -1.298761870 -1.836622587  1.637619520\n[36] -0.721435309 -1.958848641 -1.665195897 -1.868014845 -1.183536130\n[41] -0.169560764 -2.084882362 -2.181780084 -2.081025645 -0.499000625\n[46]  2.194733590  2.495469794 -1.695557884 -0.745540634 -1.193763093\n[51] -1.821073681 -1.894085866 -1.570969008 -1.055766446 -1.299966539\n[56] -0.201823610  0.498063690  0.581955247 -0.876827566 -0.955484907\n[61] -0.723004897 -0.790993867 -0.183585082  1.129758266  2.271097895\n[66]  3.047193741  4.995149600  4.022126163 -0.313165513  0.384924896\n[71]  3.018245449  0.561045961  0.210102660  4.365942776 -1.210175378\n[76]  2.391729501 -1.188720061  3.068344267 -0.600223372  1.046676007\n[81] -1.427632954 -0.156355526  1.176546366  3.726230897 -0.327758027\n[86]  2.972571047 -1.009008013 -0.989393051\nattr(,\"internals\")\n              Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.09720587 0.09195402 0.0003662397  0.274428799   7.837551e-01\n [2,] 0.09769063 0.09195402 0.0003651040  0.300225037   7.640055e-01\n [3,] 0.09253816 0.09195402 0.0003680612  0.030447697   9.757100e-01\n [4,] 0.09176695 0.09195402 0.0003665281 -0.009771412   9.922037e-01\n [5,] 0.09130429 0.09195402 0.0003668767 -0.033921570   9.729397e-01\n [6,] 0.08898762 0.09195402 0.0003673079 -0.154780126   8.769947e-01\n [7,] 0.16751891 0.09195402 0.0003507748  4.034649782   5.468380e-05\n [8,] 0.13054918 0.09195402 0.0003518436  2.057586016   3.962989e-02\n [9,] 0.17277103 0.09195402 0.0003406253  4.378892586   1.192839e-05\n[10,] 0.12001759 0.09195402 0.0003599760  1.479129376   1.391057e-01\n[11,] 0.10633361 0.09195402 0.0003563487  0.761743842   4.462129e-01\n[12,] 0.07951853 0.09195402 0.0003680448 -0.648205275   5.168522e-01\n[13,] 0.07714548 0.09195402 0.0003663568 -0.773677838   4.391213e-01\n[14,] 0.10311529 0.09195402 0.0003587953  0.589236922   5.557024e-01\n[15,] 0.11178796 0.09195402 0.0003634216  1.040407601   2.981506e-01\n[16,] 0.09902122 0.09195402 0.0003677535  0.368526533   7.124807e-01\n[17,] 0.08068910 0.09195402 0.0003475655 -0.604240867   5.456835e-01\n[18,] 0.08732412 0.09195402 0.0003665092 -0.241840937   8.089034e-01\n[19,] 0.09256190 0.09195402 0.0003673900  0.031714037   9.747001e-01\n[20,] 0.08984049 0.09195402 0.0003655276 -0.110547691   9.119750e-01\n[21,] 0.10653391 0.09195402 0.0003667585  0.761314356   4.464693e-01\n[22,] 0.11447605 0.09195402 0.0003670374  1.175580259   2.397626e-01\n[23,] 0.07508563 0.09195402 0.0003635312 -0.884714136   3.763108e-01\n[24,] 0.07555112 0.09195402 0.0003629457 -0.860993329   3.892417e-01\n[25,] 0.06043622 0.09195402 0.0003679474 -1.643096490   1.003630e-01\n[26,] 0.06742593 0.09195402 0.0003611483 -1.290687016   1.968122e-01\n[27,] 0.06478946 0.09195402 0.0003647974 -1.422253022   1.549528e-01\n[28,] 0.07912867 0.09195402 0.0003607191 -0.675281508   4.994969e-01\n[29,] 0.05932898 0.09195402 0.0003599915 -1.719511109   8.552135e-02\n[30,] 0.06893033 0.09195402 0.0003618998 -1.210266137   2.261768e-01\n[31,] 0.06724327 0.09195402 0.0003608067 -1.300914263   1.932878e-01\n[32,] 0.06134370 0.09195402 0.0003664310 -1.599085669   1.098016e-01\n[33,] 0.06714525 0.09195402 0.0003648812 -1.298761870   1.940257e-01\n[34,] 0.05762358 0.09195402 0.0003493969 -1.836622587   6.626563e-02\n[35,] 0.12317148 0.09195402 0.0003633868  1.637619520   1.015011e-01\n[36,] 0.07825698 0.09195402 0.0003604615 -0.721435309   4.706417e-01\n[37,] 0.05490035 0.09195402 0.0003578169 -1.958848641   5.013052e-02\n[38,] 0.06013762 0.09195402 0.0003650661 -1.665195897   9.587368e-02\n[39,] 0.05649408 0.09195402 0.0003603425 -1.868014845   6.176000e-02\n[40,] 0.06958160 0.09195402 0.0003573248 -1.183536130   2.365967e-01\n[41,] 0.08870667 0.09195402 0.0003667818 -0.169560764   8.653556e-01\n[42,] 0.05226797 0.09195402 0.0003623370 -2.084882362   3.707998e-02\n[43,] 0.05058836 0.09195402 0.0003594662 -2.181780084   2.912577e-02\n[44,] 0.05256094 0.09195402 0.0003583316 -2.081025645   3.743156e-02\n[45,] 0.08249954 0.09195402 0.0003589829 -0.499000625   6.177789e-01\n[46,] 0.13351191 0.09195402 0.0003585448  2.194733590   2.818271e-02\n[47,] 0.13980943 0.09195402 0.0003677540  2.495469794   1.257905e-02\n[48,] 0.05972453 0.09195402 0.0003613115 -1.695557884   8.996964e-02\n[49,] 0.07779955 0.09195402 0.0003604495 -0.745540634   4.559450e-01\n[50,] 0.06933428 0.09195402 0.0003590369 -1.193763093   2.325707e-01\n[51,] 0.05717238 0.09195402 0.0003647919 -1.821073681   6.859566e-02\n[52,] 0.05561872 0.09195402 0.0003680088 -1.894085866   5.821361e-02\n[53,] 0.06225124 0.09195402 0.0003574860 -1.570969008   1.161898e-01\n[54,] 0.07183294 0.09195402 0.0003632178 -1.055766446   2.910749e-01\n[55,] 0.06738016 0.09195402 0.0003573408 -1.299966539   1.936124e-01\n[56,] 0.08811771 0.09195402 0.0003613143 -0.201823610   8.400546e-01\n[57,] 0.10147288 0.09195402 0.0003652580  0.498063690   6.184392e-01\n[58,] 0.10310390 0.09195402 0.0003670801  0.581955247   5.605968e-01\n[59,] 0.07526754 0.09195402 0.0003621606 -0.876827566   3.805803e-01\n[60,] 0.07370784 0.09195402 0.0003646671 -0.955484907   3.393325e-01\n[61,] 0.07823737 0.09195402 0.0003599264 -0.723004897   4.696769e-01\n[62,] 0.07683091 0.09195402 0.0003655412 -0.790993867   4.289476e-01\n[63,] 0.08846487 0.09195402 0.0003612141 -0.183585082   8.543390e-01\n[64,] 0.11362359 0.09195402 0.0003678997  1.129758266   2.585781e-01\n[65,] 0.13552322 0.09195402 0.0003680335  2.271097895   2.314105e-02\n[66,] 0.15029172 0.09195402 0.0003665206  3.047193741   2.309888e-03\n[67,] 0.18713548 0.09195402 0.0003630845  4.995149600   5.879018e-07\n[68,] 0.16912010 0.09195402 0.0003680793  4.022126163   5.767515e-05\n[69,] 0.08597972 0.09195402 0.0003639373 -0.313165513   7.541549e-01\n[70,] 0.09930460 0.09195402 0.0003646621  0.384924896   7.002931e-01\n[71,] 0.14976364 0.09195402 0.0003668522  3.018245449   2.542429e-03\n[72,] 0.10267460 0.09195402 0.0003651229  0.561045961   5.747662e-01\n[73,] 0.09598415 0.09195402 0.0003679379  0.210102660   8.335875e-01\n[74,] 0.17564058 0.09195402 0.0003674137  4.365942776   1.265756e-05\n[75,] 0.06894940 0.09195402 0.0003613546 -1.210175378   2.262116e-01\n[76,] 0.13777971 0.09195402 0.0003671080  2.391729501   1.676920e-02\n[77,] 0.06924543 0.09195402 0.0003649397 -1.188720061   2.345498e-01\n[78,] 0.15052389 0.09195402 0.0003643681  3.068344267   2.152485e-03\n[79,] 0.08060684 0.09195402 0.0003573967 -0.600223372   5.483574e-01\n[80,] 0.11191592 0.09195402 0.0003637301  1.046676007   2.952490e-01\n[81,] 0.06473996 0.09195402 0.0003633737 -1.427632954   1.533975e-01\n[82,] 0.08896972 0.09195402 0.0003643008 -0.156355526   8.757528e-01\n[83,] 0.11452640 0.09195402 0.0003680752  1.176546366   2.393766e-01\n[84,] 0.15719339 0.09195402 0.0003065349  3.726230897   1.943644e-04\n[85,] 0.08568420 0.09195402 0.0003659344 -0.327758027   7.430946e-01\n[86,] 0.14892272 0.09195402 0.0003672891  2.972571047   2.953169e-03\n[87,] 0.07271488 0.09195402 0.0003635650 -1.009008013   3.129708e-01\n[88,] 0.07310269 0.09195402 0.0003630331 -0.989393051   3.224709e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = knn_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThen attaching the Gi statistics to the hunan data frame.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nAnd finally, mapping it.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWith this plot, the clusters are a lot more clearer and we can clearly see that the East side is the hot spot in terms on GDDPC.\nHowever, we can also notice that on the Southwest, the most affluent county is a cold spot in the Gi map because it is surrounded by less affluent counties.\n\n\nAnother observation is that the Gi map using adaptive distance weights are less scattered and bigger compared to the Gi map using fixed distance weights."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "",
    "text": "This hands-on exercise covers Chapter 8: Spatial Weights and Applications\nI learned about the following:\n\nCalculating spatial weights\nCalculating spatially lagged variables"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#preparing-the-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#preparing-the-data-sets",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Preparing the data sets",
    "text": "Preparing the data sets\nData sets used on this exercise were downloaded from E-learn.\n\nGeospatial\n\nHunan county boundary layer (shp format)\n\n\n\nAspatial\n\nHunan’s local development indicators in 2012 (csv format)\n\nNext, is putting them under the Hands-on_Ex2 directory, with the following file structure:\nHands-on_Ex2\n└── data\n    ├── aspatial\n    │   └── Hunan_2012.csv\n    └── geospatial\n        ├── Hunan.dbf\n        ├── Hunan.prj\n        ├── Hunan.qpj\n        ├── Hunan.shp\n        └── Hunan.shx"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#installing-r-packages",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#installing-r-packages",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Installing R packages",
    "text": "Installing R packages\nI used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#importing-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#importing-data-sets",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Importing data sets",
    "text": "Importing data sets\nI used st_read() to import the geospatial shp data.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the previous exercises, we transformed the data with EPSG:3414. However, that is not applicable for this data set as we are not working with Singapore 🇸🇬 data set.\n\n\nAs with the previous exercises, I used read_csv() to import aspatial csv data.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#joining-the-data-sets",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#joining-the-data-sets",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Joining the data sets",
    "text": "Joining the data sets\nIn the exercise, we have to join the 2 data sets using this code:\n\nhunan &lt;- left_join(hunan, hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n\n\n\nNote\n\n\n\nWe did not specify any columns to join by but left_join detected common column, County, so it joined the 2 data sets by this column.\nAt the end of this, we are left with 7 columns, which includes GDPPC from the aspatial data, which contains data for Gross Domestic Product per Capita."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-queen-contiguity-based-neighbors",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-queen-contiguity-based-neighbors",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Computing (QUEEN) contiguity based neighbors",
    "text": "Computing (QUEEN) contiguity based neighbors\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThis showed that there are 2 least connected regions, 30 and 65. Furthermore, there is 1 county is most connected, 85.\nBelow I analyzed these counties of interest\n\nLeast connected counties\nFirst, I checked the names of the least connected counties.\n\nhunan$County[c(30, 65)]\n\n[1] \"Xinhuang\" \"Linxiang\"\n\n\nThe least connected counties are Xinhuang in the West and Linxiang in the Northeast.\nIt makes sense for these counties to be least connected as they are counties that only have 1 neighbors each, according to the map.\n\nhunan$County[c(\n  wm_q[[30]],\n  wm_q[[65]]\n)]\n\n[1] \"Zhijiang\" \"Yueyang\" \n\n\nXinhuang borders Zhijiang to the East, while Linxiang borders Yueyang to the Southwest.\n\n\nMost connected county\n\nhunan$County[85]\n\n[1] \"Taoyuan\"\n\n\nThe most connected county is Taoyuan with 11 neighbors. It’s neighbors are:\n\nhunan$County[wm_q[[85]]]\n\n [1] \"Anxiang\"  \"Hanshou\"  \"Jinshi\"   \"Linli\"    \"Shimen\"   \"Yuanling\"\n [7] \"Anhua\"    \"Nan\"      \"Cili\"     \"Sangzhi\"  \"Taojiang\"\n\n\nThis makes perfect sense as Taoyuan is a relatively large, inner county."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#creating-rook-contiguity-based-neighbors",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#creating-rook-contiguity-based-neighbors",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Creating (ROOK) contiguity based neighbors",
    "text": "Creating (ROOK) contiguity based neighbors\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThis operation resulted in 8 fewer non-zero links. The most connected region, Taoyuan, has one less neighbor. However, the least connected regions stayed the same.\n\nsetdiff(hunan$County[wm_q[[85]]], hunan$County[wm_r[[85]]])\n\n[1] \"Nan\"\n\n\nNan is not considered a neighbor of Taoyuan using the Rook method. I check the documentation of poly2nb() to understand why.\n\n\n\n\n\n\nNote\n\n\n\nWhen setting queen=false, it requires boundaries to be more that just one point. On the other hand, with queen=true, it requires the objects to shared only a single point.\nAs such, having 8 less links means 8 pairs of counties only share a single point in their boundaries.\n\n\nLooking at the map, Nan indeed only touches Taoyuan at a single point:"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#visualising-contiguity-weights",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#visualising-contiguity-weights",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Visualising contiguity weights",
    "text": "Visualising contiguity weights\nTo plot the contiguity, we need to get the centroids of each county region. To get this for a single county, the following code can be used.\n\nhunan$geometry[1] %&gt;% st_centroid(.x)\n\nGeometry set for 1 feature \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 112.1531 ymin: 29.44346 xmax: 112.1531 ymax: 29.44346\nGeodetic CRS:  WGS 84\n\n\nHowever, we needed to plot each longitude and latitude separately and create a new data frame for centroid coordinates from those. In order to do that, I copied the code chunks from the exercise.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting contiguity based neighbors map\nI plotted the Queen and Rooks maps on the same plot instead of the recommended way in the exercise. This is so I could see which neighbors where present in the Queen method but were not present in the Rook method.\nThey are the red lines in the map.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#determining-cut-off-distance",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#determining-cut-off-distance",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Determining cut-off distance",
    "text": "Determining cut-off distance\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\n\n\n\nNote\n\n\n\nThis means that the (centroids of) closest neighbors are 24.79 km apart while the farthest neighbors are 61.79 km apart.\nTo ensure that all counties will have at least one neighbors, we set the cut-off distance to the maximum distance, or 61.79 km."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-fixed-distance-weight-matrix",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Computing fixed distance weight matrix",
    "text": "Computing fixed distance weight matrix\nTo figure out the neighbors within the 62km distance (rounded out from the previous result), we use dnearneigh() .\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\n\n\n\n\n\nTip\n\n\n\nThe average number of links here correspond to the average number of neighbors each county has.\nThat means for every county in China, there are 3.681818 other counties within 62 km of them, on average.\n\n\nThe example below gives a glimpse of neighbors each county has.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n\n\n\nNote\n\n\n\nAnother observation here is that Taoyuan, which had 11 contiguity-based neighbors, now only has 2 neighbors when using distance-based methods.\n\nwm_d62[88]\n\n[[1]]\n[1] 59 87"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#plotting-distance-based-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#plotting-distance-based-matrix",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Plotting distance-based matrix",
    "text": "Plotting distance-based matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n💡 I found out that plotting the red lines first before the black lines would just display black lines.\nThe technique of rendering the superset before the subset is a good technique to display the difference in the different plots.\nAfter realizing this, I applied the same technique in the Queen and Rook maps in [##Visualising contiguity weights]."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#computing-adaptive-distance-weight-matrix",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Computing adaptive distance weight matrix",
    "text": "Computing adaptive distance weight matrix\nThere are cases in which knowing the k-nearest neighbors is useful. It can be done by passing k to knearneigh:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nPlotting this in a map and overlapping with the wm_d62 map, we can see that more neighbor links (in red) were added so that each county has 6 neighbors.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, add=TRUE, col=\"red\", length=0.08)\nplot(wm_d62, coords, add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#row-standardized-weights-matrix",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#row-standardized-weights-matrix",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Row-standardized weights matrix",
    "text": "Row-standardized weights matrix\nNext we assign the weight of 1/(# of neighbors) to each neighbor.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nNext I inspected some weights values to check if the results are consistent with our expectations.\n\nrswm_q$weights[c(1, 10, 30, 85)]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[2]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[3]]\n[1] 1\n\n[[4]]\n [1] 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909\n [7] 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909\n\n\nAs expected, their values are equal to 1/(# of neighbors).\nNext, the same was also done to derive a row standardised distance weight matrix.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nChecking some of the matrix values:\n\nrswm_ids$weights[c(1, 10, 30, 85)]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[3]]\n[1] 0.02090587\n\n[[4]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n\n\n\n\n\n\n\nNote\n\n\n\nResults seem to be the same as when using nbdists() and lapply() in Weights based on IDW.\n\n\nFinally, we get some summary of the values.\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-lag-with-row-standardized-weights",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-lag-with-row-standardized-weights",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Spatial lag with row-standardized weights",
    "text": "Spatial lag with row-standardized weights\nFirst, I computed the spatially lagged values for each polygon.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nThe spatially lagged GDPPC values were appended to the Hunan data using the code below:\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, the GDPPC and spatial lag GDPPC were plotted for comparison\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe spatial correlation seems to appear more positive among counties in the East."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-lag-as-a-sum-of-neighboring-values",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-lag-as-a-sum-of-neighboring-values",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Spatial lag as a sum of neighboring values",
    "text": "Spatial lag as a sum of neighboring values\nThe spatial lag as a sum of neighboring values was calculated by assigning binary weights.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nThen, these weights were applied to the GDPPC values, and appending the lag_sum data to thehunan data set.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\nhunan &lt;- left_join(hunan, lag.res)\n\nLastly, I plotted the map.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe lag_sum plot looks more scattered compared to the lag plot."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-window-average",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-window-average",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Spatial window average",
    "text": "Spatial window average\nFirst, I added the diagonal element to the neighbor list.\n\nwm_qs &lt;- include.self(wm_q)\n\nNext, I calculated the weights for the new list.\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nThen, I creates the lag variable from the weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nSubsequently, I processed the data for further analysis.\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nI inspected the different lag values to figure out if there was any pattern. It was hard to do by eye on this table.\n\nhunan %&gt;%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nAfter all the data processing, I could finally plot the spatial window average.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe range of values became narrower, from 10,000 - 60,000 to 10,000 - 50,000. Furthermore, the map looks “cleaner” for the lag_window_average."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-window-sum",
    "href": "Hands-on_Ex2/Hands-on_Ex2A.html#spatial-window-sum",
    "title": "Hands-on Exercise 2A: Spatial Weights and Applications",
    "section": "Spatial window sum",
    "text": "Spatial window sum\nFirst, I added the diagonal element to the neighbor list.\n\nwm_qs &lt;- include.self(wm_q)\n\nThen, binary weights were calculated from this new list.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, data was processed for further analysis.\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nNext, I compared the lag_sum and w_sum values to check for patterns. Hard to see in this table format.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nFinally, I plotted the maps.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1C.html#environment-settings",
    "href": "Take-home_Ex1/Take-home_Ex1C.html#environment-settings",
    "title": "Take Home Exercise 1C: Spatial Analysis with LISA",
    "section": "Environment settings",
    "text": "Environment settings\nWe will also set the default settings on for this document\n\ntmap_style to natural: for displaying the maps with preferred style\nset seed for reproducibility of results\n\n\ntmap_style(\"natural\")\nset.seed(1234)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1C.html#general-observations",
    "href": "Take-home_Ex1/Take-home_Ex1C.html#general-observations",
    "title": "Take Home Exercise 1C: Spatial Analysis with LISA",
    "section": "General observations",
    "text": "General observations\n\nLow-low clusters in the West part (Jurong area), indicating low demand for buses.\n\nAre alternative modes of transport (MRT, taxi, car, etc) more popular in this area?\nIs this an area with sparse population?\n\nHigh-high clusters seem to correspond to bus interchanges.\n\nEyeballed the map based on bus interchanges from Google Maps\nMultiple bus lines start at interchanges so people are expected to ride here, especially as they are close to residential areas\n\nWoodlands Checkpoint is in a high-high cell\n\nPeople crossing the border into Singapore tap in here. Workers that reside in Johor Bahru utilize the bus stop here.\n\nLow-high cells observed around high-high cells\n\nIndication under-utilized stops as people prefer to ride buses in nearby bus stops"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#environment-settings",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#environment-settings",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Environment settings",
    "text": "Environment settings\nWe will also set the default settings on for this document\n\ntmap_style to natural: for displaying the maps with preferred style\n\n\ntmap_mode(\"plot\")\ntmap_style(\"natural\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html#environment-settings",
    "href": "Take-home_Ex1/Take-home_Ex1D.html#environment-settings",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "Environment settings",
    "text": "Environment settings\nWe will also set the default settings on for this document\n\ntmap_style to natural: for displaying the maps with preferred style\nset seed for reproducibility of results\n\n\ntmap_style(\"natural\")\nset.seed(1234)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html#loading-the-data",
    "href": "Take-home_Ex1/Take-home_Ex1D.html#loading-the-data",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "Loading the data",
    "text": "Loading the data\n\n\n\n\n\n\nImportant\n\n\n\nBefore running this part, please run all the code chunks in Data Wrangling as it generates the data needed for this document.\n\n\nUse read_rds() to load the rds data needed for geovisualization and analysis.\n\nsg_honeycomb &lt;- read_rds(\"data/rds/sg_honeycomb_with_num_busstops.rds\")\nhourly_from_hex &lt;- read_rds(\"data/rds/hourly_from_hex202310.rds\")\nbusstop_hc &lt;- sg_honeycomb %&gt;% filter(NUM_BUS_STOPS &gt; 0)\n\n\nsg_honeycomb - contains the honeycomb grid that covers Singapore boundaries\nhourly_from_hex - hourly bus commuter traffic data for October 2023"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html#first-attempt",
    "href": "Take-home_Ex1/Take-home_Ex1D.html#first-attempt",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "First attempt",
    "text": "First attempt\n\nweekday_hourly_sf &lt;-\n  hourly_from_hex %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  ungroup() %&gt;%\n  select(c(1, 3, 4))\n\n\nweekday_st &lt;- spacetime(weekday_hourly_sf, busstop_hc,\n                        .loc_col = \"HEXAGON_ID\",\n                        .time_col = \"HOUR_OF_DAY\")\nis_spacetime_cube(weekday_st)\n\n[1] FALSE"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html#filling-the-gaps",
    "href": "Take-home_Ex1/Take-home_Ex1D.html#filling-the-gaps",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "Filling the gaps",
    "text": "Filling the gaps\nAttempt was successful because we are missing some time-location combinations.\nAs we have 1519 hexagons and 24 hours in a day, the sf must have \\(1519 \\times 24\\) or 36456 rows.\n\nfull_combo &lt;-\n  expand.grid(\n    HEXAGON_ID = unique(busstop_hc$HEXAGON_ID),\n    HOUR_OF_DAY = 0:23\n  )\nnrow(full_combo)\n\n[1] 36456\n\n\n\nweekday_hourly_sf &lt;- full_join(weekday_hourly_sf, full_combo)\nweekday_hourly_sf$TRIPS[is.na(weekday_hourly_sf$TRIPS)] &lt;- 0\nweekday_hourly_sf &lt;- weekday_hourly_sf %&gt;% filter(HOUR_OF_DAY &gt;= 6 & HOUR_OF_DAY &lt; 14)\nweekday_hourly_sf &lt;- weekday_hourly_sf %&gt;%\n  left_join(busstop_hc) %&gt;% st_sf()\n\n\nWeekdayWeekend/Holidays\n\n\n\nweekday_st &lt;- spacetime(weekday_hourly_sf, busstop_hc,\n                        .loc_col = \"HEXAGON_ID\",\n                        .time_col = \"HOUR_OF_DAY\")\nis_spacetime_cube(weekday_st)\n\n[1] TRUE"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html#plot",
    "href": "Take-home_Ex1/Take-home_Ex1D.html#plot",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "Plot",
    "text": "Plot\n\np &lt;- ggplot(data = weekday_cbg, \n       aes(x = HOUR_OF_DAY, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\nweekday_cbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  unnest_wider(mk)\n\n# A tibble: 1 × 6\n    tau    sl     S     D  varS                                         geometry\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;                                    &lt;POLYGON [m]&gt;\n1 0.143 0.711     4  28.0  65.3 ((3917.538 28017.41, 3667.538 28161.75, 3667.53…"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1D.html#visualization-the-distribution-of-ehsa-classes",
    "href": "Take-home_Ex1/Take-home_Ex1D.html#visualization-the-distribution-of-ehsa-classes",
    "title": "Take-home Exercise 1D: Spatio-temporal Analysis with EHSA",
    "section": "Visualization the distribution of EHSA classes",
    "text": "Visualization the distribution of EHSA classes\n\nggplot(data = ehsa2,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\nweekday_hourly_ehsa &lt;- weekday_hourly_sf %&gt;%\n  left_join(ehsa2,\n            by = join_by(HEXAGON_ID == location))\n\n\nehsa_sig &lt;- weekday_hourly_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(sg_honeycomb) +\n  tm_fill(col=\"white\") +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#environment-settings",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#environment-settings",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Environment Settings",
    "text": "Environment Settings\nWe will also set the default settings on for this document\n\ntmap_mode to plot: for plotting simple maps\ntmap_style to natural: for my preferred mapping style\nset seed for reproducibility of results"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "",
    "text": "The aim of this study is to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nThe main modes of analysis to be used here are Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA).\nIn doing these study, we will be looking at bus trips started during the hours below.\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday evening peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nMore details about the study can be found here.\nIn this part of the study, we will do data wrangling on the data sets so that they are transformed into a form that can be used for geovisualization and spatial analysis."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#preparing-the-data-sets",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#preparing-the-data-sets",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Preparing the data sets",
    "text": "Preparing the data sets\n\nGeospatial\nThese data sets are in shp format.\n\nMaster Plan 2019 Subzone Boundary (Web), originally from data.gov.sg but used the one provided on E-learn.\nBus Stop Locations, available publicly from LTA DataMall\n\n\n\nAspatial\nThese data sets are in csv format.\n\nPassenger Volume By Origin Destination Bus Stops from LTA DataMall via API (need to request for access)\n\nAugust 2023\nSeptember 2023\nOctober 2023 - we will focus on this as the main data set"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#preparing-the-data-directory",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#preparing-the-data-directory",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Preparing the data/ directory",
    "text": "Preparing the data/ directory\nBefore starting our analysis, we have to organize the data sets in a directory.\n\nGeospatial data will be located under data/geospatial\nAspatial data will be located under data/aspatial\ndata/rds to be created to store data that we can reuse and to make our code reproduceable.\n\nFinally, we are left with the following file structure:\nTake-home_Ex1\n├── Take-home_Ex1.qmd\n└── data\n    ├── aspatial\n    │   ├── origin_destination_bus_202308.csv\n    │   ├── origin_destination_bus_202309.csv\n    │   └── origin_destination_bus_202310.csv\n    ├── geospatial\n    │   ├── BusStop.cpg\n    │   ├── BusStop.dbf\n    │   ├── BusStop.lyr\n    │   ├── BusStop.prj\n    │   ├── BusStop.sbn\n    │   ├── BusStop.sbx\n    │   ├── BusStop.shp\n    │   ├── BusStop.shp.xml\n    │   ├── BusStop.shx\n    │   ├── MPSZ-2019.cpg\n    │   ├── MPSZ-2019.dbf\n    │   ├── MPSZ-2019.prj\n    │   ├── MPSZ-2019.qmd\n    │   ├── MPSZ-2019.shp\n    │   └── MPSZ-2019.shx\n    └── rds"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#setting-up-the-r-environment",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#setting-up-the-r-environment",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Setting Up the R Environment",
    "text": "Setting Up the R Environment\nAfter preparing the data sets, we can finally proceed to load the R packages needed for this study.\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\nknitr:for prettifying presentation\n\n\npacman::p_load(sf, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#why-hexagons",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#why-hexagons",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Why hexagons?",
    "text": "Why hexagons?\nSome benefits of using a hexagons are:\n\nA hexagon is the polygon with the most number of sides that can tessellate (or tile). Hence it is the most “circular” of the polygons that can be tessellated.\nDistances of the centroid from one hexagon to the next are consistent all around the hexagon, making it easy to find neighbors.\n\nMore information about hexagons in the context of spatial analysis can be found in https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-statistics-toolbox/h-whyhexagons.htm\n\n\n\n\n\n\nTip\n\n\n\nAs in the map in [Singapore boundary data], the subzones have different shapes and sizes. The analysis will benefit from using a consistently-shaped regions because our analysis requires a lot of neighbor calculations."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#importing-singapore-boundary-data",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#importing-singapore-boundary-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing Singapore boundary data",
    "text": "Importing Singapore boundary data\nWe will use the Master Plan 2019 Subzone Boundary (Web) data set that has been used in class. This is a shp file, that we will import by using `st_read()\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"MPSZ-2019\")\n\n\n\n\n\n\n\nImportant\n\n\n\nThis data frame using the global GPS standard projection, WGS84. We need to convert this to SVY21 that is more appropriate for Singapore 🇸🇬 context, and for consistency with the bus stop data.\n\n\n\nmpsz &lt;- mpsz %&gt;% st_transform(crs=3414)\nhead(mpsz)\n\nNow that the data frame has the correct projection, let’s do a quick plot to visually check if we have the boundaries that we need.\n\ntmap_style(\"natural\")\ntm_shape(mpsz) +\n  tm_fill(\"lightgreen\", title = \"Singapore Boundary\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map of Singapore\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#generating-hexagons",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#generating-hexagons",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Generating hexagons",
    "text": "Generating hexagons\nFor this study, we will create hexagons with apothem of 250m. This is the distance of the line segment from the center to the midpoint of the edge.\n\n\n\n\n\n\nTip\n\n\n\nThe edge length is 288.675m.\n\\[\n250m/cos(30) = 288.675m\n\\]\n\n\nFollowing the steps on https://urbandatapalette.com/post/2021-08-tessellation-sf/, we will use st_make_grid() to generate the hexagons for analysis.\nWe need to provide a value for cellsize in the function, which is defined as “for hexagonal cells the distance between opposite edges”.\nThis is equivalent to \\(2 \\times L_{apothem} = 2 \\times 250m\\), which is 500m.\n\nsg_honeycomb &lt;- st_make_grid(mpsz,\n                       cellsize = 500,\n                       what = \"polygon\",\n                       square = FALSE) %&gt;%\n  st_sf()\n\n\n\n\n\n\n\nImportant\n\n\n\nWe have to use st_sf() to convert the result to a data frame that can be used for the succeeding steps.\n\n\nLet’s check if the honeycomb grid fits with Singapore.\n\ntm_shape(sg_honeycomb) +\n  tm_fill(col = \"white\", title = \"Hexagons\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Singapore with honeycomb grid\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2, bg.color = \"white\", bg.alpha = 0.5) +\n  tm_scale_bar(bg.color = \"white\", bg.alpha = 0.5) +\n  tm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5)\n\n\n\n\n\n\n\nNote\n\n\n\nThe grid has been generated correctly because:\n\nIt covers exactly the whole country of Singapore.\nLooking at the scale, there are 10 hexagons within a 5 km length. This means each hexagon has an apothem of 250m, as expected."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#fitting-grid-exactly-to-the-region",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#fitting-grid-exactly-to-the-region",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Fitting grid exactly to the region",
    "text": "Fitting grid exactly to the region\nThe grid above has hexagons outside of Singapore bounds. We need to filter the grid such that we are left with only the hexagons that intersect with Singapore boundary.\nWe will use st_intersects() and filter() to filter out the hexagons that intersect Singapore.\n\nsg_honeycomb$n_collisions = lengths(st_intersects(sg_honeycomb, mpsz))\nsg_honeycomb &lt;- filter(sg_honeycomb, n_collisions &gt; 0)\n\nLet’s generate a map again if the cleaning generated our expected result.\n\ntm_shape(sg_honeycomb) +\n  tm_fill(col = \"white\", title = \"Hexagons\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Singapore with honeycomb grid\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5)\n\n\n\n\n\n\n\nImportant\n\n\n\nThere are some tiny islands outside of the Singapore mainland. Although they have no bus stops, we will keep them in the data frame for now as other hexagons also do not have bus stops in them (as they have no red dots inside)."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#adding-an-id-for-each-cell",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#adding-an-id-for-each-cell",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Adding an ID for each cell",
    "text": "Adding an ID for each cell\nNow that we have perfectly fitting hexagon grid, we will assign a HEXAGON_ID for each hexagon to make each cell identifiable for further analysis.\nWe will also remove n_collisions column as we do not need it anymore.\n\nsg_honeycomb = sg_honeycomb %&gt;%\n  mutate(HEXAGON_ID = row_number()) %&gt;%\n  select(, -n_collisions)\nhead(sg_honeycomb)\n\nNow that we have the assigned an ID to each hexagon, we have the desired form of the grid.\n\n\n\n\n\n\nSave point\n\n\n\nLet’s save the honeycomb grid as an rds file so we can reuse it later.\n\nwrite_rds(sg_honeycomb, \"data/rds/sg_honeycomb.rds\")\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nFrom this point forward, we will be using sg_honeycomb to do the analysis. Hence, we can already remove mpsz from the environment.\nBy removing this, we are left with data in our environment that are relevant to the next part of the study.\n\nrm(mpsz)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#importing-the-busstop-data-set",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#importing-the-busstop-data-set",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing the BusStop data set",
    "text": "Importing the BusStop data set\nThe BusStop data set is a in shp format. We can import it by using st_read() from the sf package.\n\nbusstops &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"BusStop\")\n\n\nst_crs(busstops)\n\nThe EPSG value is 9001, which correspond to WGS84. We have to fix the projection by transforming to SVY21with EPSG value of 3414.\n\nbusstops &lt;- st_transform(busstops, crs = 3414)\n\nNext, let’s take a look at the available columns to identify which columns we can use for analysis. We will decide this later after looking at other data sets.\n\nkable(head(busstops))\n\n\n\n\n\n\n\nNote\n\n\n\nFrom this initial look in the data, we will only retain BUS_STOP_N and LOC_DESC as they seem to be the most relevant to the analysis.\n\n\nLet’s do a quick plot to see a visual glimpse of the data.\n\ntmap_style(\"natural\")\ntm_shape(sg_honeycomb) +\n  tm_fill(\"lightgreen\", title = \"Singapore Honeycomb Grid\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Bus Stop Locations in Singapore\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_shape(busstops) +\n  tm_dots(col = \"red\", size = 0.001, title = \"Bus Stops\")\n\nOverlaying the bus stop locations helps us visualize which hexagons contain the bus stops. Some observations are:\n\nSome hexagons have no bus stops, especially islands outside the mainland\nSome hexagons have multiple bus stops. These are most likely from areas with high commuter traffic (e.g. residential, business districts)\n\nWe need to formalize this connections in the data layer.\n\n\n\n\n\n\nImportant\n\n\n\nSome bus stops on the North are outside of the border. These are the bus stops that for bus routes (e.g. CWx, SJE) the cross the border to Johor Bahru in Malaysia 🇲🇾"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#mapping-bus-stop-locations-to-honeycomb-cells",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#mapping-bus-stop-locations-to-honeycomb-cells",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Mapping bus stop locations to honeycomb cells",
    "text": "Mapping bus stop locations to honeycomb cells\nNext, we have to figure out which hexagons contains each point corresponding to bus stop locations.\nThis can be done using st_intersection(). We will also drop the geometry here using st_drop_geometry() and make the data spatial as the resulting mapping will be used as the connector to join the aspatial bus commuter data with the hexagons.\n\nbusstop_cells &lt;- st_intersection(busstops, sg_honeycomb) %&gt;%\n  st_drop_geometry() %&gt;%\n  select(c(BUS_STOP_N, LOC_DESC, HEXAGON_ID)) %&gt;%\n  rename(BUS_STOP_ID = BUS_STOP_N) %&gt;%\n  rename(BUS_STOP_NAME = LOC_DESC)\nkable(head(busstop_cells))\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that busstop_cells has 5165 rows while busstops has 5161. The five missing bus stops correspond to those outside of Singapore border noticed in [##Importing the BusStop data set].\n\n\n\n\n\n\n\n\nSave point\n\n\n\nNow that we have the mapping table, let’s save this as an rds file so we can reuse it later.\n\nwrite_rds(busstop_cells, \"data/rds/busstop_cells.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#importing-bus-commuter-data",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#importing-bus-commuter-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing bus commuter data",
    "text": "Importing bus commuter data\nWe will use the Passenger Volume By Origin Destination Bus Stops data set to provide data about bus commuter volumes.\nThese files are in csv file format so we will use read_csv to import them.\n\n\n\n\n\n\nImportant\n\n\n\nWe aim to analyze data for 3 months. However, we will focus on the October 2023 for now to simplify the steps.\n\n\n\nodbus202310 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nglimpse(odbus202310)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#converting-relevant-columns-to-factor-data-type",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#converting-relevant-columns-to-factor-data-type",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Converting relevant columns to factor data type",
    "text": "Converting relevant columns to factor data type\nThe columns we are interested in are:\n\nORIGIN_PT_CODE\nDAY_TYPE\nTIME_PER_HOUR (will not be converted to factor so we can do arithmetic operations)\n\nThese are data with finite values with these corresponding number of values:\n\n\n\n\n\n\n\n\nColumn Name\nNumber of Values\nDescription\n\n\n\n\nORIGIN_PT_CODE\n5156\nCorresponding to number of rows in busstop_cells\n\n\nDAY_TYPE\n2\nWeekday, Weekdays/Holidays\n\n\nTIME_PER_HOUR\n24\ncorresponding to hours per day\n\n\nNumber of hexagons *for reference\n4131\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen we are done with this processing, we expect at most 247,488 rows in the data frame after [##Aggregating trips by origin bus stop, hour of day, day type].\n\\[\n5156 \\times 2 \\times 24 = 247,488\n\\]\nOn the other hand, after aggregating on a hexagon level, we expect at most 198,288 rows in the final output.\n\\[\n4131 \\times 2 \\times 24 = 198,288\n\\]\n\n\n\nodbus202310$ORIGIN_PT_CODE &lt;- as.factor(odbus202310$ORIGIN_PT_CODE)\nodbus202310$DAY_TYPE &lt;- as.factor(odbus202310$DAY_TYPE)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#aggregating-trips-by-origin-bus-stop-day-type-hour-of-day",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#aggregating-trips-by-origin-bus-stop-day-type-hour-of-day",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Aggregating trips by origin bus stop, day type, hour of day",
    "text": "Aggregating trips by origin bus stop, day type, hour of day\nTo do this aggregation, we need to:\n\nGroup data by ORIGIN_PT_CODE, DAY_TYPE, and TIME_PER_HOUR\nAggregate the TOTAL_TRIPS by getting the sum of said value for each group\nRename ORIGIN_PT_CODE to BUS_STOP_ID to have the same column name as busstop_cells.\nRename TIME_PER_HOUR to HOUR_OF_DAY to be more descriptive of its purpose.\n\nThis can be achieved by using group_by(), summarise(), and rename().\n\nhourly_from_bs202310 &lt;-\n  odbus202310 %&gt;%\n  group_by(\n    ORIGIN_PT_CODE,\n    DAY_TYPE,\n    TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  rename(BUS_STOP_ID = ORIGIN_PT_CODE) %&gt;%\n  rename(HOUR_OF_DAY = TIME_PER_HOUR)\nkable(hourly_from_bs202310[15:50,])\n\n\n\n\n\n\n\nSave point\n\n\n\nWe will save hourly_from_bs202310 as this processed data will be useful later on.\n\nwrite_rds(hourly_from_bs202310, \"data/rds/hourly_from_bs202310.rds\")\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWe also do not need odbus202310 anymore so we can remove it from the environment.\n\nrm(odbus202310)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#joining-aspatial-data",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#joining-aspatial-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Joining aspatial data",
    "text": "Joining aspatial data\nAs the goal of this study is to analyze data based on the hexagons, we need to do further processing on hourly_from_bs202310 to aggregate the data based on hexagons.\nTo do that, we will first do a left_join() of busstop_cells to hourly_from_bs202310. This will add information on which cell the bus stops belong to. We will also apply unique() to the resulting data set get rid of duplicate information.\n\nhourly_from_hex202310 &lt;-\n  left_join(\n    hourly_from_bs202310,\n    busstop_cells\n  )\nglimpse(hourly_from_hex202310)\n\nThis is a strange result as hourly_from_hex202310 has more number of rows than hourly_from_bs202310 (191176 vs 190551). The most plausible explanation is that there are columns with NA.\n\nhourly_from_hex202310[\n  rowSums(is.na(hourly_from_hex202310)) &gt; 0,\n  ] %&gt;%\n  head()\n\nThere are rows without HEXAGON_ID. This means that there are bus stops in hourly_from_hex202310 that are not in busstop_cells. As these missing bus stops do not have spatial data, we can remove these rows as we cannot do spatial analysis without it.\n\nhourly_from_hex202310 &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(!is.na(HEXAGON_ID))\nglimpse(hourly_from_hex202310)\n\n\n\n\n\n\n\nNote\n\n\n\nWe could have also used inner_join instead of left_join. However, we did not have enough information to expect that there are bus stops without spatial data."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#aggregating-trips-by-hexagon_id-day-type-hour-of-day",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#aggregating-trips-by-hexagon_id-day-type-hour-of-day",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Aggregating trips by hexagon_id, , day type, hour of day",
    "text": "Aggregating trips by hexagon_id, , day type, hour of day\nFollowing the same method as in Aggregating trips by origin bus stop, day type, hour of day, we will aggregate the data by HEXAGON_ID, DAY_TYPE, and TIME_PER_HOUR.\n\nhourly_from_hex202310 &lt;-\n  hourly_from_hex202310 %&gt;%\n  group_by(\n    HEXAGON_ID,\n    DAY_TYPE,\n    HOUR_OF_DAY) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nkable(head(hourly_from_hex202310, n = 30))\n\n\n\n\n\n\n\nSave point\n\n\n\nWe will save hourly_from_hex202310 as this processed data will be useful later on.\n\nwrite_rds(hourly_from_hex202310, \"data/rds/hourly_from_hex202310.rds\")\n\n\n\nAs we do not need hourly_from_bs202310 anymore, we can also remove it from the environment.\n\nrm(hourly_from_bs202310)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekday-morning-peak-6---9am",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekday-morning-peak-6---9am",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekday morning peak (6 - 9am)",
    "text": "Weekday morning peak (6 - 9am)\nFollowing the methodology above, we will first filter and aggregate trip data by BUS_STOP_ID\n\nweekday_am &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 6 &\n           HOUR_OF_DAY &lt; 9) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekday_am)\n\nNext storing them in a column in bus_peaks_hc202310 via left_join(). We will also rename TRIPS to WEEKDAY_AM_TRIPS for better identification.\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekday_am) %&gt;%\n  rename(WEEKDAY_AM_TRIPS = TRIPS)\nglimpse(bus_peaks_hc202310)\n\nWe can see that WEEKDAY_AM_TRIPS is NA for some rows. We will set these to 0 for consistency with the data type dbl.\n\nbus_peaks_hc202310$WEEKDAY_AM_TRIPS[is.na(bus_peaks_hc202310$WEEKDAY_AM_TRIPS)] &lt;- 0\nsummary(bus_peaks_hc202310$WEEKDAY_AM_TRIPS)\n\nThe median of WEEKDAY_AM_TRIPS is 0. This is problematic as this heavily skews the data. Let’s revert the NA values for hexagons without bus stops as counting the bus trips started in those areas does not make sense anyway.\n\nbus_peaks_hc202310$WEEKDAY_AM_TRIPS[bus_peaks_hc202310$NUM_BUS_STOPS == 0] &lt;- NA\nsummary(bus_peaks_hc202310$WEEKDAY_AM_TRIPS)\n\nThe data distribution is much less skewed now. Let’s have a peek at the data again.\n\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_am as the data it has is already in bus_peaks_hc202310.\n\nrm(weekday_am)\n\n\n\nWe can proceed to applying the same for the other peak times. I won’t go into detail of each step."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekday-evening-peak-5---8pm",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekday-evening-peak-5---8pm",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekday evening peak (5 - 8pm)",
    "text": "Weekday evening peak (5 - 8pm)\n\nweekday_pm &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 17 &\n           HOUR_OF_DAY &lt; 20) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekday_pm)\n\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekday_pm) %&gt;%\n  rename(WEEKDAY_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202310$WEEKDAY_PM_TRIPS[\n  bus_peaks_hc202310$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202310$WEEKDAY_PM_TRIPS)\n  ] &lt;- 0\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_pm as the data it has is already in bus_peaks_hc202310.\n\nrm(weekday_pm)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekendholiday-morning-peak-11am---2pm",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekendholiday-morning-peak-11am---2pm",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekend/holiday morning peak (11am - 2pm)",
    "text": "Weekend/holiday morning peak (11am - 2pm)\n\nweekend_am &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 11 &\n           HOUR_OF_DAY &lt; 14) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekend_am)\n\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekend_am) %&gt;%\n  rename(WEEKEND_AM_TRIPS = TRIPS)\n\nbus_peaks_hc202310$WEEKEND_AM_TRIPS[\n  bus_peaks_hc202310$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202310$WEEKEND_AM_TRIPS)\n  ] &lt;- 0\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_pm as the data it has is already in bus_peaks_hc202310.\n\nrm(weekend_am)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekendholiday-evening-peak-4---7pm",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1A.html#weekendholiday-evening-peak-4---7pm",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Weekend/holiday evening peak (4 - 7pm)",
    "text": "Weekend/holiday evening peak (4 - 7pm)\n\nweekend_pm &lt;-\n  hourly_from_hex202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(HOUR_OF_DAY &gt;= 16 &\n           HOUR_OF_DAY &lt; 19) %&gt;%\n  group_by(HEXAGON_ID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nglimpse(weekend_pm)\n\n\nbus_peaks_hc202310 &lt;-\n  left_join(bus_peaks_hc202310, weekend_pm) %&gt;%\n  rename(WEEKEND_PM_TRIPS = TRIPS)\n\nbus_peaks_hc202310$WEEKEND_PM_TRIPS[\n  bus_peaks_hc202310$NUM_BUS_STOPS &gt; 0 &\n  is.na(bus_peaks_hc202310$WEEKEND_PM_TRIPS)\n  ] &lt;- 0\nkable(bus_peaks_hc202310[121:130,])\n\n\n\n\n\n\n\nCaution\n\n\n\nNow that we have the correct data, we can remove weekday_pm as the data it has is already in bus_peaks_hc202310.\n\nrm(weekend_pm)\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\nWe will save bus_peaks_hc202310 as this contains data we need for spatial analysis.\n\nwrite_rds(bus_peaks_hc202310, \"data/rds/bus_peaks_hc202310.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#importing-the-singapore-boundary-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#importing-the-singapore-boundary-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing the Singapore boundary data",
    "text": "Importing the Singapore boundary data\nWe will use the Master Plan 2019 Subzone Boundary (Web) data set that has been used in class. This is a shp file, that we will import by using st_read(). We will use this to ensure that the bus stops are within Singapore.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Take-home_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nCorrecting the projection\n\n\n\nThis data frame using the global GPS standard projection, WGS84. We need to convert this to SVY21 that is more appropriate for Singapore 🇸🇬 context.\n\nmpsz &lt;- mpsz %&gt;% st_transform(crs=3414)\n\n\n\nNow that the data frame has the correct projection, let’s do a quick plot to visually check if we have the boundaries that we need.\n\n\nShow the code\ntmap_style(\"natural\")\ntm_shape(mpsz) +\n  tm_fill(\"lightgreen\", title = \"Singapore Boundary\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Map of Singapore\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#generating-hexagons-from-singapore-boundary-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#generating-hexagons-from-singapore-boundary-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Generating hexagons from Singapore boundary data",
    "text": "Generating hexagons from Singapore boundary data\nFollowing the steps from https://urbandatapalette.com/post/2021-08-tessellation-sf/, we will use st_make_grid() to generate the hexagons for analysis.\nWe need to provide a value for cellsize in the function, which is defined as “for hexagonal cells the distance between opposite edges”. We need to create hexagons whose apothem is 250m, resulting in a cell size of 500m.\n\n\n\n\n\n\nWhy is cell size 500 m?\n\n\n\n\n\nApothem is defined as the perpendicular from the center of a regular polygon to one of the sides.\nThe specification is this study requires hexagons to be 250 m from the center of the hexagon to the center of one of it’s edge.\n\n\n\n\n\nAs such, this corresponds to the length of 2 opposite apothems, which is 500 m.\nThe edge length is not the same as apothem. It is 288.675m.\n\\[\n250m/cos(30) = 288.675m\n\\]\n\n\n\nWe will use the mpsz data to ensure that the honeycomb grid perfectly covers the Singapore boundaries\n\nhoneycomb &lt;-\n  st_make_grid(mpsz,\n               cellsize = 500,\n               what = \"polygon\",\n               square = FALSE) %&gt;%\n  st_sf()\n\n\n\n\n\n\n\nWe have to use st_sf() to convert the result to a data frame that can be used for the succeeding steps.\n\n\n\nChecking the generated hexagons reveals that it covers all the bus stops.\n\n\nShow the code\ntm_shape(honeycomb) +\n  tm_fill(col = \"white\", title = \"Hexagons\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Singapore with honeycomb grid\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2, bg.color = \"white\", bg.alpha = 0.5) +\n  tm_scale_bar(bg.color = \"white\", bg.alpha = 0.5) +\n  tm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5) +\n  tm_shape(busstops) +\n  tm_dots(col = \"red\", size = 0.005, title = \"Bus Stops\")\n\n\n\n\n\n\n\n\n\n\n\nChecking the scale reveals that the generated hexagons are of the expected size, 500 m from one edge to the opposite edge as there are 10 hexagons within a 5 km distance.\n\n\n\n\n\n\n\n\n\nAbout those points outside Singapore\n\n\n\n\n\nThe map shows that there are bus stops in our data set that our outside Singapore bounds (green area). We can remove these points from our busstops data by following the filtering steps from https://urbandatapalette.com/post/2021-08-tessellation-sf/.\nWe will st_intersects() to see which points in busstops intersect with mpsz, and filter those that intersect.\n\nbusstops$n_collisions = lengths(st_intersects(busstops, mpsz))\nbusstops &lt;-\n  filter(busstops, n_collisions &gt; 0) %&gt;%\n  select(, -n_collisions) # Remove n_collisions as we do not need it anymore\n\nPlotting again shows that all bus stops are now within Singapore bounds.\n\n\nShow the code\ntm_shape(honeycomb) +\n  tm_fill(col = \"white\", title = \"Hexagons\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Honeycomb grid without bus stops outside of Singapore\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2, bg.color = \"white\", bg.alpha = 0.5) +\n  tm_scale_bar(bg.color = \"white\", bg.alpha = 0.5) +\n  tm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5) +\n  tm_shape(busstops) +\n  tm_dots(col = \"red\", size = 0.005, title = \"Bus Stops\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#filtering-hexagons-with-bus-stops",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#filtering-hexagons-with-bus-stops",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Filtering hexagons with bus stops",
    "text": "Filtering hexagons with bus stops\nThe honeycomb grid generated from Generating hexagons from Singapore boundary data need to be filtered such that the hexagons remaining correspond to only those with bus stops.\nWe can do this by following the filtering steps from https://urbandatapalette.com/post/2021-08-tessellation-sf/. We will use st_intersects() to identify which hexagons intersect with bus stop locations.\n\nhoneycomb$n_collisions = lengths(st_intersects(honeycomb, busstops))\nhoneycomb &lt;- filter(honeycomb, n_collisions &gt; 0)\n\nLet’s generate the map again to check if we have the hexagons that correspond to bus stop locations.\n\n\nShow the code\ntm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5) +\n  tm_shape(honeycomb) +\n  tm_fill(col = \"white\", title = \"Hexagons\", alpha = 1) +\n  tm_borders(alpha = 0.2) +\n  tm_layout(main.title = \"Honeycomb grid corresponding to Singapore bus stops\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2, bg.color = \"white\", bg.alpha = 0.5) +\n  tm_scale_bar(bg.color = \"white\", bg.alpha = 0.5) +\n  tm_shape(busstops) +\n  tm_dots(col = \"red\", size = 0.001, title = \"Bus Stops\") +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#assigning-ids-to-each-hexagon",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#assigning-ids-to-each-hexagon",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Assigning ids to each hexagon",
    "text": "Assigning ids to each hexagon\nHere is the structure of our honeycomb data:\n\nkable(head(honeycomb, n=3))\n\n\n\n\ngeometry\nn_collisions\n\n\n\n\nPOLYGON ((3917.538 28017.41…\n1\n\n\nPOLYGON ((4417.538 30615.49…\n1\n\n\nPOLYGON ((4667.538 28450.43…\n2\n\n\n\n\n\n\n\n\n\n\n\nRemove n-collisions\n\n\n\n\n\nWe do not need n-collisions anymore so we can remove it.\n\nhoneycomb &lt;- honeycomb %&gt;% select(, -n_collisions)\n\n\n\n\nThis data is still incomplete as we need to associate the hexagons to aspatial data, which is critical to the next steps in our data wrangling.\nFor this purpose, we will assign HEX_ID with format H0000.\n\nhoneycomb$HEX_ID = sprintf(\"H%04d\", seq_len(nrow(honeycomb)))\nkable(head(honeycomb))\n\n\n\n\ngeometry\nHEX_ID\n\n\n\n\nPOLYGON ((3917.538 28017.41…\nH0001\n\n\nPOLYGON ((4417.538 30615.49…\nH0002\n\n\nPOLYGON ((4667.538 28450.43…\nH0003\n\n\nPOLYGON ((4667.538 30182.48…\nH0004\n\n\nPOLYGON ((4667.538 31048.5,…\nH0005\n\n\nPOLYGON ((4917.538 28883.44…\nH0006\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\n\n\nhoneycomb is the geometry that we will use for analysis. It will be used for tasks such as identifying neighbors and calculating spatial weights.\nIs it also one of the Goal data sets we need. Hence, we will save it.\n\nwrite_rds(honeycomb, \"data/rds/honeycomb202310.rds\")\n\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nWe do not need mpsz anymore as we have generated hexagons already. For further analysis, we will overlay the hexagons to the Singapore map with tmap_mode(\"plot\") to use interactive maps for closer inspection.\n\nrm(mpsz)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#importing-the-data-set",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#importing-the-data-set",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Importing the data set",
    "text": "Importing the data set\nThe data set is an aspatial data in csv format so we will use read_csv() to import the data.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nkable(head(odbus))\n\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR_MONTH\nDAY_TYPE\nTIME_PER_HOUR\nPT_TYPE\nORIGIN_PT_CODE\nDESTINATION_PT_CODE\nTOTAL_TRIPS\n\n\n\n\n2023-10\nWEEKENDS/HOLIDAY\n16\nBUS\n04168\n10051\n3\n\n\n2023-10\nWEEKDAY\n16\nBUS\n04168\n10051\n5\n\n\n2023-10\nWEEKENDS/HOLIDAY\n14\nBUS\n80119\n90079\n3\n\n\n2023-10\nWEEKDAY\n14\nBUS\n80119\n90079\n5\n\n\n2023-10\nWEEKDAY\n17\nBUS\n44069\n17229\n4\n\n\n2023-10\nWEEKENDS/HOLIDAY\n17\nBUS\n20281\n20141\n1\n\n\n\n\n\n\n\n\n\n\n\nThe relevant columns for our data study are DAY_TYPE, TIME_PER_HOUR, ORIGIN_PT_CODE, TOTAL_TRIPS\nWe do not need the DESTINATION_PT_CODE as we are only interested on when passengers get on the bus.\nFurthermore, the ORIGIN_PT_CODE can be correlated to the BUS_STOP_N column of busstops data.\n\n\n\n\n\n\n\n\n\nRecap of busstops data\n\n\n\n\n\n\nkable(head(busstops))\n\n\n\n\n\n\n\n\n\n\nBUS_STOP_N\nBUS_ROOF_N\nLOC_DESC\ngeometry\n\n\n\n\n22069\nB06\nOPP CEVA LOGISTICS\nPOINT (13576.31 32883.65)\n\n\n32071\nB23\nAFT TRACK 13\nPOINT (13228.59 44206.38)\n\n\n44331\nB01\nBLK 239\nPOINT (21045.1 40242.08)\n\n\n96081\nB05\nGRACE INDEPENDENT CH\nPOINT (41603.76 35413.11)\n\n\n11561\nB05\nBLK 166\nPOINT (24568.74 30391.85)\n\n\n66191\nB03\nAFT CORFE PL\nPOINT (30951.58 38079.61)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#cleaning-the-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#cleaning-the-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Cleaning the data",
    "text": "Cleaning the data\nBefore going deep in the wrangling, we will clean up the data so that we are left with a lightweight data set that R can process more easily. We will retain and rename columns below to make them more understandable and easier to join with other data sets.\n\nDAY_TYPE\nTIME_PER_HOUR -&gt; HOUR_OF_DAY\nORIGIN_PT_CODE -&gt; BUS_STOP_N\nTOTAL_TRIPS -&gt; TRIPS\n\nWe will also rename the columns to make them more understandable and will make joining with other data sets easier.\n\ntrips &lt;- odbus %&gt;%\n  select(c(ORIGIN_PT_CODE, DAY_TYPE, TIME_PER_HOUR, TOTAL_TRIPS)) %&gt;%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) %&gt;%\n  rename(HOUR_OF_DAY = TIME_PER_HOUR) %&gt;%\n  rename(TRIPS = TOTAL_TRIPS)\nkable(head(trips))\n\n\n\n\nBUS_STOP_N\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\n\n\n\n\n04168\nWEEKENDS/HOLIDAY\n16\n3\n\n\n04168\nWEEKDAY\n16\n5\n\n\n80119\nWEEKENDS/HOLIDAY\n14\n3\n\n\n80119\nWEEKDAY\n14\n5\n\n\n44069\nWEEKDAY\n17\n4\n\n\n20281\nWEEKENDS/HOLIDAY\n17\n1\n\n\n\n\n\n\n\n\n\n\n\nselect() is used to select the columns we need.\nrename() is used to rename the columns.\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nWe do not need odbus anymore as we will be working with the more lightweight trips from this point on.\n\nrm(odbus)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#mapping-the-bus-stops-to-hexagon",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#mapping-the-bus-stops-to-hexagon",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Mapping the bus stops to hexagon",
    "text": "Mapping the bus stops to hexagon\nIn Filtering hexagons with bus stops we were able to overlay the bus locations to our generated hexagon. While this is enough for visualization, it is not enough for the rest of the data processing we need.\nFrom Cleaning the data, we have the BUS_STOP_N in the that we can use to associate with busstops.\nWe need to create an aspatial table that contain BUS_STOP_N and HEX_ID of the hexagon containing them. We will use st_intersection().\n\n\n\n\n\n\nWhy aspatial?\n\n\n\n\n\nWe want to use generate a simple mapping here as this table will serve as a “glue” between the other aspatial data sets and our geospatial data, honeycomb.\n\n\n\n\nbs_hex &lt;- st_intersection(busstops, honeycomb) %&gt;%\n  st_drop_geometry() %&gt;%\n  select(c(BUS_STOP_N, HEX_ID))\nkable(head(bs_hex))\n\n\n\n\n\nBUS_STOP_N\nHEX_ID\n\n\n\n\n3265\n25059\nH0001\n\n\n254\n26379\nH0002\n\n\n2566\n25751\nH0003\n\n\n2893\n25761\nH0003\n\n\n4199\n26389\nH0004\n\n\n2399\n26369\nH0005\n\n\n\n\n\n\n\n\n\n\n\nst_intersection() - find which hexagon contains the bus stop\nst_drop_geometry() - to make data aspatial\nselect() - to retain only the relevant columns: BUS_STOP_N and HEX_ID"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#adding-hex_id-information-to-bus-trips-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#adding-hex_id-information-to-bus-trips-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Adding HEX_ID information to bus trips data",
    "text": "Adding HEX_ID information to bus trips data\nTo achieve our goal of having the hourly # of bus trips per location, we need to add HEX_ID to trips data. This is so we can answer, how many bus trip originate from a certain hexagon?\nTo do this, we will do an inner_join() to join the trips data with bs_hex.\n\n\n\n\n\n\nWhy `inner_join()` instead of `left_join()`?\n\n\n\n\n\nWe will use inner_join as there are BUS_STOP_N values in trips data that are not in bs_hex.\n\ntrips$BUS_STOP_N[!(trips$BUS_STOP_N %in% bs_hex$BUS_STOP_N)] %&gt;%\n  unique() %&gt;% length()\n\n[1] 63\n\n\nThere are 57 bus stops in trips that are not in bs_hex. 5 of this can be attributed the bus stops we removed in About those points outside Singapore. Others may be due to the BusStops data set not having complete information.\nNonetheless, we have to remove these bus stops from our analysis as we do not have geospatial data to associate to the hexagons.\nTherefore, we will use inner_join to keep only the observations in trips with the matching bus stops in bs_hex.\n\n\n\n\ntrips &lt;- inner_join(trips, bs_hex)\nkable(head(trips))\n\n\n\n\nBUS_STOP_N\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\nHEX_ID\n\n\n\n\n04168\nWEEKENDS/HOLIDAY\n16\n3\nH0955\n\n\n04168\nWEEKDAY\n16\n5\nH0955\n\n\n80119\nWEEKENDS/HOLIDAY\n14\n3\nH1102\n\n\n80119\nWEEKDAY\n14\n5\nH1102\n\n\n44069\nWEEKDAY\n17\n4\nH0410\n\n\n20281\nWEEKENDS/HOLIDAY\n17\n1\nH0388"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#aggregating-trips-based-on-hex_id",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#aggregating-trips-based-on-hex_id",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Aggregating TRIPS based on HEX_ID",
    "text": "Aggregating TRIPS based on HEX_ID\nNext, we will add the TRIPS for all the bus stops within a hexagon. We will group via HEX_ID, DAY_TYPE, and HOUR_OF_DAY.\n\ntrips &lt;- trips %&gt;%\n  group_by(\n    HEX_ID,\n    DAY_TYPE,\n    HOUR_OF_DAY) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nkable(head(trips))\n\n\n\n\nHEX_ID\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\nWEEKDAY\n7\n74\n\n\nH0001\nWEEKDAY\n8\n19\n\n\nH0001\nWEEKDAY\n9\n10\n\n\nH0001\nWEEKDAY\n10\n7\n\n\nH0001\nWEEKDAY\n16\n26\n\n\nH0001\nWEEKDAY\n17\n122\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\n\n\ntrips was processed from Passenger Volume By Origin Destination Bus Stops, which has almost 6 million observations.\nWe now have a more lightweight dataset with almost 60,000 observations, which is about 100x smaller.\nLet’s save this data as an rds file so we don’t need to reprocess again later on.\n\nwrite_rds(trips, \"data/rds/trips202310.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#transforming-the-september-and-october-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#transforming-the-september-and-october-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Transforming the September and October data",
    "text": "Transforming the September and October data\nNow that odbus202308 is in the form we want, we will apply the same methods for the September and October data.\n\n\n\n\n\n\nThis will do a quick run-through of the code. To understand the thought process, please read from Extracting Hourly # of Bus Trips Originating from Hexagons.\n\n\n\n\nSeptember\n\n\n\n\n\n\nImporting the data set\n\n\n\n\n\nRefer to Importing the data set for context behind this code.\n\nodbus202309 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202309.csv\")\nkable(head(odbus202309))\n\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR_MONTH\nDAY_TYPE\nTIME_PER_HOUR\nPT_TYPE\nORIGIN_PT_CODE\nDESTINATION_PT_CODE\nTOTAL_TRIPS\n\n\n\n\n2023-09\nWEEKENDS/HOLIDAY\n17\nBUS\n24499\n22221\n1\n\n\n2023-09\nWEEKENDS/HOLIDAY\n10\nBUS\n65239\n65159\n9\n\n\n2023-09\nWEEKDAY\n10\nBUS\n65239\n65159\n2\n\n\n2023-09\nWEEKDAY\n7\nBUS\n23519\n23311\n6\n\n\n2023-09\nWEEKENDS/HOLIDAY\n7\nBUS\n23519\n23311\n1\n\n\n2023-09\nWEEKENDS/HOLIDAY\n11\nBUS\n52509\n42041\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCleaning the data\n\n\n\n\n\nRefer to Cleaning the data for context behind this code.\n\ntrips202309 &lt;- odbus202309 %&gt;%\n  select(c(ORIGIN_PT_CODE, DAY_TYPE, TIME_PER_HOUR, TOTAL_TRIPS)) %&gt;%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) %&gt;%\n  rename(HOUR_OF_DAY = TIME_PER_HOUR) %&gt;%\n  rename(TRIPS = TOTAL_TRIPS)\nkable(head(odbus202309))\n\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR_MONTH\nDAY_TYPE\nTIME_PER_HOUR\nPT_TYPE\nORIGIN_PT_CODE\nDESTINATION_PT_CODE\nTOTAL_TRIPS\n\n\n\n\n2023-09\nWEEKENDS/HOLIDAY\n17\nBUS\n24499\n22221\n1\n\n\n2023-09\nWEEKENDS/HOLIDAY\n10\nBUS\n65239\n65159\n9\n\n\n2023-09\nWEEKDAY\n10\nBUS\n65239\n65159\n2\n\n\n2023-09\nWEEKDAY\n7\nBUS\n23519\n23311\n6\n\n\n2023-09\nWEEKENDS/HOLIDAY\n7\nBUS\n23519\n23311\n1\n\n\n2023-09\nWEEKENDS/HOLIDAY\n11\nBUS\n52509\n42041\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nWe do not need odbus202309 anymore as we will be working with the more lightweight trips202309 from this point on.\n\nrm(odbus202309)\n\n\n\n\n\n\n\n\n\n\nAdding HEX_ID information to trips data\n\n\n\n\n\nRefer to [Adding HEX_ID information to trips data] for context behind this code.\n\ntrips202309 &lt;- inner_join(trips202309, bs_hex)\nkable(head(trips202309))\n\n\n\n\nBUS_STOP_N\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\nHEX_ID\n\n\n\n\n24499\nWEEKENDS/HOLIDAY\n17\n1\nH0106\n\n\n65239\nWEEKENDS/HOLIDAY\n10\n9\nH1304\n\n\n65239\nWEEKDAY\n10\n2\nH1304\n\n\n23519\nWEEKDAY\n7\n6\nH0116\n\n\n23519\nWEEKENDS/HOLIDAY\n7\n1\nH0116\n\n\n52509\nWEEKENDS/HOLIDAY\n11\n2\nH0925\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAggregating TRIPS based on HEX_ID\n\n\n\n\n\nRefer to [Aggregating TRIPS based on HEX_ID] for context behind this code.\n\ntrips202309 &lt;- trips202309 %&gt;%\n  group_by(\n    HEX_ID,\n    DAY_TYPE,\n    HOUR_OF_DAY) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nkable(head(trips202309))\n\n\n\n\nHEX_ID\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\nWEEKDAY\n7\n58\n\n\nH0001\nWEEKDAY\n8\n22\n\n\nH0001\nWEEKDAY\n9\n11\n\n\nH0001\nWEEKDAY\n10\n5\n\n\nH0001\nWEEKDAY\n16\n57\n\n\nH0001\nWEEKDAY\n17\n97\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\n\n\n\nwrite_rds(trips202309, \"data/rds/trips202309.rds\")\n\n\n\n\n\n\nOctober\n\n\n\n\n\n\nImporting the data set\n\n\n\n\n\nRefer to Importing the data set for context behind this code.\n\nodbus202310 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\nkable(head(odbus202310))\n\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR_MONTH\nDAY_TYPE\nTIME_PER_HOUR\nPT_TYPE\nORIGIN_PT_CODE\nDESTINATION_PT_CODE\nTOTAL_TRIPS\n\n\n\n\n2023-10\nWEEKENDS/HOLIDAY\n16\nBUS\n04168\n10051\n3\n\n\n2023-10\nWEEKDAY\n16\nBUS\n04168\n10051\n5\n\n\n2023-10\nWEEKENDS/HOLIDAY\n14\nBUS\n80119\n90079\n3\n\n\n2023-10\nWEEKDAY\n14\nBUS\n80119\n90079\n5\n\n\n2023-10\nWEEKDAY\n17\nBUS\n44069\n17229\n4\n\n\n2023-10\nWEEKENDS/HOLIDAY\n17\nBUS\n20281\n20141\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCleaning the data\n\n\n\n\n\nRefer to Cleaning the data for context behind this code.\n\ntrips202310 &lt;- odbus202310 %&gt;%\n  select(c(ORIGIN_PT_CODE, DAY_TYPE, TIME_PER_HOUR, TOTAL_TRIPS)) %&gt;%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) %&gt;%\n  rename(HOUR_OF_DAY = TIME_PER_HOUR) %&gt;%\n  rename(TRIPS = TOTAL_TRIPS)\nkable(head(odbus202310))\n\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR_MONTH\nDAY_TYPE\nTIME_PER_HOUR\nPT_TYPE\nORIGIN_PT_CODE\nDESTINATION_PT_CODE\nTOTAL_TRIPS\n\n\n\n\n2023-10\nWEEKENDS/HOLIDAY\n16\nBUS\n04168\n10051\n3\n\n\n2023-10\nWEEKDAY\n16\nBUS\n04168\n10051\n5\n\n\n2023-10\nWEEKENDS/HOLIDAY\n14\nBUS\n80119\n90079\n3\n\n\n2023-10\nWEEKDAY\n14\nBUS\n80119\n90079\n5\n\n\n2023-10\nWEEKDAY\n17\nBUS\n44069\n17229\n4\n\n\n2023-10\nWEEKENDS/HOLIDAY\n17\nBUS\n20281\n20141\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nWe do not need odbus202310 anymore as we will be working with the more lightweight trips202310 from this point on.\n\nrm(odbus202310)\n\n\n\n\n\n\n\n\n\n\nAdding HEX_ID information to trips data\n\n\n\n\n\nRefer to [Adding HEX_ID information to trips data] for context behind this code.\n\ntrips202310 &lt;- inner_join(trips202310, bs_hex)\nkable(head(trips202310))\n\n\n\n\nBUS_STOP_N\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\nHEX_ID\n\n\n\n\n04168\nWEEKENDS/HOLIDAY\n16\n3\nH0955\n\n\n04168\nWEEKDAY\n16\n5\nH0955\n\n\n80119\nWEEKENDS/HOLIDAY\n14\n3\nH1102\n\n\n80119\nWEEKDAY\n14\n5\nH1102\n\n\n44069\nWEEKDAY\n17\n4\nH0410\n\n\n20281\nWEEKENDS/HOLIDAY\n17\n1\nH0388\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAggregating TRIPS based on HEX_ID\n\n\n\n\n\nRefer to [Aggregating TRIPS based on HEX_ID] for context behind this code.\n\ntrips202310 &lt;- trips202310 %&gt;%\n  group_by(\n    HEX_ID,\n    DAY_TYPE,\n    HOUR_OF_DAY) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\nkable(head(trips202310))\n\n\n\n\nHEX_ID\nDAY_TYPE\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\nWEEKDAY\n7\n74\n\n\nH0001\nWEEKDAY\n8\n19\n\n\nH0001\nWEEKDAY\n9\n10\n\n\nH0001\nWEEKDAY\n10\n7\n\n\nH0001\nWEEKDAY\n16\n26\n\n\nH0001\nWEEKDAY\n17\n122\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\n\n\n\nwrite_rds(trips202310, \"data/rds/trips202310.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#running-the-setup",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#running-the-setup",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Running the setup",
    "text": "Running the setup\nWe will label this code chunk as the setup chunk so the R runs it even after the environment restarts.\n\npacman::p_load(sf, tmap, tidyverse, knitr, sfdep)\ntmap_mode(\"plot\")\ntmap_style(\"natural\")\nset.seed(1234)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#generating-the-combinations",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#generating-the-combinations",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Generating the combinations",
    "text": "Generating the combinations\n\n\n\n\n\n\nHow many combinations are there? The answer is 36,456.\n\n\n\n\n\nTo satisfy the requirement of:\n\nIt must have a row for each combination of HEX_ID (location) and HOUR_OF_DAY (time)\n\nWe need to find out how many such combinations exist.\n\nThere are 1519 hexagons in our honeycomb\nThere are 24 hours in a day\n\nTherefore, there are \\(1519 \\times 24 = 36,456\\) combinations. We will use this value to verify if we have the correct space time cube.\n\n\n\nTo generate the combinations, we will use expand.grid() and for us to provide the list possible values for HEX_ID and HOUR_OF_DAY.\n\ncombos &lt;- expand_grid(\n  HEX_ID = honeycomb$HEX_ID,\n  HOUR_OF_DAY = 0:23\n)\nkable(combos[20:29,])\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\n\n\n\n\nH0001\n19\n\n\nH0001\n20\n\n\nH0001\n21\n\n\nH0001\n22\n\n\nH0001\n23\n\n\nH0002\n0\n\n\nH0002\n1\n\n\nH0002\n2\n\n\nH0002\n3\n\n\nH0002\n4\n\n\n\n\n\ncombos also has 36,456 rows, aligned with our expectations.\n\nnrow(combos)\n\n[1] 36456\n\n\nWith this generated, we can use this as a glue to generate our time series cube."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#splitting-the-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#splitting-the-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Splitting the data",
    "text": "Splitting the data\nAs we want to do separate analysis for weekdays and weekends, we will split the data. We will also remove the DAY_TYPE column as we do not need it anymore. To do this, we have to ungroup() before removing as we use DAY_TYPE as filter.\n\nWeekdayWeekend/Holidays\n\n\n\ntrips_wkdy &lt;- trips %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  ungroup() %&gt;%\n  select(, -DAY_TYPE)\nkable(trips_wkdy[20:29,])\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0002\n16\n257\n\n\nH0002\n17\n159\n\n\nH0002\n18\n62\n\n\nH0002\n19\n42\n\n\nH0002\n20\n28\n\n\nH0002\n21\n2\n\n\nH0002\n22\n2\n\n\nH0003\n6\n44\n\n\nH0003\n7\n69\n\n\nH0003\n8\n72\n\n\n\n\n\n\n\n\ntrips_wknd &lt;- trips %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  ungroup() %&gt;%\n  select(, -DAY_TYPE)\nkable(trips_wknd[20:29,])\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0002\n16\n42\n\n\nH0002\n17\n15\n\n\nH0002\n18\n32\n\n\nH0002\n19\n11\n\n\nH0002\n20\n13\n\n\nH0002\n21\n5\n\n\nH0002\n22\n2\n\n\nH0003\n6\n37\n\n\nH0003\n7\n40\n\n\nH0003\n8\n35\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChecking if split covers the full data\n\n\n\n\n\nLet’s check the total rows in trips_wkdy and trips_wknd add up to the number of rows in trips.\n\nnrow(trips_wkdy) + nrow(trips_wknd) == nrow(trips)\n\n[1] TRUE\n\n\nThere are no lost data so we can proceed to the next step.\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nWe do not need trips anymore as we will be using trips_wkdy and trips_wknd from this point.\n\nrm(trips)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#goal-data-sets",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#goal-data-sets",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Goal data sets",
    "text": "Goal data sets\nTo enable the visualization and analysis in latter part of the study, we need to have the following data sets:\n\nHoneycomb geometry, a tessellation of hexagons covering the bus stops in Singapor\nHourly bus trips started from each hexagon cell\n\n1 for weekend, 1 for weekend/holidays\nRequired columns: HEX_ID, HOUR_OF_DAY, TRIPS\nMust contain geometry of the hexagon\nCan be used to generate a time series cube\n\n\nAs the wrangling process is expected to have a lot of intermediate steps, Save, Load, and Data clear points are available to make our data wrangling more efficient.\n\n\n\n\n\n\nSave point\n\n\n\nThis is where data is written as rds files using write_rds() for important data sets that will be used in later analysis. Examples are:\n\nThe end goal of data wrangling: Hourly bus trips started from each hexagon cell data sets\nCritical outputs of expensive calculations\n\n\n\n\n\n\n\n\n\nLoad point\n\n\n\nThis is where data is loaded from rds files using read_rds(). They were previously generated by the save point.\nTIP: Skip to the load points to progress without running the code above it\n\n\n\n\n\n\n\n\nData clear point\n\n\n\nThis is where data that will not be used anymore are cleared. The data in RStudio environment will pile up and set #| eval: false in code chunks if you want skip the clearing. For example, the code below won’t be run.\n\nmessage &lt;- \"This code chunk executed\""
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#filling-in-the-all-the-combos",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#filling-in-the-all-the-combos",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Filling in the all the combos",
    "text": "Filling in the all the combos\nNow that we have separate data frames for weekday and weekend/holiday, we need to make sure that our data frame as all the combination in combos. We can do that by joining trips_wkxx with combos.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_cube_wkdy &lt;- left_join(combos, trips_wkdy)\nkable(head(trips_cube_wkdy, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\nNA\n\n\nH0001\n1\nNA\n\n\nH0001\n2\nNA\n\n\nH0001\n3\nNA\n\n\nH0001\n4\nNA\n\n\nH0001\n5\nNA\n\n\nH0001\n6\nNA\n\n\nH0001\n7\n74\n\n\nH0001\n8\n19\n\n\nH0001\n9\n10\n\n\nH0001\n10\n7\n\n\nH0001\n11\nNA\n\n\nH0001\n12\nNA\n\n\nH0001\n13\nNA\n\n\nH0001\n14\nNA\n\n\nH0001\n15\nNA\n\n\nH0001\n16\n26\n\n\nH0001\n17\n122\n\n\nH0001\n18\n224\n\n\nH0001\n19\n38\n\n\nH0001\n20\n6\n\n\nH0001\n21\nNA\n\n\nH0001\n22\nNA\n\n\nH0001\n23\nNA\n\n\n\n\n\nCheck if the output has the same rows as combos.\n\nnrow(trips_cube_wkdy) == nrow(combos)\n\n[1] TRUE\n\n\n\n\n\ntrips_cube_wknd &lt;- left_join(combos, trips_wknd)\nkable(head(trips_cube_wknd, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\nNA\n\n\nH0001\n1\nNA\n\n\nH0001\n2\nNA\n\n\nH0001\n3\nNA\n\n\nH0001\n4\nNA\n\n\nH0001\n5\nNA\n\n\nH0001\n6\nNA\n\n\nH0001\n7\n28\n\n\nH0001\n8\n9\n\n\nH0001\n9\n9\n\n\nH0001\n10\n2\n\n\nH0001\n11\nNA\n\n\nH0001\n12\nNA\n\n\nH0001\n13\nNA\n\n\nH0001\n14\nNA\n\n\nH0001\n15\nNA\n\n\nH0001\n16\n3\n\n\nH0001\n17\n21\n\n\nH0001\n18\n18\n\n\nH0001\n19\n14\n\n\nH0001\n20\n1\n\n\nH0001\n21\nNA\n\n\nH0001\n22\nNA\n\n\nH0001\n23\nNA\n\n\n\n\n\nCheck if the output has the same rows as combos.\n\nnrow(trips_cube_wknd) == nrow(combos)\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\nThe data frames generated now passes\n\nIt must have a row for each combination of HEX_ID (location) and HOUR_OF_DAY (time)\n\n\n\n\n\n\n\n\n\n\nThe data frames generated violate\n\nThere are no missing values in TRIPS column\n\nThis is because there are some HOUR_OF_DAY where the value of TRIPS is NA. We need to fill in these missing values.\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nWe do not need trips_wkxx anymore as we will be using trips_cube_wkxx from this point on.\n\nrm(trips_wkdy)\nrm(trips_wknd)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#filling-in-missing-values",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#filling-in-missing-values",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Filling in missing values",
    "text": "Filling in missing values\nLastly, we need to fill in the missing values in TRIPS. This can be done by filtering the rows with NA and setting those to 0.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_cube_wkdy$TRIPS[is.na(trips_cube_wkdy$TRIPS)] &lt;- 0\nkable(head(trips_cube_wkdy, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\n0\n\n\nH0001\n1\n0\n\n\nH0001\n2\n0\n\n\nH0001\n3\n0\n\n\nH0001\n4\n0\n\n\nH0001\n5\n0\n\n\nH0001\n6\n0\n\n\nH0001\n7\n74\n\n\nH0001\n8\n19\n\n\nH0001\n9\n10\n\n\nH0001\n10\n7\n\n\nH0001\n11\n0\n\n\nH0001\n12\n0\n\n\nH0001\n13\n0\n\n\nH0001\n14\n0\n\n\nH0001\n15\n0\n\n\nH0001\n16\n26\n\n\nH0001\n17\n122\n\n\nH0001\n18\n224\n\n\nH0001\n19\n38\n\n\nH0001\n20\n6\n\n\nH0001\n21\n0\n\n\nH0001\n22\n0\n\n\nH0001\n23\n0\n\n\n\n\n\n\n\n\ntrips_cube_wknd$TRIPS[is.na(trips_cube_wknd$TRIPS)] &lt;- 0\nkable(head(trips_cube_wknd, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\n0\n\n\nH0001\n1\n0\n\n\nH0001\n2\n0\n\n\nH0001\n3\n0\n\n\nH0001\n4\n0\n\n\nH0001\n5\n0\n\n\nH0001\n6\n0\n\n\nH0001\n7\n28\n\n\nH0001\n8\n9\n\n\nH0001\n9\n9\n\n\nH0001\n10\n2\n\n\nH0001\n11\n0\n\n\nH0001\n12\n0\n\n\nH0001\n13\n0\n\n\nH0001\n14\n0\n\n\nH0001\n15\n0\n\n\nH0001\n16\n3\n\n\nH0001\n17\n21\n\n\nH0001\n18\n18\n\n\nH0001\n19\n14\n\n\nH0001\n20\n1\n\n\nH0001\n21\n0\n\n\nH0001\n22\n0\n\n\nH0001\n23\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIs our data frame time series cube-friendly? The answer is YES.\n\n\n\n\n\nLet us check of our data frame can be used to create spacetime cubes.\n\nWeekend\n\nspacetime(trips_cube_wkdy, honeycomb,\n          .loc_col = \"HEX_ID\",\n          .time_col = \"HOUR_OF_DAY\") %&gt;%\n  is_spacetime_cube()\n\n[1] TRUE\n\n\n\n\nWeekend/Holiday\n\nspacetime(trips_cube_wknd, honeycomb,\n          .loc_col = \"HEX_ID\",\n          .time_col = \"HOUR_OF_DAY\") %&gt;%\n  is_spacetime_cube()\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\n\n\ntrips_cube_wkxx data is part the Goal data sets we need. Hence, we will save them.\n\nwrite_rds(trips_cube_wkdy, \"data/rds/trips_cube_wkdy202310.rds\")\nwrite_rds(trips_cube_wknd, \"data/rds/trips_cube_wknd202310.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1A.html#processing-the-september-and-october-data",
    "href": "Take-home_Ex1/Take-home_Ex1A.html#processing-the-september-and-october-data",
    "title": "Take Home Exercise 1A: Data Wrangling",
    "section": "Processing the September and October data",
    "text": "Processing the September and October data\nNow that we have data that can be used for creating time series cube, we will apply the same to the other data\n\n\n\n\n\n\nThis will do a quick run-through of the code. To understand the thought process, please read from Generating time series cube-friendly data\n\n\n\n\nSeptember\n\n\n\n\n\n\nLoad point\n\n\n\n\n\nWe can run the rest of the document from this point by loading this data.\n\ntrips202309 &lt;- read_rds(\"data/rds/trips202309.rds\")\nhoneycomb &lt;- read_rds(\"data/rds/honeycomb.rds\")\n\n\n\n\n\n\n\n\n\n\nSplitting the data\n\n\n\n\n\nRefer to Splitting the data for context behind this code.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_wkdy202309 &lt;- trips202309 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  ungroup() %&gt;%\n  select(, -DAY_TYPE)\nkable(trips_wkdy202309[20:29,])\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0002\n16\n220\n\n\nH0002\n17\n139\n\n\nH0002\n18\n43\n\n\nH0002\n19\n64\n\n\nH0002\n20\n32\n\n\nH0002\n21\n15\n\n\nH0002\n22\n4\n\n\nH0003\n6\n35\n\n\nH0003\n7\n51\n\n\nH0003\n8\n64\n\n\n\n\n\n\n\n\ntrips_wknd202309 &lt;- trips202309 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  ungroup() %&gt;%\n  select(, -DAY_TYPE)\nkable(trips_wknd202309[20:29,])\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0002\n16\n16\n\n\nH0002\n17\n28\n\n\nH0002\n18\n21\n\n\nH0002\n19\n19\n\n\nH0002\n20\n14\n\n\nH0002\n21\n1\n\n\nH0003\n6\n39\n\n\nH0003\n7\n30\n\n\nH0003\n8\n29\n\n\nH0003\n9\n18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nRefer to Data clear point for context behind this code.\n\nrm(trips202309)\n\n\n\n\n\n\n\n\n\n\nFilling in all the combos\n\n\n\n\n\nRefer to Filling in all the combos for context behind this code.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_cube_wkdy202309 &lt;- left_join(combos, trips_wkdy202309)\nkable(head(trips_cube_wkdy202309, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\nNA\n\n\nH0001\n1\nNA\n\n\nH0001\n2\nNA\n\n\nH0001\n3\nNA\n\n\nH0001\n4\nNA\n\n\nH0001\n5\nNA\n\n\nH0001\n6\nNA\n\n\nH0001\n7\n58\n\n\nH0001\n8\n22\n\n\nH0001\n9\n11\n\n\nH0001\n10\n5\n\n\nH0001\n11\nNA\n\n\nH0001\n12\nNA\n\n\nH0001\n13\nNA\n\n\nH0001\n14\nNA\n\n\nH0001\n15\nNA\n\n\nH0001\n16\n57\n\n\nH0001\n17\n97\n\n\nH0001\n18\n210\n\n\nH0001\n19\n37\n\n\nH0001\n20\n4\n\n\nH0001\n21\nNA\n\n\nH0001\n22\nNA\n\n\nH0001\n23\nNA\n\n\n\n\n\n\n\n\ntrips_cube_wknd202309 &lt;- left_join(combos, trips_wknd202309)\nkable(head(trips_cube_wknd202309, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\nNA\n\n\nH0001\n1\nNA\n\n\nH0001\n2\nNA\n\n\nH0001\n3\nNA\n\n\nH0001\n4\nNA\n\n\nH0001\n5\nNA\n\n\nH0001\n6\nNA\n\n\nH0001\n7\n18\n\n\nH0001\n8\n13\n\n\nH0001\n9\n7\n\n\nH0001\n10\n2\n\n\nH0001\n11\nNA\n\n\nH0001\n12\nNA\n\n\nH0001\n13\nNA\n\n\nH0001\n14\nNA\n\n\nH0001\n15\nNA\n\n\nH0001\n16\n6\n\n\nH0001\n17\n33\n\n\nH0001\n18\n50\n\n\nH0001\n19\n7\n\n\nH0001\n20\n1\n\n\nH0001\n21\nNA\n\n\nH0001\n22\nNA\n\n\nH0001\n23\nNA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nRefer to Data clear point for context behind this code.\n\nrm(trips_wkdy202309)\nrm(trips_wknd202309)\n\n\n\n\n\n\n\n\n\n\nFilling in missing values\n\n\n\n\n\nRefer to Filling in missing values for context behind this code.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_cube_wkdy202309$TRIPS[is.na(trips_cube_wkdy202309$TRIPS)] &lt;- 0\nkable(head(trips_cube_wkdy202309, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\n0\n\n\nH0001\n1\n0\n\n\nH0001\n2\n0\n\n\nH0001\n3\n0\n\n\nH0001\n4\n0\n\n\nH0001\n5\n0\n\n\nH0001\n6\n0\n\n\nH0001\n7\n58\n\n\nH0001\n8\n22\n\n\nH0001\n9\n11\n\n\nH0001\n10\n5\n\n\nH0001\n11\n0\n\n\nH0001\n12\n0\n\n\nH0001\n13\n0\n\n\nH0001\n14\n0\n\n\nH0001\n15\n0\n\n\nH0001\n16\n57\n\n\nH0001\n17\n97\n\n\nH0001\n18\n210\n\n\nH0001\n19\n37\n\n\nH0001\n20\n4\n\n\nH0001\n21\n0\n\n\nH0001\n22\n0\n\n\nH0001\n23\n0\n\n\n\n\n\n\n\n\ntrips_cube_wknd202309$TRIPS[is.na(trips_cube_wknd202309$TRIPS)] &lt;- 0\nkable(head(trips_cube_wknd202309, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\n0\n\n\nH0001\n1\n0\n\n\nH0001\n2\n0\n\n\nH0001\n3\n0\n\n\nH0001\n4\n0\n\n\nH0001\n5\n0\n\n\nH0001\n6\n0\n\n\nH0001\n7\n18\n\n\nH0001\n8\n13\n\n\nH0001\n9\n7\n\n\nH0001\n10\n2\n\n\nH0001\n11\n0\n\n\nH0001\n12\n0\n\n\nH0001\n13\n0\n\n\nH0001\n14\n0\n\n\nH0001\n15\n0\n\n\nH0001\n16\n6\n\n\nH0001\n17\n33\n\n\nH0001\n18\n50\n\n\nH0001\n19\n7\n\n\nH0001\n20\n1\n\n\nH0001\n21\n0\n\n\nH0001\n22\n0\n\n\nH0001\n23\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\n\n\nRefer to Save point for context behind this code.\n\nwrite_rds(trips_cube_wkdy202308, \"data/rds/trips_cube_wkdy202309.rds\")\nwrite_rds(trips_cube_wknd202308, \"data/rds/trips_cube_wknd202309.rds\")\n\n\n\n\n\n\nOctober\n\n\n\n\n\n\nLoad point\n\n\n\n\n\nWe can run the rest of the document from this point by loading this data.\n\ntrips202310 &lt;- read_rds(\"data/rds/trips202310.rds\")\nhoneycomb &lt;- read_rds(\"data/rds/honeycomb.rds\")\n\n\n\n\n\n\n\n\n\n\nSplitting the data\n\n\n\n\n\nRefer to Splitting the data for context behind this code.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_wkdy202310 &lt;- trips202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  ungroup() %&gt;%\n  select(, -DAY_TYPE)\nkable(trips_wkdy202310[20:29,])\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0002\n16\n257\n\n\nH0002\n17\n159\n\n\nH0002\n18\n62\n\n\nH0002\n19\n42\n\n\nH0002\n20\n28\n\n\nH0002\n21\n2\n\n\nH0002\n22\n2\n\n\nH0003\n6\n44\n\n\nH0003\n7\n69\n\n\nH0003\n8\n72\n\n\n\n\n\n\n\n\ntrips_wknd202310 &lt;- trips202310 %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  ungroup() %&gt;%\n  select(, -DAY_TYPE)\nkable(trips_wknd202310[20:29,])\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0002\n16\n42\n\n\nH0002\n17\n15\n\n\nH0002\n18\n32\n\n\nH0002\n19\n11\n\n\nH0002\n20\n13\n\n\nH0002\n21\n5\n\n\nH0002\n22\n2\n\n\nH0003\n6\n37\n\n\nH0003\n7\n40\n\n\nH0003\n8\n35\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nRefer to Data clear point for context behind this code.\n\nrm(trips202310)\n\n\n\n\n\n\n\n\n\n\nFilling in all the combos\n\n\n\n\n\nRefer to Filling in all the combos for context behind this code.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_cube_wkdy202310 &lt;- left_join(combos, trips_wkdy202310)\nkable(head(trips_cube_wkdy202310, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\nNA\n\n\nH0001\n1\nNA\n\n\nH0001\n2\nNA\n\n\nH0001\n3\nNA\n\n\nH0001\n4\nNA\n\n\nH0001\n5\nNA\n\n\nH0001\n6\nNA\n\n\nH0001\n7\n74\n\n\nH0001\n8\n19\n\n\nH0001\n9\n10\n\n\nH0001\n10\n7\n\n\nH0001\n11\nNA\n\n\nH0001\n12\nNA\n\n\nH0001\n13\nNA\n\n\nH0001\n14\nNA\n\n\nH0001\n15\nNA\n\n\nH0001\n16\n26\n\n\nH0001\n17\n122\n\n\nH0001\n18\n224\n\n\nH0001\n19\n38\n\n\nH0001\n20\n6\n\n\nH0001\n21\nNA\n\n\nH0001\n22\nNA\n\n\nH0001\n23\nNA\n\n\n\n\n\n\n\n\ntrips_cube_wknd202310 &lt;- left_join(combos, trips_wknd202310)\nkable(head(trips_cube_wknd202310, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\nNA\n\n\nH0001\n1\nNA\n\n\nH0001\n2\nNA\n\n\nH0001\n3\nNA\n\n\nH0001\n4\nNA\n\n\nH0001\n5\nNA\n\n\nH0001\n6\nNA\n\n\nH0001\n7\n28\n\n\nH0001\n8\n9\n\n\nH0001\n9\n9\n\n\nH0001\n10\n2\n\n\nH0001\n11\nNA\n\n\nH0001\n12\nNA\n\n\nH0001\n13\nNA\n\n\nH0001\n14\nNA\n\n\nH0001\n15\nNA\n\n\nH0001\n16\n3\n\n\nH0001\n17\n21\n\n\nH0001\n18\n18\n\n\nH0001\n19\n14\n\n\nH0001\n20\n1\n\n\nH0001\n21\nNA\n\n\nH0001\n22\nNA\n\n\nH0001\n23\nNA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData clear point\n\n\n\n\n\nRefer to Data clear point for context behind this code.\n\nrm(trips_wkdy202310)\nrm(trips_wknd202310)\n\n\n\n\n\n\n\n\n\n\nFilling in missing values\n\n\n\n\n\nRefer to Filling in missing values for context behind this code.\n\nWeekdayWeekend/Holiday\n\n\n\ntrips_cube_wkdy202310$TRIPS[is.na(trips_cube_wkdy202310$TRIPS)] &lt;- 0\nkable(head(trips_cube_wkdy202310, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\n0\n\n\nH0001\n1\n0\n\n\nH0001\n2\n0\n\n\nH0001\n3\n0\n\n\nH0001\n4\n0\n\n\nH0001\n5\n0\n\n\nH0001\n6\n0\n\n\nH0001\n7\n74\n\n\nH0001\n8\n19\n\n\nH0001\n9\n10\n\n\nH0001\n10\n7\n\n\nH0001\n11\n0\n\n\nH0001\n12\n0\n\n\nH0001\n13\n0\n\n\nH0001\n14\n0\n\n\nH0001\n15\n0\n\n\nH0001\n16\n26\n\n\nH0001\n17\n122\n\n\nH0001\n18\n224\n\n\nH0001\n19\n38\n\n\nH0001\n20\n6\n\n\nH0001\n21\n0\n\n\nH0001\n22\n0\n\n\nH0001\n23\n0\n\n\n\n\n\n\n\n\ntrips_cube_wknd202310$TRIPS[is.na(trips_cube_wknd202310$TRIPS)] &lt;- 0\nkable(head(trips_cube_wknd202310, n = 24))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n0\n0\n\n\nH0001\n1\n0\n\n\nH0001\n2\n0\n\n\nH0001\n3\n0\n\n\nH0001\n4\n0\n\n\nH0001\n5\n0\n\n\nH0001\n6\n0\n\n\nH0001\n7\n28\n\n\nH0001\n8\n9\n\n\nH0001\n9\n9\n\n\nH0001\n10\n2\n\n\nH0001\n11\n0\n\n\nH0001\n12\n0\n\n\nH0001\n13\n0\n\n\nH0001\n14\n0\n\n\nH0001\n15\n0\n\n\nH0001\n16\n3\n\n\nH0001\n17\n21\n\n\nH0001\n18\n18\n\n\nH0001\n19\n14\n\n\nH0001\n20\n1\n\n\nH0001\n21\n0\n\n\nH0001\n22\n0\n\n\nH0001\n23\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave point\n\n\n\n\n\nRefer to Save point for context behind this code.\n\nwrite_rds(trips_cube_wkdy202308, \"data/rds/trips_cube_wkdy202310.rds\")\nwrite_rds(trips_cube_wknd202308, \"data/rds/trips_cube_wknd202310.rds\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "",
    "text": "We will visualize flow data\n\n\n\n\n\n\nI am running through most of the code here as the wrangling steps are very similar to the wrangling done in Take Home Ex1. No need to analyze each and every step as I already learned those.\n\n\n\n\n\nWe will load the library used for this exercise.\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "",
    "text": "We will load the library used for this exercise.\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#importing-of-data",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#importing-of-data",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "Importing of data",
    "text": "Importing of data\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\nhead(odbus)\n\n# A tibble: 6 × 7\n  YEAR_MONTH DAY_TYPE   TIME_PER_HOUR PT_TYPE ORIGIN_PT_CODE DESTINATION_PT_CODE\n  &lt;chr&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;   &lt;fct&gt;          &lt;fct&gt;              \n1 2023-10    WEEKENDS/…            16 BUS     04168          10051              \n2 2023-10    WEEKDAY               16 BUS     04168          10051              \n3 2023-10    WEEKENDS/…            14 BUS     80119          90079              \n4 2023-10    WEEKDAY               14 BUS     80119          90079              \n5 2023-10    WEEKDAY               17 BUS     44069          17229              \n6 2023-10    WEEKENDS/…            17 BUS     20281          20141              \n# ℹ 1 more variable: TOTAL_TRIPS &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#extracting-the-study-data",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#extracting-the-study-data",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "Extracting the study data",
    "text": "Extracting the study data\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\ndatatable(odbus6_9)\n\n\n\n\n\n\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#importing-geospatial-data",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#importing-geospatial-data",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex3/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex3/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz &lt;- write_rds(mpsz, \"data/rds/mpsz.rds\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#combining-busstop-and-mpsz",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#combining-busstop-and-mpsz",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "Combining Busstop and mpsz",
    "text": "Combining Busstop and mpsz\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\nod_data &lt;- unique(od_data)\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#creating-desire-lines",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#creating-desire-lines",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "Creating desire lines",
    "text": "Creating desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#removing-intra-zonal-flows",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#removing-intra-zonal-flows",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "Removing intra-zonal flows",
    "text": "Removing intra-zonal flows\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]"
  },
  {
    "objectID": "Hands-on_Ex3/Hands-on_Ex3.html#visualizing-the-desire-lines",
    "href": "Hands-on_Ex3/Hands-on_Ex3.html#visualizing-the-desire-lines",
    "title": "Hands-on Exercise 3: Processing and Visualizing Flow Data",
    "section": "Visualizing the desire lines",
    "text": "Visualizing the desire lines\nTo visualise the resulting desire lines, the code chunk below is used.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.5,\n           col = \"red\")\n\n\n\n\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.5,\n           col = \"red\")"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "Overview\n\n\nGetting Started\n\n\nReflections"
  },
  {
    "objectID": "In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "",
    "text": "The aim of this study is to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\nThe main modes of analysis to be used here are Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA).\nIn doing these study, we will be looking at bus trips started during the hours below.\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday evening peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nMore details about the study can be found here.\nIn this part of the study, we will do thematic mapping on the bus commuter traffic data generated from Data Wrangling."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#setting-up-the-r-environment",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#setting-up-the-r-environment",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Setting Up the R Environment",
    "text": "Setting Up the R Environment\nWe will load the following R packages needed for this study.\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\nknitr:for prettifying presentation\n\n\npacman::p_load(sf, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#environment-settings",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#environment-settings",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Environment settings",
    "text": "Environment settings\nWe will also set the default settings on for this document\n\ntmap_style to natural: for displaying the maps with preferred style\n\n\ntmap_style(\"natural\")"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#loading-the-data",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#loading-the-data",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Loading the data",
    "text": "Loading the data\n\n\n\n\n\n\nImportant\n\n\n\nBefore running this part, please run all the code chunks in Data Wrangling as it generates the data needed for this document.\n\n\nUse read_rds() to load the rds data needed for geovisualization and analysis.\n\nsg_honeycomb &lt;- read_rds(\"data/rds/sg_honeycomb_with_num_busstops.rds\")\nbus_peaks_hc202310 &lt;- read_rds(\"data/rds/bus_peaks_hc202310.rds\")\nbus_peaks_hc202309 &lt;- read_rds(\"data/rds/bus_peaks_hc202309.rds\")\nbus_peaks_hc202308 &lt;- read_rds(\"data/rds/bus_peaks_hc202308.rds\")\n\n\nsg_honeycomb - contains the honeycomb grid that covers Singapore boundaries\nbus_peaks202310 - bus commuter traffic data for peak times for October 2023\nbus_peaks202309 - bus commuter traffic data for peak times for September 2023\nbus_peaks202308 - bus commuter traffic data for peak times for August 2023"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#large-number-of-nas",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#large-number-of-nas",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Large number of NA’s",
    "text": "Large number of NA’s\nWhen doing the data wrangling for Weekday morning peak (6 - 9am), we set NA on *_TRIPS columns for hexagons without bus stops.\nThis was done to fix the huge skew when setting 0’s on hexagons without bus stops. By setting NA, we are able distinguish hexagons without bus commuters due to just not riding the bus from hexagons without bus stops altogether.\nHow this will affect our analysis is currently unclear. If these hexagons become problematic, we can remove them by filtering, i.e. using the code chunk below. This is not executable as this is just a demonstration.\nbus_peaks_hc202310 % filter(NUM_BUS_STOPS &gt; 0)"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#large-gap-in-values",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#large-gap-in-values",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Large gap in values",
    "text": "Large gap in values\nThe 3rd quartile of WEEKDAY_PM_TRIPS is 14,602 while it is 4,312 for WEEKDEND_PM_TRIPS. Our analysis focuses on comparison so plotting these maps together can be misleading. To demonstrate:\n\n\nShow the code\ntm_shape(bus_peaks_hc202310) +\n  tm_fill(\n    \"WEEKDAY_PM_TRIPS\", \n    style = \"quantile\",\n    palette = \"YlOrRd\",\n    title = \"# of trips\"\n  ) +\n  tm_layout(\n    main.title = \"Bus Commuter Trips Weekdays 5 - 8pm (October 2023)\",\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.height = 0.35, \n    legend.width = 0.25,\n    legend.outside = FALSE,\n    legend.position = c(\"right\", \"bottom\")\n  )+\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\n\n\nShow the code\ntm_shape(bus_peaks_hc202310) +\n  tm_fill(\n    \"WEEKEND_PM_TRIPS\", \n    style = \"quantile\",\n    palette = \"YlOrRd\",\n    title = \"# of trips\"\n  ) +\n  tm_layout(\n    main.title = \"Bus Commuter Trips Weekends/Holidays 4 - 7pm (October 2023)\",\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.height = 0.35, \n    legend.width = 0.25,\n    legend.outside = FALSE,\n    legend.position = c(\"right\", \"bottom\")\n  ) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\n\nOn first look, they may appear similar to the audience as there are the same distribution of reds from the same part.\nHowever, the red on the weekday map has a different value to weekend map (17,518 vs 5,345).\nTo provide a better comparison, it might be better to determine the breaks from the quantiles of the combined data of the 2 columns. tm_fill(style = \"quantile\") generates 5 categories so we will use quantile() instead of summary() which only generates quartiles (0.25, 0.50. 0.75) that result into 4 categories.\n\nquantile(\n  c(\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS\n  ),\n  na.rm = TRUE,\n  probs = c(0, 0.2, 0.4, 0.6, 0.8, 1)\n)\n\nRemapping using the breaks generated from these quantiles:\n\ntm_shape(bus_peaks_hc202310) +\n  tm_fill(\n    \"WEEKEND_PM_TRIPS\", \n    palette = \"YlOrRd\",\n    title = \"# of trips\",\n    breaks = c(0, 1394, 4353, 8951, 17582, 462160)\n  ) +\n  tm_layout(\n    main.title = \"Bus Commuter Trips Weekends/Holidays 4 - 7pm (October 2023)\",\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.height = 0.35, \n    legend.width = 0.25,\n    legend.outside = FALSE,\n    legend.position = c(\"right\", \"bottom\")\n  ) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar()\n\nWith this, it can be better seen that weekend peaks are less busy compared to weekday peaks as each color mean the same across 2 maps, and there are less reds on this map."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#utility-functions",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#utility-functions",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Utility functions",
    "text": "Utility functions\nTo make it easier to run repeated tasks like mapping, getting quantiles, generating common legends we will created reusable function for them.\nThe code will also look cleaner and more readable.\n\nMap generatorQuantile generatorCommon legend\n\n\nTo make it easier to generate maps, we will use the following utility function so we don’t need to repeat the same thing all over again. tmap code chunks are big so having this function helps a lot in readability.\n\nplot_bus_commuter_traffic &lt;- function(source, colname, breaks, title) {\n  tm_shape(source) +\n  tm_fill(\n    colname, \n    palette = \"YlOrRd\",\n    title = \"# of trips\",\n    breaks = breaks\n  ) +\n  tm_layout(\n    main.title = title,\n    main.title.position = \"center\",\n    main.title.size = 1,\n    legend.show = FALSE # We will use a common legend\n  ) \n}\n\n\n\nWe will also create a function to calculate the break points from quantiles:\n\nget_map_quantiles &lt;- function(df) {\n  quantile(\n   df,\n   na.rm = TRUE,\n   probs = c(0, 0.2, 0.4, 0.6, 0.8, 1)\n  )\n}\n\n\n\nAs we have common breaks for all maps, we also need to create a common legend for display.\n\ngenerate_common_legend &lt;- function(source, breaks, position = c(\"right\", \"bottom\")) {\n  tm_shape(source) +\n    tm_fill(\n      \"WEEKEND_AM_TRIPS\", # we can use any column here\n      palette = \"YlOrRd\",\n      title = \"# of trips\",\n      breaks = breaks\n    ) +\n    tm_layout(\n      legend.only = TRUE,\n      legend.position = position,\n      frame = FALSE\n    )\n}"
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekday-morning-vs-weekendholiday-morning",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekday-morning-vs-weekendholiday-morning",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekday morning vs Weekend/holiday morning",
    "text": "Weekday morning vs Weekend/holiday morning\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202308$WEEKEND_AM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202309$WEEKEND_AM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202310$WEEKEND_AM_TRIPS\n  )\n)\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (August 2023)\",\n    breaks = c(0, 284, 1543, 4660, 12791, 347820)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 284, 1543, 4660, 12791, 347820),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11 - 2PM (August 2023)\",\n    breaks = c(0, 284, 1543, 4660, 12791, 347820)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn August 2023, weekday morning peak hours is busier than weekend/holiday morning peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (September 2023)\",\n    breaks = c(0, 293, 1566, 4707, 11976, 308362)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 293, 1566, 4707, 11976, 308362),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11 - 2PM (September 2023)\",\n    breaks = c(0, 293, 1566, 4707, 11976, 308362)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn September 2023, weekday morning peak hours is busier than weekend/holiday morning peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (October 2023)\",\n    breaks = c(0, 284, 1540, 4653, 12560, 336087)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 284, 1540, 4653, 12560, 336087),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11 - 2PM (October 2023)\",\n    breaks = c(0, 284, 1540, 4653, 12560, 336087)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn October 2023, weekday morning peak hours is busier than weekend/holiday morning peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe patterns observed by visually analyzing the maps lead to the same conclusion: More people ride the bus on weekday mornings compared to weekend/holiday mornings. This is can be explained by the people going to school or office during the weekdays.\nMoreover, the darker areas in the 2 maps are similar, indicating that the same areas that are relatively busier on weekdays are also relatively busier on weekends as well. This can indicate that more people stay at home on weekends but those who do go out still take buses from the same place - their home.\nHowever, we need to do a deeper spatial analysis like LISA to have more detailed insights on spatial patterns as we can only get an overview of patterns from visual inspection."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekday-evening-vs-weekendholiday-evening",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekday-evening-vs-weekendholiday-evening",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekday evening vs Weekend/holiday evening",
    "text": "Weekday evening vs Weekend/holiday evening\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202308$WEEKEND_PM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202309$WEEKEND_PM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS,\n    bus_peaks_hc202310$WEEKEND_PM_TRIPS\n  )\n)\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (August 2023)\",\n    breaks = c(0, 592, 2065, 4811, 11796, 464466)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 592, 2065, 4811, 11796, 464466),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (August 2023)\",\n    breaks = c(0, 592, 2065, 4811, 11796, 464466)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn August 2023, weekday evening peak hours is busier than weekend/holiday evening peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (September 2023)\",\n    breaks = c(0, 617, 2093, 4781, 10867, 406214)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 617, 2093, 4781, 10867, 406214),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (September 2023)\",\n    breaks = c(0, 617, 2093, 4781, 10867, 406214)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn September 2023, weekday morning peak hours is busier than weekend/holiday evening peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (October 2023)\",\n    breaks = c(0, 587, 2023, 4780, 11419, 462160)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 587, 2023, 4780, 11419, 462160),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (October 2023)\",\n    breaks = c(0, 587, 2023, 4780, 11419, 462160)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn October 2023, weekday morning peak hours is busier than weekend/holiday evening peak hours. This is indicated by higher number of red hexagons.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe patterns observed by visually analyzing the maps lead to the same conclusion: More people ride the bus on weekday evenings compared to weekend/holiday evenings. This is can be explained by the people going home from school or office during the weekdays.\nMoreover, the darker areas in the 2 maps are similar, indicating that the same areas that are relatively busier on weekdays are also relatively busier on weekends as well. This is contrary to my expectations as I expect people to not commute from their office or school during the weekends. This is why I expected that some areas for recreation will be busier during the weekends or holidays, while business districts will be less busy.\nHowever, we need to do a deeper spatial analysis like LISA to have more detailed insights on spatial patterns as we can only get an overview of patterns from visual inspection."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekday-morning-vs-evening",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekday-morning-vs-evening",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekday morning vs evening",
    "text": "Weekday morning vs evening\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202308$WEEKDAY_PM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202309$WEEKDAY_PM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKDAY_AM_TRIPS,\n    bus_peaks_hc202310$WEEKDAY_PM_TRIPS\n  )\n)\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (August 2023)\",\n    breaks = c(0, 879, 3757, 9646, 20566, 464466)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 879, 3757, 9646, 20566, 464466),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (August 2023)\",\n    breaks = c(0, 879, 3757, 9646, 20566, 464466)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn the weekdays of August 2023, morning peak hours generally is busier than evening peak hours. This is indicated by higher number of red hexagons.\nDespite this general trend, the South-Central area stands out as redder that it is in the morning, making it busier in the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (September 2023)\",\n    breaks = c(0, 789, 3268, 8438, 17540, 406214)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 789, 3268, 8438, 17540, 406214),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (September 2023)\",\n    breaks = c(0, 789, 3268, 8438, 17540, 406214)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn the weekdays of September 2023, morning peak hours generally is busier than evening peak hours. This is indicated by higher number of red hexagons.\nDespite this general trend, the South-Central area stands out as redder that it is in the morning, making it busier in the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_AM_TRIPS\",\n    title = \"Bus Trips on Weekdays 6 - 9AM (October 2023)\",\n    breaks = c(0, 856, 3624, 9385, 19821, 462160)\n  ),\n    generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 856, 3624, 9385, 19821, 462160),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKDAY_PM_TRIPS\",\n    title = \"Bus Trips on Weekdays 5 - 8PM (October 2023)\",\n    breaks = c(0, 856, 3624, 9385, 19821, 462160)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn the weekdays of October 2023, morning peak hours generally is busier than evening peak hours. This is indicated by higher number of red hexagons.\nDespite this general trend, the South-Central area stands out as redder that it is in the morning, making it busier in the evening.Weekend/holiday morning vs evening.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe patterns observed by visually analyzing the maps lead to the same conclusion: More people ride the bus on weekday mornings compared to weekend evenings. A possible explanation for this is that after finishing work or school, people do not necessarily go straight home. They could be doing after work activities like dinner with friends, shopping, gym, etc. The volume of people commuting by bus may be more spread out in the evening.\nAnother starking observation is that the South-Central area is busier in the evening compared to mornings. This could be attributed to workers going home from offices in the business districts in this area (e.g. Bugis).\nDoing a spatio-temporal analysis like EHSA will help us understand the patterns throughout the day."
  },
  {
    "objectID": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekendholiday-morning-vs-evening",
    "href": "Take-home_Ex1/CopyOfTake-home_Ex1B.html#weekendholiday-morning-vs-evening",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Weekend/holiday morning vs evening",
    "text": "Weekend/holiday morning vs evening\n\nDetermining break points\nWe will use the method described in Large gap in values to more reliably compare the different values.\n\nAugust 2023September 2023October 2023\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202308$WEEKEND_AM_TRIPS,\n    bus_peaks_hc202308$WEEKEND_PM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202309$WEEKEND_AM_TRIPS,\n    bus_peaks_hc202309$WEEKEND_PM_TRIPS\n  )\n)\n\n\n\n\nget_map_quantiles(\n  c(\n    bus_peaks_hc202310$WEEKEND_AM_TRIPS,\n    bus_peaks_hc202310$WEEKEND_PM_TRIPS\n  )\n)\n\n\n\n\n\n\nPlotting Maps\n\nAugust 2023September 2023October 2023\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11- 2AM (August 2023)\",\n    breaks = c(0, 252, 987, 2612, 5653, 110401)\n  ),\n  generate_common_legend(\n    source = bus_peaks_hc202308,\n    breaks = c(0, 252, 987, 2612, 5653, 110401),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202308,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (August 2023)\",\n    breaks = c(0, 252, 987, 2612, 5653, 110401)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn the weekends of August 2023, morning peak hours is busier than evening peak hours. However, it is not much redder than the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11- 2AM (September 2023)\",\n    breaks = c(0, 284, 1112, 2890, 6308, 121699)\n  ),\n  generate_common_legend(\n    source = bus_peaks_hc202309,\n    breaks = c(0, 284, 1112, 2890, 6308, 121699),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202309,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (September 2023)\",\n    breaks = c(0, 284, 1112, 2890, 6308, 121699)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn the weekends of September 2023, morning peak hours is busier than evening peak hours. However, it is not much redder than the evening.\n\n\n\n\nShow the code\ntmap_arrange(\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_AM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 11- 2AM (October 2023)\",\n    breaks = c(0, 250, 997, 2603, 5697, 111171)\n  ),\n  generate_common_legend(\n    source = bus_peaks_hc202310,\n    breaks = c(0, 250, 997, 2603, 5697, 111171),\n    position = c(\"right\", \"center\")\n  ),\n  plot_bus_commuter_traffic(\n    source = bus_peaks_hc202310,\n    colname = \"WEEKEND_PM_TRIPS\",\n    title = \"Bus Trips on Weekends/Holidays 4 - 7PM (October 2023)\",\n    breaks = c(0, 250, 997, 2603, 5697, 111171)\n  ),\n  ncol = 2,\n  widths = c(3, 1)\n)\n\n\nIn the weekends of October 2023, morning peak hours is busier than evening peak hours. However, it is not much redder than the evening.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThere is same observations can be made on all the map comparisons across the 3 months. Weekend mornings are busier than evenings. This can be explained by people going out for errands in the morning.\nHowever, unlike the previous comparisons, the difference not as big. This can possibly explained by the fact that it is a weekend, people can freely schedule their activities throughout the day. It follows that the bus trips are also more spread out.\nHowever, these are just inferences and we need to do a spatio-temporal analysis like EHSA to help us understand the patterns throughout the day."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1B.html#filtering-data-from-the-trips_cube_-data",
    "href": "Take-home_Ex1/Take-home_Ex1B.html#filtering-data-from-the-trips_cube_-data",
    "title": "Take Home Exercise 1B: Geovisualization and Analysis",
    "section": "Filtering data from the trips_cube_* data",
    "text": "Filtering data from the trips_cube_* data\nThe first thing to do is to filter the data from relevant hours using filter(). As the HOUR_OF_DAY in data set covers the data from the start to the end of the hour, when we filter the data we take this into consideration. For example, when we want to get 6 to 9am data, we will filter such as:\nHOUR_DAY &gt;= 6 & HOUR_OF_DAY &lt; 9\n\nWeekday AM (6 - 9 AM)Weekday PM (5 - 8 PM)Weekend AM (11 AM - 2 PM)Weekend PM (4 - 7 PM)\n\n\n\npeak_wkdy_am_hrly &lt;- trips_cube_wkdy %&gt;%\n  filter(\n    HOUR_OF_DAY &gt;= 6 &\n      HOUR_OF_DAY &lt; 9\n  )\nkable(head(peak_wkdy_am_hrly))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n6\n0\n\n\nH0001\n7\n74\n\n\nH0001\n8\n19\n\n\nH0002\n6\n23\n\n\nH0002\n7\n24\n\n\nH0002\n8\n26\n\n\n\n\n\n\n\n\npeak_wkdy_pm_hrly &lt;- trips_cube_wkdy %&gt;%\n  filter(\n    HOUR_OF_DAY &gt;= 17 &\n      HOUR_OF_DAY &lt; 20\n  )\nkable(head(peak_wkdy_pm_hrly))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n17\n122\n\n\nH0001\n18\n224\n\n\nH0001\n19\n38\n\n\nH0002\n17\n159\n\n\nH0002\n18\n62\n\n\nH0002\n19\n42\n\n\n\n\n\n\n\n\npeak_wknd_am_hrly &lt;- trips_cube_wknd %&gt;%\n  filter(\n    HOUR_OF_DAY &gt;= 11 &\n      HOUR_OF_DAY &lt; 14\n  )\nkable(head(peak_wknd_am_hrly))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n11\n0\n\n\nH0001\n12\n0\n\n\nH0001\n13\n0\n\n\nH0002\n11\n14\n\n\nH0002\n12\n19\n\n\nH0002\n13\n8\n\n\n\n\n\n\n\n\npeak_wknd_pm_hrly &lt;- trips_cube_wknd %&gt;%\n  filter(\n    HOUR_OF_DAY &gt;= 16 &\n      HOUR_OF_DAY &lt; 19\n  )\nkable(head(peak_wknd_pm_hrly))\n\n\n\n\nHEX_ID\nHOUR_OF_DAY\nTRIPS\n\n\n\n\nH0001\n16\n3\n\n\nH0001\n17\n21\n\n\nH0001\n18\n18\n\n\nH0002\n16\n42\n\n\nH0002\n17\n15\n\n\nH0002\n18\n32"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#converting-from-sf-data.table-to-spatialpolygonsdataframe",
    "href": "In-class_Ex3/In-class_Ex3.html#converting-from-sf-data.table-to-spatialpolygonsdataframe",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Converting from sf data.table to SpatialPolygonsDataFrame",
    "text": "Converting from sf data.table to SpatialPolygonsDataFrame\n\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\nSample operation in mpsz_sp on how to read the data table. (Check after class how this is done because it didn’t work. I might have copied wrongly)\n\nmpsz_sp_selected &lt;- mpsz_sp %&gt;%\n  selected(mpsz@data$SUBZONE)"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#computing-the-distance-matrix",
    "href": "In-class_Ex3/In-class_Ex3.html#computing-the-distance-matrix",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Computing the distance matrix",
    "text": "Computing the distance matrix\n\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#labelling-column-and-row-heanders-of-a-distance-matrix",
    "href": "In-class_Ex3/In-class_Ex3.html#labelling-column-and-row-heanders-of-a-distance-matrix",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Labelling column and row heanders of a distance matrix",
    "text": "Labelling column and row heanders of a distance matrix\n\nsz_names &lt;- mpsz$SUBZONE_C\n\n\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#pivoting-distance-value-by-subzone_c",
    "href": "In-class_Ex3/In-class_Ex3.html#pivoting-distance-value-by-subzone_c",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Pivoting distance value by SUBZONE_C",
    "text": "Pivoting distance value by SUBZONE_C\nThis will generate a list of pair of location1 and location2.\nNumber of rows should be:\n\\[\nn_{loc}^2 = 332^2 = 110224\n\\]\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\n\nnrow(distPair)\n\n[1] 110224"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#separating-intra-flow-from-passenger-volume-df",
    "href": "In-class_Ex3/In-class_Ex3.html#separating-intra-flow-from-passenger-volume-df",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Separating intra-flow from passenger volume df",
    "text": "Separating intra-flow from passenger volume df\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#combining-passenger-volume-data-with-distance-value",
    "href": "In-class_Ex3/In-class_Ex3.html#combining-passenger-volume-data-with-distance-value",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Combining passenger volume data with distance value",
    "text": "Combining passenger volume data with distance value\n\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\n\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#importing-population-data",
    "href": "In-class_Ex3/In-class_Ex3.html#importing-population-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Importing population data",
    "text": "Importing population data\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\")"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#geospatial-data-wrangling",
    "href": "In-class_Ex3/In-class_Ex3.html#geospatial-data-wrangling",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Geospatial data wrangling",
    "text": "Geospatial data wrangling\n\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#preparing-origin-attribute",
    "href": "In-class_Ex3/In-class_Ex3.html#preparing-origin-attribute",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Preparing origin attribute",
    "text": "Preparing origin attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#preparing-destination-attribute",
    "href": "In-class_Ex3/In-class_Ex3.html#preparing-destination-attribute",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Preparing destination attribute",
    "text": "Preparing destination attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\nwrite_rds(flow_data1, \"data/rds/SIM_data.rds\")"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#importing-the-modelling-data",
    "href": "In-class_Ex3/In-class_Ex3.html#importing-the-modelling-data",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Importing the modelling data",
    "text": "Importing the modelling data\n\nSIM_data &lt;- read_rds(\"data/rds/SIM_data.rds\")"
  },
  {
    "objectID": "In-class_Ex3/In-class_Ex3.html#visualising-the-dependent-variable",
    "href": "In-class_Ex3/In-class_Ex3.html#visualising-the-dependent-variable",
    "title": "In-class Exercise 3: Calibrating Spatial Interaction Models with R",
    "section": "Visualising the dependent variable",
    "text": "Visualising the dependent variable\nDependent variable = TRIPS\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nThis is highly skewed, not resembling “bell curve” distribution.\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)"
  }
]