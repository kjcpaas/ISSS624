[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Welcome to ISSS624 Geospatial Analytics Applications!\nIn this webpage, I am going to share with you my learning journey of geospatial analytics."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#overview",
    "href": "Hands-on_Ex1.html#overview",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThis is the getting started paragraph."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learned about the following:\n\nPublic Data Sets like the ones on data.gov.sg, LTADataMall, and InsideAirbnb.\nHow to import data sets into RStudio\nWrangling geospatial data in using different R packages like sf, tidyverse, etc."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#overview",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#overview",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learned about the following:\n\nPublic Data Sets like the ones on data.gov.sg, LTADataMall, and InsideAirbnb.\nHow to import data sets into RStudio\nWrangling geospatial data in using different R packages like sf, tidyverse, etc."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\n\nPreparing the data sets\nFirst, I downloaded the different data sets from data.gov.sg, LTADataMall, and InsideAirbnb.\nNext, I put them under the Hands-on_Ex1 directory, with the following file structure:\nHands-on_Ex1\n├── Hands-on_Ex1.qmd\n└── data\n    ├── aspatial\n    │   └── listings.csv\n    └── geospatial\n        ├── CyclingPathGazette.cpg\n        ├── CyclingPathGazette.dbf\n        ├── CyclingPathGazette.lyr\n        ├── CyclingPathGazette.prj\n        ├── CyclingPathGazette.sbn\n        ├── CyclingPathGazette.sbx\n        ├── CyclingPathGazette.shp\n        ├── CyclingPathGazette.shp.xml\n        ├── CyclingPathGazette.shx\n        ├── MP14_SUBZONE_WEB_PL.dbf\n        ├── MP14_SUBZONE_WEB_PL.prj\n        ├── MP14_SUBZONE_WEB_PL.sbn\n        ├── MP14_SUBZONE_WEB_PL.sbx\n        ├── MP14_SUBZONE_WEB_PL.shp\n        ├── MP14_SUBZONE_WEB_PL.shp.xml\n        ├── MP14_SUBZONE_WEB_PL.shx\n        └── PreSchoolsLocation.kml\n\n\nInstalling R packages\nI used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nAfter setting up the data sets and the R packages, I proceeded with importing the geospatial data.\n\nMaster Plan 2014 Subzone Boundary (Web)\nTo import the data set to RStudio, I used the following code chunk:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nI encountered the error below along the way:\nCannot open layer MasterPlan2014SubzoneBoundaryWebKML\nThis is because I originally downloaded the kml file instead of the shp file. After using the shp file, the read worked.\n\nℹ️ My biggest take-away for this is that st_read reads shp data set by default. (which was debunked later)\n\nAfter running the code, I was able to see the mpsz data on my environment.\n\n\n\nCycling Path Data\nEquipped with my learning form the previous step, I was able to quickly figure out that importing this data set can be done by simply changing the layer parameter from the previous code:\n\ncyclingpath &lt;- st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nHowever, the difference is that this geometry has polyline features, while the previous has polygon features.\n\n\nPre-Schools Location Data\nUnlike the others, this data set is in kml format instead of shp format. I used the following code to import:\n\npreschool &lt;- st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex1/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nℹ️ Contrary to my previous take-away, st_read can read kml files by default. In fact, reading shp files require more parameters like dsn and layer."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#others",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#others",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Others",
    "text": "Others\n\nChanging the website theme\nAfter exploring Quarto docs, I found that we can change the theme. I decided on the zephyr theme as it looks most readable and aesthetic for me.\n\n\nIssues with using Github on Rstudio\nIt was recommended to name the project with the convention &lt;github_username&gt;/ISSS624. However, due to restrictions on my machine, I had to deviate from this and create my project elsewhere.\nHence, I couldn’t use usethis::use_github() to setup my Github repository. However, as I use Github intensively in my job, I did the setup manually myself to use the git functions on RStudio.\n\nCreate the repo manually on Github on https://github.com/kjcpaas/ISSS624\nAdd the Github remote on RStudio project\n&gt; git remote add origin git@github.com:kjcpaas/ISSS624.git\n&gt; git remote -v\norigin  git@github.com:kjcpaas/ISSS624.git (fetch)\norigin  git@github.com:kjcpaas/ISSS624.git (push)\nSet remote for head\n&gt; git remote set-head origin --auto\n&gt; git gc\n\nAfter all these, I was able to use the git functions on RStudio."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#checking-contents-of-data-frames",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#checking-contents-of-data-frames",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Checking Contents of Data Frames",
    "text": "Checking Contents of Data Frames\n\nChecking the geometry of data frames\nUsing st_geometry() returns information about the geometry of the data frame.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nIt gave the same geometric information as when importing the shape data but with additional details like the first 5 geometries.\n\n\nGetting overview of geospatial data\nUsing glimpse() gives useful information about the columns, data types, values. For example:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nThis will be very useful to scan for the available data and which columns are useful for analysis.\n\n\nRevealing complete information of feature objects\nUsing head() can give full information about objects in the data set. For example:\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nThis will return the first 5 objects, and the number of objects can be set by specifying a value for n.\nAnother function that is useful for this purpose is tail(), which returns items from the end of the data set. For example:\n\ntail(mpsz, n=2)\n\nSimple feature collection with 2 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23378.74 ymin: 48569.62 xmax: 28343.2 ymax: 50256.33\nProjected CRS: SVY21\n    OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n322      322          7  THE WHARVES    SBSZ07      N  SEMBAWANG         SB\n323      323          8 SENOKO NORTH    SBSZ08      N  SEMBAWANG         SB\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n322 NORTH REGION       NR 6D89875A351CF51C 2014-12-05 26945.07 49552.79\n323 NORTH REGION       NR A800CBEE879C1BF9 2014-12-05 24665.79 49482.60\n    SHAPE_Leng SHAPE_Area                       geometry\n322  11828.878    1635808 MULTIPOLYGON (((26219.89 50...\n323   7392.129    2241387 MULTIPOLYGON (((26047.11 50...\n\n\nThis returned the items on rows 322 and 323 instead of 1 and 2 if we were to use head().\nHowever, I wonder which use cases these functions would be useful as we can easily inspect the full data when looking at all the Environment Data in RStudio. 🤔"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\n\nplot(mpsz, max.plot = 15)\n\n\n\n\nI was pleasantly surprised to find that the rendering of the plots was so fast! It only took 1 second or so on my machine for 300+ features and 15 fields. This is really useful for quick look of the data.\nTrying it on the cycling path data was also very fast though the result was not so useful for me as it needs to be overlayed with a map like above.\n\nplot(cyclingpath)\n\n\n\n\nI wonder how long it would take once we have larger data sets. 🤔\nAs someone not originally from Singapore, I am still familiarizing myself with the countries geography so I’ll plot the regions first.\n\nplot(mpsz['REGION_N'])\n\n\n\n\nThis can still be visualized better, especially the names in the legend got cut off. From the Help pages on RStudio, this function has a lot more parameters and I’ll explore it once I have more time."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#projections",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#projections",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Projections",
    "text": "Projections\n\nCorrecting the EPSG code\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nI am not familiar with what the st_crs() returns and I wouldn’t have thought that EPSG needs correcting since I don’t have the domain knowledge. This is one of my biggest take away for this exercise.\n\n\nProjection Transformation\nWhen using st_set_crs(), I got the warning below:\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for that\nAs such, the mpsz3414 data before may not be projected properly despite having the correct EPSG value.\nNext, I will transform the pre-school data:\n\npreschool3414 &lt;- st_transform(preschool, crs=3414)\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#reflections",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#reflections",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Reflections",
    "text": "Reflections\n\nI thought it would be difficult to setup R and RStudio especially as the Cran Project site was down when I first attempted to set up. Good thing it was up the next day.\nThis course is looking to be very demanding indeed with a lot of time spent on pre-class assignments. However, I have enjoyed the hands-on exercise so far and I am eager to learn more!"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nFor aspatial data, I used read_csv() to import the data.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nFrom this, we have candidate geospatial fields that we can use, longitude and latitude.\nChecking the data contents of these field can confirm if we can really use the data.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nAfter confirming that longitude and latitude can be used as geospatial data, I transformed this data to geospatial data.\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nChecking the new data frame, it was confirmed that it was transformed to a geospatial data.\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing",
    "text": "Geoprocessing\n\nBuffering\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\nAfter seeing my classmate’s question on Piazza, I was also curious about the effect of nQuadSegs to the area. From the documentation, this is the number of segments created per quadrant.\nMy understanding of this is since each quadrant has 90 degrees, having nQuadSegs = 30 means 1 segment per 3 degrees. If this correct, my hypothesis is that the higher nQuadSegs is, the more accurate it is. This is because nQuadSegs=1 would be a square, and it becomes a polygon with more sides the higher nQuadSegs is.\nI’m testing the theory below and if my hypothesis is correct, the area should not differ much past nQuadSegs=180\n\nbuffer_cycling0 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 0)\nbuffer_cycling0$AREA &lt;- st_area(buffer_cycling0)\nsum(buffer_cycling0$AREA)\n\n1700331 [m^2]\n\n\n\nbuffer_cycling10 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 10)\nbuffer_cycling10$AREA &lt;- st_area(buffer_cycling10)\nsum(buffer_cycling10$AREA)\n\n1773584 [m^2]\n\n\n\nbuffer_cycling45 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 45)\nbuffer_cycling45$AREA &lt;- st_area(buffer_cycling45)\nsum(buffer_cycling45$AREA)\n\n1774421 [m^2]\n\n\n\nbuffer_cycling90 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 90)\nbuffer_cycling90$AREA &lt;- st_area(buffer_cycling90)\nsum(buffer_cycling90$AREA)\n\n1774454 [m^2]\n\n\n\nbuffer_cycling180 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 180)\nbuffer_cycling180$AREA &lt;- st_area(buffer_cycling180)\nsum(buffer_cycling180$AREA)\n\n1774462 [m^2]\n\n\n\nbuffer_cycling1800 &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 1800)\nbuffer_cycling1800$AREA &lt;- st_area(buffer_cycling1800)\nsum(buffer_cycling1800$AREA)\n\n1774465 [m^2]\n\n\nAs we can see, from 180 to 1800 the area only changed by 3m2 but the differences are larger in lower values. My conclusion is that the higher nQuadSegs, the more accurate the value we will get. However, the calculation took much longer. The extremely small accuracy benefit may not be worth the trade-off in most cases.\nThe result when using nQuadSegs of 30 is already very close to the result when it is 1800.\n\\[\n1774367/1774465 = 99.99\\%\n\\]\n\n\nPoint-in-polygon count\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nThis means that there are subzones without pre-school while some have as many as 72.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nThe subzone with the most pre-schools is Tampines East.\nTo calculate the density of pre-schools:\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nLet’s see the top 3 subzones with the highest pre-school density.\n\ntop_n(mpsz3414, 3, `PreSch Density`)\n\nSimple feature collection with 3 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25594.22 ymin: 28623.75 xmax: 29976.93 ymax: 48182.13\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO         SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N\n1       27          8             CECIL    DTSZ08      Y DOWNTOWN CORE\n2      278          3     MANDAI ESTATE    MDSZ03      N        MANDAI\n3      291          3 SEMBAWANG CENTRAL    SBSZ03      N     SEMBAWANG\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         DT CENTRAL REGION       CR 65AA82AF6F4D925D 2014-12-05 29730.20\n2         MD   NORTH REGION       NR F6266F7368DBB9AB 2014-12-05 27082.70\n3         SB   NORTH REGION       NR 772A64AB9A93FC3A 2014-12-05 26268.73\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1 29011.33   2116.095   196619.9 MULTIPOLYGON (((29808.18 28...            7\n2 45367.46   1633.708   143137.9 MULTIPOLYGON (((27119.56 45...            5\n3 47558.08   3955.118   962437.4 MULTIPOLYGON (((26311.14 46...           27\n            Area   PreSch Density\n1 196619.9 [m^2] 35.60169 [1/m^2]\n2 143137.9 [m^2] 34.93134 [1/m^2]\n3 962437.4 [m^2] 28.05377 [1/m^2]\n\n\nDespite Tampines East having the most pre-schools, Cecil has the highest pre-school density. Tampines East might be much bigger than Cecil so its Pre-school Density is lower."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nBelow is the histogram for Pre-school Density:\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nWe improvef this graph by using ggplot.\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are a few sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nWe can also create a scatter plot.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "In this hands-on exercise, I learned about the following:\n\nData preparation\nChoropleth Mapping\nJoining geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#overview",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#overview",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "",
    "text": "In this hands-on exercise, I learned about the following:\n\nData preparation\nChoropleth Mapping\nJoining geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\n\nPreparing the data sets\nI used the code below to install the R packages used in the exercise:\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#importing-the-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#importing-the-data",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "Importing the data",
    "text": "Importing the data\nI prepared the datasets as with Chapter 1, resulting in the following directory structure:\nHands-on_Ex2\n├── Hands-on_Ex2.qmd\n└── data\n    ├── aspatial\n    │   └── respopagesextod2011to2020.csv\n    └── geospatial\n        ├── MP14_SUBZONE_WEB_PL.dbf\n        ├── MP14_SUBZONE_WEB_PL.prj\n        ├── MP14_SUBZONE_WEB_PL.sbn\n        ├── MP14_SUBZONE_WEB_PL.sbx\n        ├── MP14_SUBZONE_WEB_PL.shp\n        ├── MP14_SUBZONE_WEB_PL.shp.xml\n        └── MP14_SUBZONE_WEB_PL.shx\n\nImporting geospatial data\nTo import the MPSZ data set to RStudio, I used the same code chunk in the previous exercise.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/Hands-on_Ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting aspatial data\nThe csv data is an aspatial data so read_csv() must be used instead of st_read():\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData preparation\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\nI don’t fully understand this entire code chunk yet but I know it filtered for data from 2020 only and did some aggregations based on the age groups, PA, and AZ. New fields like YOUNG and AGED .\nNext, I joined this data with the mpsz data via SZ. However, we still need to make sure that the SZ values are uppercase to match mpsz’s SUBZONE_N.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nThen the 2 data sets can be joined.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nLastly, write the rds of the combined data set.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\n\nUsing qtm()\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nI tried to create an interactive map by using view instead of plot but an error about invalid polygons was returned.\n\n\nUsing tmap elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nFrom this part, I saw that with tm_shape as base, thematic maps can be created by doing + with the tmap actions. I will explore this later but I found a good reference on where to start: https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html.\n\n\nClassification methods\n\nQuantile\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nEqual\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nTakeaways\nMy main takeaway for this is that the quantile classification deals with outliers better. In this data set, there is 1 subzone as outlier. If we use equal classification, the map looks homogeneous and does not provide much information as it cannot be seen how the values from one subzone to the other differ.\n\n\n\nColor Scheme\nThe color scheme can be changed by specifying the palette in tm_fill() like below:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMore colors can be found when running tmaptools::palette_explorer() in the console. However, it requires shiny and shinyjs to work. This is a wonderful tool as it can also simulate how the color schemes look from the perspective of people with color blindness. As these maps aim to communicate, it is important for the color schemes chosen to not just be beautiful, but also inclusive.\n\n\nMap Layouts\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nAdding legends to maps is very useful as it provides additional information. However, this feature should not be abused to add multiple visualizations as legend as it can cause more confusion if there is too much information to present.\nMap style can also be changed and it is useful to enhance the visual presentation. After doing some research, I found the other available styles in https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes.html.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tmap_style(\"natural\")\n\n\n\n\nIn this example, I used the natural style to make it look like the map is surrounded by water (as it is naturally). Adding “furnitures” like compass and scale can also provide more perspective.\n\n\nSmaller Maps\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nI don’t find this very useful as the maps rendered might be too small to inspect. However, the facets with the region can be useful to see the data based on region.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Greens\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping According to Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nI find this very useful especially if you just want to map a subset of the data. This can be used when we want to highlight information on certain regions."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#reflections",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#reflections",
    "title": "Hands-on Exercise 2: Choropleth Mapping with R",
    "section": "Reflections",
    "text": "Reflections\n\nI was exhausted after doing the 2 chapters, and I must change how I do things next week. What I have been doing is understanding each part deeply first before moving on to the next. I think I should do chunks of work first before going back for deep understanding so I have more holistic view of the content and more sustainable for the duration of this course.\nI find tmap very useful and I am looking forward to using it more as it has so many functions to visualize data. Only one’s creativity limits the possibilities of using it."
  },
  {
    "objectID": "In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Overview goes here"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#overview",
    "href": "In-class_Ex1/In-class_Ex1.html#overview",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Overview goes here"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below loads the following packages:\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\n\n\npacman::p_load(tmap, sf, tidyverse)"
  },
  {
    "objectID": "In-class_Ex1/In-class_Ex1.html#preparing-the-flow-data",
    "href": "In-class_Ex1/In-class_Ex1.html#preparing-the-flow-data",
    "title": "In-class Exercise 1",
    "section": "Preparing the Flow Data",
    "text": "Preparing the Flow Data\n\nImporting the origin and destination data\nFirstly, we will import the Passenger Volume By Origin Destination Bust Stops data set from LTA Data Mall by using read_csv .\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nTo make it easier to process the PT codes, we will convert the origin and destination PT codes to factor data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\nNext, I want to investigate the commuter flows between 7-10am on weekdays. We need to use the interval 7 &lt;= time &lt;= 9 as the data with time = 9 contains data from 9am to just before 10am.\n\norigtrip_7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\n\nImporting geospatial data\nNext we need to import the bus stop locations so that we can correlate them from the PT codes from the origin and destination data from before.\n\nbustop &lt;- st_read(dsn = \"data/geospatial\",\n                  layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nSince these are just points, we also need some polygon data to figure out where in the Singapore map the bus locations correspond to:\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  }
]