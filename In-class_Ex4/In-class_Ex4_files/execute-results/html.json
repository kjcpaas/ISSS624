{
  "hash": "6d8e54a59ad8011a99c932e6f043f8b1",
  "result": {
    "markdown": "---\ntitle: \"In-class Ex 4\"\n---\n\n\n# Setup Environment\n\n`httr` - work with HTML pages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, httr, tmap)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntmap_style(\"natural\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap style set to \"natural\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nother available styles are: \"white\", \"gray\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n:::\n:::\n\n\n# Geocoding\n\nUse <https://www.onemap.gov.sg/apidocs/>\n\nX, Y in SVY21, longitude latitude in WGS84\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv <- read_csv(\"data/aspatial/GeneralInformationofschools.csv\")\npostcodes <- csv$\"postal_code\"\n\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor(postcode in postcodes){\n  query <- list(\"searchVal\"=postcode,\"returnGeom\"=\"Y\", \"getAddrDetails\"=\"Y\",\"pageNum\"=\"1\")\n  res<- GET(url, query=query)\n  \n  if((content(res)$found) !=0){\n    found <- rbind(found, data.frame(content(res))[4:13])\n  } else {\n    not_found = data.frame(postcode)\n  }\n}\n\nwrite_rds(found, \"data/rds/found.rds\")\nwrite_rds(not_found, \"data/rds/not_found.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncsv <- read_csv(\"data/aspatial/GeneralInformationofschools.csv\")\nfound <- read_rds(\"data/rds/found.rds\")\nnot_found <- read_rds(\"data/rds/not_found.rds\")\nmerged = merge(csv, found, by.x = \"postal_code\", by.y = \"results.POSTAL\", all = TRUE)\nwrite.csv(merged, file = \"data/aspatial/schools.csv\")\nwrite.csv(not_found, file = \"data/aspatial/not_found.csv\")\n```\n:::\n\n\n::: callout-important\nUse Google to look for the school without geospatial data.\n\nReplace latitude with **1.3887**, longitude with **103.7652**.\n\n**Do this before proceeding to the next step**. Or else `st_as_sf()` will complain about missing longitude and latitude\n:::\n\n# Preparation\n\n## Importing geocoded schools\n\n::: {.callout-note appearance=\"simple\"}\n-   Import `schools.csv`\n\n-   Rename column names\n\n-   Retain only relevant columns\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschools <- read_csv(\"data/aspatial/schools.csv\") %>%\n  rename(latitude = results.LATITUDE,\n         longitude = results.LONGITUDE) %>%\n  select(postal_code, school_name, latitude, longitude)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 350 Columns: 41\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(35): school_name, url_address, address, telephone_no, telephone_no_2, f... dbl\n(6): ...1, postal_code, results.X, results.Y, results.LATITUDE, results...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nschools_sf <- st_as_sf(schools,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n## Confirming projection\n\n::: callout-note\nI used the projected mpsz from previous exercises.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- read_rds(\"data/rds/mpsz.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"lightgreen\") +\n  tm_shape(schools_sf) +\n  tm_dots(col = \"red\", size = 0.025) #+\n```\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  #tm_view(set.zoom.limits = c(11, 14))\n```\n:::\n\n\nFinding how many schools per planning subzone using point in polygon count\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$SCHOOL_COUNT <- lengths(st_intersects(mpsz, schools_sf))\n```\n:::\n\n\nInspect the summary of statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz$SCHOOL_COUNT)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000 \n```\n:::\n:::\n\n\n## Importing business geospatial data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusinesses <- st_read(dsn = \"data/geospatial\",\n                      layer = \"Business\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Business' from data source \n  `/Users/kjcpaas/Documents/Grad School/ISSS624/Project/ISSS624/In-class_Ex4/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons(col = \"lightgreen\") +\n  tm_shape(businesses) +\n  tm_dots(col = \"red\", size = 0.01)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n```\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex4_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n# Data integration and wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data <- read_rds(\"data/rds/flow_data_tidy.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check how to make this work\nflow_data <- flow_data %>% left_join(mpsz, by= c(\"DESTIN_SZ\", \"SUBZONE_C\"))\n```\n:::\n",
    "supporting": [
      "In-class_Ex4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}