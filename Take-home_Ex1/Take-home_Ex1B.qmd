---
title: "Take Home Exercise 1B: Geovisualization and Analysis"
author: "Kristine Joy Paas"
date: "28 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
---

# Overview

The aim of this study is to uncover spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.

The main modes of analysis to be used here are Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA).

In doing these study, we will be looking at bus trips started during the hours below.

| Peak hour period             | Bus tap on time |
|------------------------------|-----------------|
| Weekday morning peak         | 6am to 9am      |
| Weekday evening peak         | 5pm to 8pm      |
| Weekend/holiday morning peak | 11am to 2pm     |
| Weekend/holiday evening peak | 4pm to 7pm      |

More details about the study can be found [here](https://isss624-ay2023-24nov.netlify.app/take-home_ex01).

In this part of the study, we will do thematic mapping on the bus commuter traffic data generated from [Data Wrangling](/Take-home_Ex1/Take-home_Ex1A.qmd).

# Setup

## Setting Up the R Environment

We will load the following R packages needed for this study.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html): for thematic mapping

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html): for geospatial data handling

-   [**tidyverse**](https://cran.r-project.org/web/packages/tidyverse/index.html): for non-spatial data handling

-   [**knitr**](https://cran.r-project.org/web/packages/knitr/):for prettifying presentation

```{r}
pacman::p_load(sf, tmap, tidyverse, knitr)
```

## Environment settings

We will also set the default settings on for this document

-   `tmap_style` to **natural**: for displaying the maps with preferred style

```{r}
tmap_mode("plot")
tmap_style("natural")
```

## Loading the data

::: callout-important
Before running this part, please run all the code chunks in [Data Wrangling](/Take-home_Ex1/Take-home_Ex1A.qmd) as it generates the data needed for this document.
:::

Use `read_rds()` to load the `rds` data needed for geovisualization and analysis.

```{r}
honeycomb <- read_rds("data/rds/honeycomb202310.rds")
trips_cube_wkdy <- read_rds("data/rds/trips_cube_wkdy202310.rds")
trips_cube_wknd <- read_rds("data/rds/trips_cube_wknd202310.rds")
```

-   `honeycomb` - contains the geometry

-   `trips_cube_wkdy` - hourly number bus trips originating from hexagons during weekday

-   `trips_cube_wknd` - hourly number bus trips originating from hexagons during weekend

::: {.callout-note appearance="simple"}
If you want to use the **August 2023** or **September 2023** data sets, replace `202310` to `202308` or `202309`, respectively.
:::

# Extracting data for peak times

As we want to study the data for peak times, we have to extract and aggregate the data for those times.

## Filtering data from the *trips_cube\_\** data

The first thing to do is to filter the data from relevant hours using `filter()`.

::: {.callout-tip collapse="true" appearance="simple"}
### How to filter data by *HOUR_OF_DAY*

The `HOUR_OF_DAY` in data set covers the data from the start to the end of the hour in **24-hour format**, i.e. when `HOUR_OF_DAY = 16`, this means bus taps from `4:00 PM` ton`4:59:59PM`.

Hence, if we want to get 6 to 9am data, we will filter by:

```         
HOUR_DAY >= 6 & HOUR_OF_DAY < 9
```
:::

::: panel-tabset
### Weekday AM (6 - 9 AM)

```{r}
peak_wkdy_am_hrly <- trips_cube_wkdy %>%
  filter(
    HOUR_OF_DAY >= 6 &
      HOUR_OF_DAY < 9
  )
kable(head(peak_wkdy_am_hrly))
```

### Weekday PM (5 - 8 PM)

```{r}
peak_wkdy_pm_hrly <- trips_cube_wkdy %>%
  filter(
    HOUR_OF_DAY >= 17 &
      HOUR_OF_DAY < 20
  )
kable(head(peak_wkdy_pm_hrly))
```

### Weekend AM (11 AM - 2 PM)

```{r}
peak_wknd_am_hrly <- trips_cube_wknd %>%
  filter(
    HOUR_OF_DAY >= 11 &
      HOUR_OF_DAY < 14
  )
kable(head(peak_wknd_am_hrly))
```

### Weekend PM (4 - 7 PM)

```{r}
peak_wknd_pm_hrly <- trips_cube_wknd %>%
  filter(
    HOUR_OF_DAY >= 16 &
      HOUR_OF_DAY < 19
  )
kable(head(peak_wknd_pm_hrly))
```
:::
