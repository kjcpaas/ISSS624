---
title: "Take Home Exercise 2: A Case Study of Singapore Public Bus Commuter Flows"
author: "Kristine Joy Paas"
date: "6 Dec 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: false
  warning: false
---

# Overview

The aim of this exercise to study the bus commuter flow patterns in Singapore to gain insights that support decision-making.

We will be examining the **weekend morning peak hours** (11 AM - 2 PM) to figure out where people go during weekends and holidays.

We will also be the modelling the spatial interaction between the different locations in Singapore, related to the bus commuter patterns.

Check <https://isss624-ay2023-24nov.netlify.app/take-home_ex02> for the full requirements of this exercise.

As this process is expected to have a lot of intermediate steps, **Save**, **Load**, and **Data clear** points are available to make our data wrangling more efficient.

::: callout-tip
### Save point

This is where data is written as `rds` files using `write_rds()` for important data sets that will be used in later analysis. Examples are:

-   Flow data, attractive and propulsive forces
-   Critical outputs of expensive calculations
-   Cleaned up data for lightweight processing
:::

::: callout-note
### Load point

This is where data is loaded from `rds` files using `read_rds()`. They were previously generated by the save point.

**TIP**: Skip to the load points to progress without running the code above it
:::

::: callout-warning
### Data clear point

This is where data that will not be used anymore are cleared. The data in RStudio environment will pile up and set `#| eval: false` in code chunks if you want skip the clearing. For example, the code below won't be run.

```{r}
#| eval: false
message <- "This code chunk executed"
```
:::

# Setup

```{r}
#| label: setup
pacman::p_load(sf, sp, tmap, tidyverse, knitr, sfdep, stplanr, reshape2)
tmap_mode("plot")
tmap_style("natural")
set.seed(1234)
```

# Data Wrangling

## Importing the Singapore subzone map

First, we will import the **Master Plan 2019 Subzone Boundary (Web)** data set that has been used in class. We will only keep the `SUBZONE_N` column and the geometry as we will only use this as the **base for our visualizations**.

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
  select(SUBZONE_N)
kable(head(mpsz))
```

::: {.callout-caution appearance="simple"}
#### Correcting the projection

This data frame using the global GPS standard, [**WGS84**](https://gisgeography.com/wgs84-world-geodetic-system/). We need to convert this to [**SVY21**](https://app.sla.gov.sg/sirent/About/PlaneCoordinateSystem) projection that is more appropriate for Singapore ðŸ‡¸ðŸ‡¬ context.

```{r}
mpsz <- mpsz %>% st_transform(crs=3414)
```
:::

::: callout-tip
#### Save point

Let's save this geometry with corrected projection from plotting purposes.

```{r}
write_rds(mpsz, "data/rds/mpsz.rds")
```
:::

## Generating Hexagons for the Traffic Analysis Zone

To start our analysis, we will first build the honeycomb grid needed for our [traffic analysis zone (TAZ)](https://tmg.utoronto.ca/files/Reports/Traffic-Zone-Guidance_March-2021_Final.pdf). These hexagons must have a distance of **375m** from the center of the hexagon to the midpoint of each edge.

### Import Bus Stop Data

Next, we need to import the bus stop data as we will generate the honeycomb grid based on locations with bus stops.

```{r}
busstops <- st_read(dsn = "data/geospatial",
                    layer = "BusStop")
kable(head(busstops))
```

::: {.callout-caution collapse="true" appearance="simple"}
#### Correcting the projection

We want to use [SVY21](https://app.sla.gov.sg/sirent/About/PlaneCoordinateSystem) as the projection for this study as it is the projection used for local Singaporean context.

After the import, it shows that the **Projected CRS**is **SVY21**. However, checking the CRS with `st_crs()` tells a different story.

```{r}
st_crs(busstops)
```

As we can see EPSG value is **9001**, which correspond to [**WGS84**](https://gisgeography.com/wgs84-world-geodetic-system/). We have to fix the projection by transforming to EPSG value of **3414**, which corresponds to **SVY21**.

```{r}
busstops <- st_transform(busstops, crs = 3414)
```
:::

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(busstops) +
  tm_dots(col = "red", size = 0.005, title = "Bus Stops") +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

```{r}
busstops <- busstops %>% st_intersection(mpsz) %>% select(BUS_STOP_N, )
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tmap_style("natural")
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(busstops) +
  tm_dots(col = "red", size = 0.005, title = "Bus Stops") +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## Create Hexagon

```{r}
honeycomb <- busstops %>% st_make_grid(cellsize = 750,
                                       what="polygons",
                                       square = FALSE) %>%
  st_sf() %>%
  filter(lengths(st_intersects(geometry, busstops)) > 0)
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("green", title = "Singapore Boundary", alpha = 0.5) +
  tm_shape(honeycomb) +
  tm_fill(col = "white", title = "Hexagons", alpha = 1) +
  tm_borders(alpha = 0.2) +
  tm_layout(main.title = "Honeycomb grid corresponding to Singapore bus stops",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_compass(type="8star", size = 2, bg.color = "white", bg.alpha = 0.5) +
  tm_scale_bar(bg.color = "white", bg.alpha = 0.5) +
  tm_shape(busstops) +
  tm_dots(col = "red", size = 0.001, title = "Bus Stops") +
  tm_grid(alpha = 0.2)
```

Assign id

```{r}
honeycomb$HEX_ID <- sprintf("H%04d", seq_len(nrow(honeycomb))) %>% as.factor()
```

```{r}
write_rds(honeycomb, "data/rds/honeycomb.rds")
```

## Generating Origin and Destination Data by Hexagon

## Importing Bus Passenger data

The data set is an aspatial data in `csv` format so we will use `read_csv()` to import the data.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
kable(head(odbus))
```

### Filtering the study interest

Weekend morning

```{r}
odbus <- odbus %>% filter(
  DAY_TYPE == "WEEKENDS/HOLIDAY" &
    TIME_PER_HOUR >= 11 &
    TIME_PER_HOUR < 14
)
```

### Mapping Bus Stop to Hexagon

```{r}
bs_hex <- st_intersection(busstops, honeycomb) %>%
  st_drop_geometry() %>%
  select(c(BUS_STOP_N, HEX_ID))
kable(head(bs_hex))
```

### Adding hexagon information to bus passenger data

`inner_join()` as some bus stops in `odbus` do not have point data.

```{r}
odbushex <- odbus %>% inner_join(bs_hex,
                                by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIG_HEX_ID = HEX_ID) %>% 
  inner_join(bs_hex,
            by = c("DESTINATION_PT_CODE" = "BUS_STOP_N")) %>%
  rename(DEST_HEX_ID = HEX_ID) %>% 
  rename(HOUR_OF_DAY = TIME_PER_HOUR)
```

## Aggregating trips based on origin and destination

```{r}
odtrips <- odbushex %>% group_by(
    ORIG_HEX_ID,
    DEST_HEX_ID) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
kable(head(odtrips))
```

```{r}
rm(busstops)
rm(odbus)
rm(odbushex)
```

# Propulsive and Attractiveness Variables

## Importing HDB data

Average household size is 3.09 <https://www.singstat.gov.sg/find-data/search-by-theme/households/households/latest-data>

```{r}
hdb <- read_csv("data/aspatial/hdb.csv") %>%
  st_as_sf(coords = c("lng", "lat"),
           crs = 4326) %>%
  st_transform(crs = 3414) %>%
  filter(residential == "Y") %>%
  mutate(est_pop = round(total_dwelling_units * 3.09)) %>%
  select(blk_no, street, est_pop)
kable(head(hdb))
```

### Aggregating HDB population data by hexagon

```{r}
hdb_hex <- st_intersection(hdb, honeycomb) %>%
  st_drop_geometry() %>%
  group_by(HEX_ID) %>%
  summarize(HDB_POP = sum(est_pop))
kable(head(hdb_hex))
```

### Adding population to the honeycomb

```{r}
honeycomb <- left_join(honeycomb, hdb_hex)
honeycomb$HDB_POP[is.na(honeycomb$HDB_POP)] = 0
```

## Importing locations

```{r}
honeycomb$NUM_BUSINESSES = lengths(st_intersects(
  honeycomb,
  st_read(dsn = "data/geospatial",
          layer = "Business")
))
```

```{r}
honeycomb$NUM_F_AND_B = lengths(st_intersects(
  honeycomb,
  st_read(dsn = "data/geospatial",
          layer = "F&B")
))
```

```{r}
honeycomb$NUM_ENTERTAINMENT = lengths(st_intersects(
  honeycomb,
  st_read(dsn = "data/geospatial",
          layer = "entertn")
))
```

```{r}
honeycomb$NUM_LEIS_REC = lengths(st_intersects(
  honeycomb,
  st_read(dsn = "data/geospatial",
          layer = "Liesure&Recreation")
))
```

```{r}
honeycomb$NUM_RETAIL = lengths(st_intersects(
  honeycomb,
  st_read(dsn = "data/geospatial",
          layer = "Retails")
  ))
```

# Visualizing Flow Patterns

```{r}
flowline <- odtrips %>% od2line(
  honeycomb,
  zone_code = "HEX_ID")

```

## Choosing visualization interval

```{r}
quantile(
  flowline$TRIPS,
  probs = c(0, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999, 1))
```

::: panel-tabset
## HDB Population

Skewed

```{r}
quantile(honeycomb$HDB_POP,
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
quantile(honeycomb$HDB_POP[honeycomb$HDB_POP > 0],
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(honeycomb) +
  tm_polygons(
    "HDB_POP",
    palette = "Blues",
    title = "# of HDB dwellers (estimated)",
    breaks = c(0, 6, 2637, 5740, 9696, 13990, 24558)) +
  
  tm_shape(flowline[flowline$TRIPS > 1510,]) +
  tm_lines(lwd = "TRIPS",
           col = "red",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.6) +
  
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## Retail

skewed

```{r}
quantile(honeycomb$NUM_RETAIL,
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
quantile(honeycomb$NUM_RETAIL[honeycomb$NUM_RETAIL > 0],
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(honeycomb) +
  tm_polygons(
    "NUM_RETAIL",
    palette = "Blues",
    title = "# of retail shops",
    breaks = c(0, 1, 4, 9, 25, 71, 1678)) +
  
  tm_shape(flowline[flowline$TRIPS > 1510,]) +
  tm_lines(lwd = "TRIPS",
           col = "red",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.6) +
  
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## Entertainment

```{r}
quantile(honeycomb$NUM_ENTERTAINMENT,
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
quantile(honeycomb$NUM_ENTERTAINMENT[honeycomb$NUM_ENTERTAINMENT > 0],
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(honeycomb) +
  tm_polygons(
    "NUM_ENTERTAINMENT",
    palette = "Blues",
    title = "# of entertainment locations",
    style = "equal") +
  
  tm_shape(flowline[flowline$TRIPS > 1510,]) +
  tm_lines(lwd = "TRIPS",
           col = "red",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.6) +
  
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## Leisure and Recreation

```{r}
quantile(honeycomb$NUM_LEIS_REC,
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
quantile(honeycomb$NUM_LEIS_REC[honeycomb$NUM_LEIS_REC > 0],
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(honeycomb) +
  tm_polygons(
    "NUM_LEIS_REC",
    palette = "Blues",
    title = "# of leisure and recreation locations",
    breaks = c(0, 1, 9, 17, 25, 33, 41)) +
  
  tm_shape(flowline[flowline$TRIPS > 1510,]) +
  tm_lines(lwd = "TRIPS",
           col = "red",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.6) +
  
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## F&B

```{r}
quantile(honeycomb$NUM_F_AND_B,
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
quantile(honeycomb$NUM_F_AND_B[honeycomb$NUM_F_AND_B > 5],
         probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(honeycomb) +
  tm_polygons(
    "NUM_F_AND_B",
    palette = "Blues",
    title = "# of F&B outlets",
    breaks = c(0, 1, 6, 8, 12, 21, 51, 131)) +
  
  tm_shape(flowline[flowline$TRIPS > 1510,]) +
  tm_lines(lwd = "TRIPS",
           col = "red",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.6) +
  
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```
:::

# Calculating Distance Matrix

## Converting *honeycomb to* **SpatialPolygonsDataFrame**

```{r}
honeycomb_sp <- as(honeycomb, "Spatial")
```

## Generating distance matrix

```{r}
dist_mat <- spDists(honeycomb_sp,
                    longlat = FALSE)
colnames(dist_mat) <- paste0(honeycomb$HEX_ID)
rownames(dist_mat) <- paste0(honeycomb$HEX_ID)
kable(head(dist_mat, n=c(10, 10)))
```

## Creating pivot table

300 because of hexagon dimensions

```{r}
dist_tbl <- melt(dist_mat) %>%
  rename(distance = value)
dist_tbl$distance[dist_tbl$distance == 0] <- 300
kable(head(dist_tbl))
```

# Putting it all together

```{r}
flow_data <- flowline %>%
  left_join(honeycomb %>%
              st_drop_geometry() %>%
              select(HEX_ID, HDB_POP),
            by=c(ORIG_HEX_ID, HEX_ID)) %>%
  rename(ORIG_HDB_POP = HDB_POP)
```
