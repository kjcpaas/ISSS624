---
title: "Take Home Exercise 2: Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows"
author: "Kristine Joy Paas"
date: "6 Dec 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
---

# Setup

```{r}
#| label: setup
pacman::p_load(sf, tmap, tidyverse, knitr, sfdep, stplanr)
tmap_mode("plot")
tmap_style("natural")
set.seed(1234)
```

# Wrangling

## Import Geospatial Data

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>% st_transform(crs=3414)
```

```{r}
busstops <- st_read(dsn = "data/geospatial",
                    layer = "BusStop") %>% st_transform(crs=3414)
kable(head(busstops))
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(busstops) +
  tm_dots(col = "red", size = 0.005, title = "Bus Stops") +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

Filter those only within Singapore

```{r}
busstops <- busstops %>% st_intersection(mpsz) %>% select(BUS_STOP_N, )
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tmap_style("natural")
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(busstops) +
  tm_dots(col = "red", size = 0.005, title = "Bus Stops") +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## Create Hexagon

```{r}
honeycomb <- busstops %>% st_make_grid(cellsize = 650,
                                       what="polygons",
                                       square = FALSE) %>%
  st_sf() %>%
  filter(lengths(st_intersects(geometry, busstops)) > 0)
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("green", title = "Singapore Boundary", alpha = 0.5) +
  tm_shape(honeycomb) +
  tm_fill(col = "white", title = "Hexagons", alpha = 1) +
  tm_borders(alpha = 0.2) +
  tm_layout(main.title = "Honeycomb grid corresponding to Singapore bus stops",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_compass(type="8star", size = 2, bg.color = "white", bg.alpha = 0.5) +
  tm_scale_bar(bg.color = "white", bg.alpha = 0.5) +
  tm_shape(busstops) +
  tm_dots(col = "red", size = 0.001, title = "Bus Stops") +
  tm_grid(alpha = 0.2)
```

Assign id

```{r}
honeycomb$HEX_ID <- sprintf("H%04d", seq_len(nrow(honeycomb))) %>% as.factor()
```

```{r}
write_rds(honeycomb, "data/rds/honeycomb.rds")
```

## Generating Origin and Destination Data by Hexagon

## Importing Bus Passenger data

The data set is an aspatial data in `csv` format so we will use `read_csv()` to import the data.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
kable(head(odbus))
```

### Filtering the study interest

Weekend morning

```{r}
odbus <- odbus %>% filter(
  DAY_TYPE == "WEEKENDS/HOLIDAY" &
    TIME_PER_HOUR >= 11 &
    TIME_PER_HOUR < 14
)
```

### Mapping Bus Stop to Hexagon

```{r}
bs_hex <- st_intersection(busstops, honeycomb) %>%
  st_drop_geometry() %>%
  select(c(BUS_STOP_N, HEX_ID))
kable(head(bs_hex))
```

What if bus stop is in 2 hexagons?

#### A bus stop is included in 2 hexagons

We have to remove one of them.

```{r}
kable(head(bs_hex))
```

```{r}
tm_shape(honeycomb[1:10,]) +
  tm_fill(col = "white", title = "Hexagons", alpha = 1) +
  tm_text("HEX_ID", size = 0.8) +
  tm_borders(alpha = 0.2) +
  tm_layout(main.title = "Map showing bus stops in 2 hexagons",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_scale_bar(bg.color = "white", bg.alpha = 0.5, position = c("left", "top")) +
  tm_shape(busstops %>% filter(BUS_STOP_N == "25059")) +
  tm_dots(col = "red", size = 0.05, title = "Bus Stops") +
  tm_grid(alpha = 0.2)
```

The bus stop is right on the boundary of H0001 and H0002. If we remove H0002, H0001 will be an island so let us remove H0001. This way, H0002 is still connected to another hexagon. Let's also re-assign the ids of the hexagon.

```{r}
honeycomb <- honeycomb %>% filter(HEX_ID != "H0001")
honeycomb$HEX_ID <- sprintf("H%04d", seq_len(nrow(honeycomb))) %>% as.factor()
```

```{r}
tm_shape(honeycomb[1:10,]) +
  tm_fill(col = "white", title = "Hexagons", alpha = 1) +
  tm_text("HEX_ID", size = 0.8) +
  tm_borders(alpha = 0.2) +
  tm_layout(main.title = "Honeycomb grid corresponding to Singapore bus stops",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_scale_bar(bg.color = "white", bg.alpha = 0.5, position = c("left", "top")) +
  tm_shape(busstops %>% filter(BUS_STOP_N == "25059")) +
  tm_dots(col = "red", size = 0.05, title = "Bus Stops") +
  tm_grid(alpha = 0.2)
```

```{r}
bs_hex <- st_intersection(busstops, honeycomb) %>%
  st_drop_geometry() %>%
  select(c(BUS_STOP_N, HEX_ID))
kable(head(bs_hex))
```

### Adding hexagon information to bus passenger data

`inner_join()` as some bus stops in `odbus` do not have point data.

```{r}
odbushex <- odbus %>% inner_join(bs_hex,
                                by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIG_HEX_ID = HEX_ID) %>% 
  inner_join(bs_hex,
            by = c("DESTINATION_PT_CODE" = "BUS_STOP_N")) %>%
  rename(DEST_HEX_ID = HEX_ID) %>% 
  rename(HOUR_OF_DAY = TIME_PER_HOUR)
```

## Aggregating trips based on origin and destination

```{r}
odtrips <- odbushex %>% group_by(
    ORIG_HEX_ID,
    DEST_HEX_ID) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
kable(head(odtrips))
```

```{r}
rm(busstops)
rm(odbus)
rm(odbushex)
```

# Visualizing Flow Patterns

```{r}
flowline <- odtrips[odtrips$ORIG_HEX_ID != odtrips$DEST_HEX_ID,] %>% od2line(
  honeycomb,
  zone_code = "HEX_ID")

```

## Choosing visualization interval

```{r}
quantile(
  flowline$TRIPS,
  probs = c(0, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99, 0.999, 1))
```

```{r}
#| code-fold: true
#| code-summary: "**Show the code**"
tm_shape(mpsz) +
  tm_fill("lightgreen", title = "Singapore Boundary") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Map of bus stops in Singapore",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_shape(honeycomb) +
  tm_fill(col = "white", title = "Hexagons", alpha = 1) +
  tm_borders(alpha = 0.2) +
  
  tm_shape(flowline[flowline$TRIPS > 1179,]) +
  tm_lines(lwd = "TRIPS",
           col = "red",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3) +
  
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```
