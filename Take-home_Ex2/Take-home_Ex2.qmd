---
title: "Take Home Exercise 2: A Case Study of Singapore Public Bus Commuter Flows"
author: "Kristine Joy Paas"
date: "6 Dec 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
---

# Overview

The aim of this exercise to study the bus commuter flow patterns in Singapore to gain insights that support decision-making.

We will be examining the **weekend morning peak hours** (11 AM - 2 PM) to figure out where people go during weekends and holidays.

We will also be the modelling the spatial interaction between the different locations in Singapore, related to the bus commuter patterns.

Check <https://isss624-ay2023-24nov.netlify.app/take-home_ex02> for the full requirements of this exercise.

## The Analysis

The analysis has two parts: (1) analyzing the spatial interactions between pairs of zone, (2) modelling the interaction.

We will create a honeycomb grid with hexagons with a distance of **375m** from the center to the midpoint of the edge as the [traffic analysis zone (TAZ)](https://tmg.utoronto.ca/files/Reports/Traffic-Zone-Guidance_March-2021_Final.pdf). These hexagons will serve as the **zones** for our analysis.

::: panel-tabset
### Spatial Interaction Analysis

We will visualize the interactions by plotting the flow lines corresponding to the number of trips between each pair of zones.

We need the following to start this analysis:

-   geometry with the traffic analysis zones

-   data about the number of trips between different pairs of zones

### Spatial interaction Modelling

We will generate 4 *log*-based Poisson models:

-   origin-constrained model

-   destination-constrained model

-   unconstrained model

-   doubly-constrained model

We need the following to start this analysis:

-   geometry with the traffic analysis zones

-   propulsiveness variables, which influence the number of of trips originating from a zone

-   attractiveness variables, which influence bus commuters to make a trip a zone

-   data about the number of trips between different pairs of zones

-   distance between each pair of zone

We use the different variables to generate formula for each model, which will be explored further in their respective sections.

Once the models are generated, we will also compare the models as to which one best fits our data, using **goodness of fit** test or $R^2$ test.
:::

To perform our modelling, we need to identify the propulsiveness and attractiveness variables we will use for our model.

As our data will be based on real-world data, *Passenger Volume By Origin Destination Bus Stops* from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html) via API, we can think of possible factors based on our real-world experience.

As we are interested in the factors that influence **weekend/holiday morning (11 AM - 2PM)** peak period bus commuting patterns, we will consider the following variables.

::: panel-tabset
### Attractiveness

Attractiveness variables are factors that can motivate people to go to their destinations. In our case, these are what *motivates people to ride to their destination bus stop*.

::: {.callout-note collapse="true" appearance="simple"}
#### Why not use *Train Station Exit* instead?

It is more ideal to use the [*Train Station Exit Point*](https://datamall.lta.gov.sg/content/dam/datamall/datasets/Geospatial/TrainStationExit.zip) dataset compared to *Train Station* dataset.

However, there is no dataset where we can get **how many people exit from a specific station exit** as **passengers tap in and out within the station**, not the exits.

In [Propulsiveness], we will use the **number of people exiting from a station**, and since we cannot estimate the number of people taking specific exits from the said number, we will just use the station location itself for simplicity.
:::

| Variable         | Data Source                                                                                                                       | Motivation                                               |
|------------------------|------------------------|------------------------|
| `BUS_STOP_COUNT` | *Bus Stop Location* from [LTA DataMall](https://datamall.lta.gov.sg/content/dam/datamall/datasets/Geospatial/BusStopLocation.zip) | Transferring to another bus to their end destination     |
| `TRAIN_ST_COUNT` | *Train Station* from [LTA DataMall](https://datamall.lta.gov.sg/content/dam/datamall/datasets/Geospatial/TrainStationExit.zip)    | Transferring to train to their end destination           |
| `HDB_COUNT`      | `hdb.csv` aspatial data provided on E-learn                                                                                       | To meet up with friends/family                           |
| `ENTERTN_COUNT`  | `entertn.shp` geospatial data provided on E-learn                                                                                 | For recreation, spending time with friends/family        |
| `F_AND_B_COUNT`  | `F&B.shp` geospatial data provided on E-learn                                                                                     | For spending time with friends/family                    |
| `LEISURE_COUNT`  | `Liesure&Recreation.shp` geospatial data provided on E-learn                                                                      | For recreation, spending time with friends/family        |
| `RETAIL_COUNT`   | `Retails.shp` geospatial data provided on E-learn                                                                                 | For errands, shopping, spending time with friends/family |

### Propulsiveness

Propulsiveness variables are factors that influence people to ride the bus from specific zones. This is based on the **number** **of potential passengers** at the origin zones.

| Variable             | Data Source                                                                                                                               | Motivation                                                                                        |
|------------------------|------------------------|------------------------|
| `BUS_ALIGHT_COUNT`   | *Passenger Volume By Origin Destination Bus Stops* from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html) via API      | Passengers who alight from a bus stop within can transfer to another bus to reach                 |
| `TRAIN_ALIGHT_COUNT` | *Passenger Volume By Origin Destination Train Stations* from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html) via API | Passengers who alight from a train station can transfer to a bus to reach their final destination |
| `HDB_RESIDENT_COUNT` | `hdb.csv` aspatial data provided on E-learn                                                                                               | Residents in an area are potential bus passengers as they leave their homes                       |
:::

## Data Outputs

To accomplish our analysis, we need to prepare the data with the following specifications.

For all our geospatial data, we will use the [**SVY21**](https://app.sla.gov.sg/sirent/About/PlaneCoordinateSystem) projection it is appropriate for the Singapore context. Also, having a consistent projection will make it straightforward to use the functions from `sfdep`.

::: panel-tabset
### Utility

::: {.callout-note collapse="true" appearance="minimal"}
#### Singapore Boundary geometry (*mpsz)*

Sourced from `MPSZ-2019` geospatial data from E-learn, this will provide the Singapore boundary geometry for visualization purposes.

We will be using `tmap_mode("plot")` instead of `tmap_mode("view")` to make the code run more efficiently with less memory requirements.

**Prerequisites:** None

**Output data:** `mpsz` (geospatial)
:::

::: {.callout-note collapse="true" appearance="minimal"}
#### Honeycomb grid corresponding to bus stop locations (*honeycomb)*

Sourced from the `shp` [*Bus Stop Locations*](https://datamall.lta.gov.sg/content/datamall/en/static-data.html#:~:text=drop%20off%20passengers.-,203%20kB,-Last%20Update%3A%C2%A0Jul) dataset from LTA DataMall. This consist of hexagons with a distance of **375m** from the center to the midpoint of the edge as the [traffic analysis zone (TAZ)](https://tmg.utoronto.ca/files/Reports/Traffic-Zone-Guidance_March-2021_Final.pdf).

We only consider the bus stops within Singapore so we have to ensure that the bus stops included here are within the [Singapore Boundary geometry (mpsz)].

**Prerequisites:** [Singapore Boundary geometry (mpsz)]

**Output data:** `honeycomb` (geospatial)

**Columns:**

-   `HEX_ID`: Unique ID used to associate the zone with other data frames
-   Gometry of the hexagons corresponding to the traffic analysis zone
:::

### Spatial Interaction Analysis

::: {.callout-note collapse="true" appearance="minimal"}
#### Number of trips between 2 zones (*od_hex*) {#number-of-trips-between-2-zones-hexagon}

This contains the number of trips on **weekend/holiday morning peak periods** (11 AM - 2 PM). Data is sourced from *Passenger Volume By Origin Destination Bus Stops* from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html) via API

This data will be used generating the flow lines for visualization, and for Spatial Interaction Modelling.

**Prerequisites:** [Honeycomb grid corresponding to bus stop locations (honeycomb)]

**Output data:** `od_hex` (aspatial)

**Columns**:

-   `ORIG_HEX_ID`: ID corresponding to the origin zone

-   `DEST_HEX_ID`: ID corresponding to the destination zone

-   `TRIPS`: Number of bus trips between the origin and destination zones
:::

::: {.callout-note collapse="true" appearance="minimal"}
#### Flow Lines

This contains the flow lines derived from the pairs of zones in [Number of trips between 2 zones (od_hex)]. It will be used to visualize the flow patterns.

**Prerequisites:** [Number of trips between 2 zones (od_hex)]

**Output data:** `flowlines`

**Columns**:

-   `ORIG_HEX_ID`: ID corresponding to the origin zone

-   `DEST_HEX_ID`: ID corresponding to the destination zone

-   `TRIPS`: Number of bus trips between the origin and destination zones

-   Geometry of the line between the origin and destination zones
:::

### Spatial Interaction Modelling

::: {.callout-note collapse="true" appearance="minimal"}
#### Zone distance table (*dist_tbl*)

This table contains the distances between all the pair of zones. This corresponds to the **cost** component of our model

**Prerequisites:** [Honeycomb grid corresponding to bus stop locations (honeycomb)]

**Output data:** `dist_tbl` (aspatial)

**Columns**:

-   `ORIG_HEX_ID`: ID corresponding to the origin zone

-   `DEST_HEX_ID`: ID corresponding to the destination zone

-   `DISTANCE`: Distance between the (centroids of) origin and destination zones
:::

::: {.callout-note collapse="true" appearance="minimal"}
#### Attractiveness Variables Table (*attractiveness*)

This table contains the values of the [Attractiveness] variables. Data sources are defined in the [Attractiveness] section.

**Prerequisites:** [Honeycomb grid corresponding to bus stop locations (honeycomb)], prepared data from identified data sources

**Output data:** `attractiveness` (aspatial)

**Columns**:

-   `HEX_ID`: ID corresponding to the zone
-   `BUS_STOP_COUNT`: Number of bus stops in a zone
-   `TRAIN_ST_COUNT`: Number of train stations in a zone
-   `HDB_COUNT`: Number of HDB blocks in a zone
-   `ENTERTN_COUNT`: Number of entertainment locations in a zone
-   `F_AND_B_COUNT`: Number of F&B outlets in a zone
-   `LEISURE_COUNT`: Number of leisure and recreation in a zone
-   `RETAIL_COUNT`: Number of retail locations in a zone
:::

::: {.callout-note collapse="true" appearance="minimal"}
#### Propulsiveness Variables Table (*propulsiveness*)

This table contains the values of the [Propulsiveness] variables. Data sources are defined in the [Propulsiveness] section.

**Prerequisites:** [Honeycomb grid corresponding to bus stop locations (honeycomb)], prepared data from identified data sources

**Output data:** `propulsiveness` (aspatial)

**Columns**:

-   `HEX_ID`: ID corresponding to the zone

-   `BUS_ALIGHT_COUNT`: Number of bus passengers alighting from a zone

-   `TRAIN_ALIGHT_COUNT`: Number of train passengers alighting from a zone

-   `HDB_RESIDENT_COUNT`: Number of residents in a zone
:::

::: {.callout-note collapse="true" appearance="minimal"}
#### Model Data (*model_data*)

Contains all the data we need to model the interaction.

**Prerequisites:**

-   [Zone distance table (dist_tbl)]

-   [Number of trips between 2 zones (od_hex)]

-   [Attractiveness Variables Table (attractiveness)]

-   [Propulsiveness Variables Table (propulsiveness)]

**Output data:** `model_data` (aspatial)

**Columns**:

-   `ORIG_HEX_ID`: ID corresponding to the origin zone

-   `DEST_HEX_ID`: ID corresponding to the destination zone

-   `DISTANCE`: Distance between the (centroids of) origin and destination zones

-   `TRIPS`: Number of bus trips between the origin and destination zones

-   `DEST_*_COUNT`: Values from [Attractiveness Variables Table (attractiveness)]

-   `ORIG_*_COUNT`: Values from [Propulsiveness Variables Table (propulsiveness)]
:::
:::

## Managing our data

As this process is expected to have a lot of intermediate steps, **Save**, **Load**, and **Data clear** points are available to make our data wrangling more efficient.

::: callout-tip
### Save point

This is where data is written as `rds` files using `write_rds()` for important data sets that will be used in later analysis. Examples are:

-   Data we need to prepare for analysis
-   Critical outputs of expensive calculations
-   Cleaned up data for lightweight processing
:::

::: callout-note
### Load point

This is where data is loaded from `rds` files using `read_rds()`. They were previously generated by the save point.

**TIP**: Skip to the load points to progress without running the code above it
:::

::: callout-warning
### Data clear point

This is where data that will not be used anymore are cleared. The data in RStudio environment will pile up and will make it more difficult to check the relevant data in each part.

We can set `#| eval: false` in code chunks if we want skip the clearing. For example, the code below won't be run.

```{r}
#| eval: false
message <- "This code chunk executed"
```
:::

# Setup

```{r}
#| label: setup
pacman::p_load(sf, sp, tmap, tidyverse, knitr, sfdep, stplanr, reshape2)
tmap_mode("plot")
tmap_style("natural")
set.seed(1234)
```
