---
title: "In-class Exercise 2: Spatial Weights with sfdep"
author: "Kristine Joy Paas"
date: "25 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
---

# Overview

# Getting Started

Four R packages will be used for this in-class exercise are: `sf`, `sfdep`, `tmap`, `tidyverse`, and `knitr`.

-   [sf](https://cran.r-project.org/web/packages/sf/index.html) - for processing geospatial data

-   [sfdep](https://cran.r-project.org/web/packages/sfdep/index.html) - provides tools Emerging Hot Spot Analysis

-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html) - for generating thematic maps

-   [tidyverse](https://cran.r-project.org/web/packages/tidyverse/index.html) - for processing aspatial data

-   [knitr](https://cran.r-project.org/web/packages/knitr/index.html) - for generating HTML tables

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, knitr)
```

# Preparing the data

Next we move the [provided data from E-learn](https://elearn.smu.edu.sg/d2l/le/content/357628/viewContent/2308366/View) under the `data/` directory. We will also create \`rds/\` directory for saving the calculated data for later use.

## Importing the data

First, we will import the geospatial data in `shp` format.

```{r}
hunan = st_read(dsn = "data/geospatial",
                layer = "Hunan")
```

Second, we import the aspatial data `Hunan_2012`, which contains the **GDP Per Capita** (GDPPC) of Chinese counties in 2012.

```{r}
hunan2012 = read_csv("data/aspatial/Hunan_2012.csv")
```

## Combining them all together

As seen from the import above, each of the dataframes have 88 rows each. Each row corresponds to a record per county.

However, we are already interested in the following columns:

-   County

-   GDPPC

```{r}
hunan <- left_join(hunan, hunan2012)%>%
  select(7, 15)
```

::: callout-note
We do not need to specify the columns to join as both dataframes have the `County` column so `left_join()` is able to detect that this is the column to join by.
:::

## Plotting a choropleth map

Next is to plot the map of GDP per capita values.

```{r}
tmap_mode("plot")
tm_shape(hunan) +
  tm_fill("GDPPC", 
          style = "quantile", 
          palette = "Blues",
          title = "GDPPC") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "GDP per capita by county in China (2012)",
            main.title.position = "center",
            main.title.size = 1.0,
            legend.height = 0.35, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)
```

# Deriving Contiguity Spatial Weights

In deriving contiguity neighbors, `st_contiguity()` is used.

## Identifying neighbors via Queen's method

::: callout-important
`st_continguity()` used `queen = TRUE` as default. If not specified, it will use the Queen's method.
:::

```{r}
nb_queen <- hunan %>% 
  mutate(nb = st_contiguity(geometry),
         .before = 1)
summary(nb_queen)
```

To prettify the output of `head()`, we can use `kable`.

```{r}
kable(head(nb_queen,
           n=10))
```

## Identifying neighbors via Rook's method

We do the same for the Rook's method. This time, we need to supply `queen = FALSE` to `st_contiguity()`.

```{r}
nb_rook <- hunan %>% 
  mutate(nb = st_contiguity(geometry, queen = FALSE),
         .before = 1)
summary(nb_rook)
```

```{r}
kable(head(nb_rook,
           n=10))
```

## Identifying higher-order contiguity neighbors

This simply means neighbors of neighbors.

```{r}
nb2_queen <-  hunan %>% 
  mutate(nb = st_contiguity(geometry),
         nb2 = st_nb_lag_cumul(nb, 2),
         .before = 1)
summary(nb2_queen)
```

```{r}
kable(head(nb2_queen))
```

# Deriving Contiguity Weights

This introduces the `st_weights()` function from `sfdep` to calculate spatial weights.

```{r}
wm_q <- hunan %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
wm_q
```

# Distance-based weights

## Deriving fixed-distance weights

First is to determine the upper limit for the distance for the nearest neigbor.

```{r}
geo <- sf::st_geometry(hunan)
nb <- st_knn(geo, longlat = TRUE)
dists <- unlist(st_nb_dists(geo, nb))
```

```{r}
summary(dists)
```

We use the max value of the result, **65.80**. For simplicity, let's set it to **66**.

Now we can calculate the fixed-distance weights.

```{r}
wm_fd <- hunan %>%
  mutate(nb = st_dist_band(geometry,
                           upper = 66),
               wt = st_weights(nb),
               .before = 1)
wm_fd
```

## Calculate inverse distance weights

```{r}
wm_idw <- hunan %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
wm_idw
```

# Reflections

I'm getting the hang of the basic steps in data wrangling. However, I still need to have the `tmap` documentation open to plot maps.

The `sfdep` functions indeed simplified the process of calculating Spatial weights.

Lastly, I copy-pasted most of the code here as I already spent 3 hours per day the last week on the Hand-on Exercises. It's too much effort for the same learning. I'd rather use my time to work on the Take-home Exercise or the next lesson.

I still needed to fix the code as variable names differed from part to part so I wasn't mindlessly copy-pasting despite spending less time.
