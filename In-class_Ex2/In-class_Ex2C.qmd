---
title: "In-class Exercise 2C: EHSA"
author: "Kristine Joy Paas"
date: "25 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
---

# Overview

For this exercise, we will do spatio-temporal analysis to understand spatial patterns with additional factor of time.

# Getting Started

Four R packages will be used for this in-class exercise are: `sf`, `sfdep`, `tmap`, `tidyverse`, and `knitr`.

-   [sf](https://cran.r-project.org/web/packages/sf/index.html) - for processing geospatial data

-   [sfdep](https://cran.r-project.org/web/packages/sfdep/index.html) - provides tools Emerging Hot Spot Analysis

-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html) - for generating thematic maps

-   [tidyverse](https://cran.r-project.org/web/packages/tidyverse/index.html) - for processing aspatial data

-   [plotly](https://plotly.com/r/) - for interactive graphs

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, plotly)
```

# Preparing the data

Next we move the [provided data from E-learn](https://elearn.smu.edu.sg/d2l/le/content/357628/viewContent/2308366/View) under the `data/` directory. We will also create \`rds/\` directory for saving the calculated data for later use.

## Importing the data

First, we will import the geospatial data in `shp` format.

```{r}
hunan = st_read(dsn = "data/geospatial",
                layer = "Hunan")
```

Second, we import the aspatial data `Hunan_GDPPC`, which contains the **GDP Per Capita** (GDPPC) of Chinese counties.

```{r}
GDPPC = read_csv("data/aspatial/Hunan_GDPPC.csv")
```

# Creating a Time Series Cube

```{r}
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County",
                      .time_col = "Year")
GDPPC_st
```

We can check if the output is indeed a space-time cube:

```{r}
is_spacetime_cube(GDPPC_st)
```

## Computing Gi\*

### Deriving spatial weights

Similar to the previous exercises, we calculate inverse distance first. However, we now have a time column in our data which is `Year`.

```{r}
GDPPC_nb <- GDPPC_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(st_contiguity(geometry)),
         wt = st_inverse_distance(nb, geometry,
                                  scale = 1,
                                  alpha = 1),
         .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
GDPPC_nb
```

### Computing local Gi\*

```{r}
gi_stars <- GDPPC_nb %>%
  group_by(Year) %>%
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt)) %>%
  tidyr::unnest(gi_star)
gi_stars
```

# Mann-Kendall Test

We can use the Gi\* values to evaluate each location for trends using Mann-Kendall Test. Example below uses Changsha county.

```{r}
cbg <- gi_stars %>% 
  ungroup() %>% 
  filter(County == "Changsha") |> 
  select(County, Year, gi_star)
cbg
```

Now we plot this data using `ggplot`:

```{r}
ggplot(data = cbg, 
       aes(x = Year, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

The graph above is static. We can make it interactive by using `ggplotly()`.

```{r}
p <- ggplot(data = cbg, 
       aes(x = Year, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(p)
```

Next is to perform the test.

```{r}
cbg %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

In the above result, sl is the p-value. This result tells us that there is a slight upward but insignificant trend.

We can replicate this for each location by using `group_by()` of dplyr package.

```{r}
ehsa <- gi_stars %>%
  group_by(County) %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
ehsa
```

## Arrange to show significant emerging hot/cold spots

```{r}
emerging <- ehsa %>% 
  arrange(sl, abs(tau)) %>% 
  slice(1:5)
emerging
```

## Performing Emerging Hot spot Analysis

```{r}
ehsa <- emerging_hotspot_analysis(
  x = GDPPC_st,
  .var = "GDPPC",
  k = 1,
  nsim = 99
)
```

### Visualizing the distribution of EHSA classes

```{r}
ggplot(data = ehsa,
       aes(x = classification)) +
  geom_bar()
```

Figure above shows that sporadic cold spots class has the high numbers of county. Visualizing EHSA

To generate a map, we have to add geospatial component to the data to we have join `ehsa` with `hunan`.

```{r}
hunan_ehsa <- hunan %>%
  left_join(ehsa,
            by = join_by(County == location))
```

Then we can finally generate the map.

```{r}
ehsa_sig <- hunan_ehsa  %>%
  filter(p_value < 0.05)
tmap_mode("plot")
tm_shape(hunan_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
  tm_fill("classification") + 
  tm_borders(alpha = 0.4)
```

# Reflection

I find this exercise very helpful as I was thinking of doing analysis on the bus commuter trends, if I have enough time. I now know where to start in that analysis.
